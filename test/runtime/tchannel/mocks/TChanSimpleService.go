package mocks

import baz "github.com/uber/zanzibar/test/runtime/tchannel/gen-code/baz"
import mock "github.com/stretchr/testify/mock"
import thrift "github.com/uber/tchannel-go/thrift"

// TChanSimpleService is an autogenerated mock type for the TChanSimpleService type
type TChanSimpleService struct {
	mock.Mock
}

// Call provides a mock function with given fields: ctx, arg
func (_m *TChanSimpleService) Call(ctx thrift.Context, arg *baz.Data) (*baz.Data, error) {
	ret := _m.Called(ctx, arg)

	var r0 *baz.Data
	if rf, ok := ret.Get(0).(func(thrift.Context, *baz.Data) *baz.Data); ok {
		r0 = rf(ctx, arg)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*baz.Data)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(thrift.Context, *baz.Data) error); ok {
		r1 = rf(ctx, arg)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Simple provides a mock function with given fields: ctx
func (_m *TChanSimpleService) Simple(ctx thrift.Context) error {
	ret := _m.Called(ctx)

	var r0 error
	if rf, ok := ret.Get(0).(func(thrift.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SimpleFuture provides a mock function with given fields: ctx
func (_m *TChanSimpleService) SimpleFuture(ctx thrift.Context) error {
	ret := _m.Called(ctx)

	var r0 error
	if rf, ok := ret.Get(0).(func(thrift.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
