// Copyright (c) 2017 Uber Technologies, Inc.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

// AUTOGENERATED FILE: easyjson marshaller/unmarshallers.

package zanzibar_test

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjson635ef9aeDecodeGithubComUberZanzibarRuntime(in *jlexer.Lexer, out *MyBody) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "Client":
			(out.Client).UnmarshalEasyJSON(in)
		case "Token":
			out.Token = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson635ef9aeEncodeGithubComUberZanzibarRuntime(out *jwriter.Writer, in MyBody) {
	out.RawByte('{')
	first := true
	_ = first
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"Client\":")
	(in.Client).MarshalEasyJSON(out)
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"Token\":")
	out.String(string(in.Token))
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v MyBody) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson635ef9aeEncodeGithubComUberZanzibarRuntime(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v MyBody) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson635ef9aeEncodeGithubComUberZanzibarRuntime(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *MyBody) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson635ef9aeDecodeGithubComUberZanzibarRuntime(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *MyBody) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson635ef9aeDecodeGithubComUberZanzibarRuntime(l, v)
}
func easyjson635ef9aeDecodeGithubComUberZanzibarRuntime1(in *jlexer.Lexer, out *MyBodyClient) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "Token":
			out.Token = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson635ef9aeEncodeGithubComUberZanzibarRuntime1(out *jwriter.Writer, in MyBodyClient) {
	out.RawByte('{')
	first := true
	_ = first
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"Token\":")
	out.String(string(in.Token))
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v MyBodyClient) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson635ef9aeEncodeGithubComUberZanzibarRuntime1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v MyBodyClient) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson635ef9aeEncodeGithubComUberZanzibarRuntime1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *MyBodyClient) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson635ef9aeDecodeGithubComUberZanzibarRuntime1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *MyBodyClient) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson635ef9aeDecodeGithubComUberZanzibarRuntime1(l, v)
}
