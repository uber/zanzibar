// Code generated by thriftrw v1.0.0
// @generated

package meta

import (
	"errors"
	"fmt"
	"go.uber.org/thriftrw/wire"
	"strings"
)

type HealthStatus struct {
	Ok      bool    `json:"ok"`
	Message *string `json:"message,omitempty"`
}

func (v *HealthStatus) ToWire() (wire.Value, error) {
	var (
		fields [2]wire.Field
		i      int = 0
		w      wire.Value
		err    error
	)
	w, err = wire.NewValueBool(v.Ok), error(nil)
	if err != nil {
		return w, err
	}
	fields[i] = wire.Field{ID: 1, Value: w}
	i++
	if v.Message != nil {
		w, err = wire.NewValueString(*(v.Message)), error(nil)
		if err != nil {
			return w, err
		}
		fields[i] = wire.Field{ID: 2, Value: w}
		i++
	}
	return wire.NewValueStruct(wire.Struct{Fields: fields[:i]}), nil
}

func (v *HealthStatus) FromWire(w wire.Value) error {
	var err error
	okIsSet := false
	for _, field := range w.GetStruct().Fields {
		switch field.ID {
		case 1:
			if field.Value.Type() == wire.TBool {
				v.Ok, err = field.Value.GetBool(), error(nil)
				if err != nil {
					return err
				}
				okIsSet = true
			}
		case 2:
			if field.Value.Type() == wire.TBinary {
				var x string
				x, err = field.Value.GetString(), error(nil)
				v.Message = &x
				if err != nil {
					return err
				}
			}
		}
	}
	if !okIsSet {
		return errors.New("field Ok of HealthStatus is required")
	}
	return nil
}

func (v *HealthStatus) String() string {
	var fields [2]string
	i := 0
	fields[i] = fmt.Sprintf("Ok: %v", v.Ok)
	i++
	if v.Message != nil {
		fields[i] = fmt.Sprintf("Message: %v", *(v.Message))
		i++
	}
	return fmt.Sprintf("HealthStatus{%v}", strings.Join(fields[:i], ", "))
}

type VersionInfo struct {
	Language        string `json:"language"`
	LanguageVersion string `json:"language_version"`
	Version         string `json:"version"`
}

func (v *VersionInfo) ToWire() (wire.Value, error) {
	var (
		fields [3]wire.Field
		i      int = 0
		w      wire.Value
		err    error
	)
	w, err = wire.NewValueString(v.Language), error(nil)
	if err != nil {
		return w, err
	}
	fields[i] = wire.Field{ID: 1, Value: w}
	i++
	w, err = wire.NewValueString(v.LanguageVersion), error(nil)
	if err != nil {
		return w, err
	}
	fields[i] = wire.Field{ID: 2, Value: w}
	i++
	w, err = wire.NewValueString(v.Version), error(nil)
	if err != nil {
		return w, err
	}
	fields[i] = wire.Field{ID: 3, Value: w}
	i++
	return wire.NewValueStruct(wire.Struct{Fields: fields[:i]}), nil
}

func (v *VersionInfo) FromWire(w wire.Value) error {
	var err error
	languageIsSet := false
	language_versionIsSet := false
	versionIsSet := false
	for _, field := range w.GetStruct().Fields {
		switch field.ID {
		case 1:
			if field.Value.Type() == wire.TBinary {
				v.Language, err = field.Value.GetString(), error(nil)
				if err != nil {
					return err
				}
				languageIsSet = true
			}
		case 2:
			if field.Value.Type() == wire.TBinary {
				v.LanguageVersion, err = field.Value.GetString(), error(nil)
				if err != nil {
					return err
				}
				language_versionIsSet = true
			}
		case 3:
			if field.Value.Type() == wire.TBinary {
				v.Version, err = field.Value.GetString(), error(nil)
				if err != nil {
					return err
				}
				versionIsSet = true
			}
		}
	}
	if !languageIsSet {
		return errors.New("field Language of VersionInfo is required")
	}
	if !language_versionIsSet {
		return errors.New("field LanguageVersion of VersionInfo is required")
	}
	if !versionIsSet {
		return errors.New("field Version of VersionInfo is required")
	}
	return nil
}

func (v *VersionInfo) String() string {
	var fields [3]string
	i := 0
	fields[i] = fmt.Sprintf("Language: %v", v.Language)
	i++
	fields[i] = fmt.Sprintf("LanguageVersion: %v", v.LanguageVersion)
	i++
	fields[i] = fmt.Sprintf("Version: %v", v.Version)
	i++
	return fmt.Sprintf("VersionInfo{%v}", strings.Join(fields[:i], ", "))
}
