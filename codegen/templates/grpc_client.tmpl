{{- /* template to render gateway gRPC client code */ -}}
{{- $instance := .Instance }}
{{- $services := .Services }}
package {{$instance.PackageInfo.PackageName}}

import (
	"context"

	"github.com/afex/hystrix-go/hystrix"
	"go.uber.org/yarpc"

	module "{{$instance.PackageInfo.ModulePackagePath}}"
	{{range $idx, $pkg := .IncludedPackages -}}
	{{$pkg.AliasName}} "{{$pkg.PackageName}}"
	{{end}}
	zanzibar "github.com/uber/zanzibar/runtime"
)

{{$clientID := $instance.InstanceName -}}
{{$exposedMethods := .ExposedMethods -}}
{{- $clientName := printf "%sClient" (camel $clientID) }}
{{- $exportName := .ExportName}}

// Client defines {{$clientID}} client interface.
type Client interface {
{{range $i, $svc := .ProtoServices -}}
	{{range $j, $method := $svc.RPC}}
	{{$serviceMethod := printf "%s::%s" $svc.Name .Name -}}
	{{$methodName := (title (index $exposedMethods $serviceMethod)) -}}
	{{- if $methodName -}}
		{{$methodName}} (
		ctx context.Context,
		request *gen.{{$method.Request.Name}},
		opts ...yarpc.CallOption,
		) (*gen.{{$method.Response.Name}}, error)
	{{ end -}}
	{{ end -}}
{{ end -}}
}

// {{$clientName}} is the gRPC client for downstream service.
type {{$clientName}} struct {
	{{range $s := $services -}}
	{{camel $s.Name}}Client gen.{{pascal $s.Name}}YARPCClient
	{{ end -}}
	opts   *zanzibar.GRPCClientOpts
}

// NewClient returns a new gRPC client for service {{$clientID}}
func {{$exportName}}(deps *module.Dependencies) Client {
	oc := deps.Default.GRPCClientDispatcher.MustOutboundConfig("{{$clientID}}")
	var routingKey string
	if deps.Default.Config.ContainsKey("clients.{{$clientID}}.routingKey") {
		routingKey = deps.Default.Config.MustGetString("clients.{{$clientID}}.routingKey")
	}
	var requestUUIDHeaderKey string
	if deps.Default.Config.ContainsKey("clients.{{$clientID}}.requestUUIDHeaderKey") {
		requestUUIDHeaderKey = deps.Default.Config.MustGetString("clients.{{$clientID}}.requestUUIDHeaderKey")
	}
	timeoutInMS := int(deps.Default.Config.MustGetInt("clients.{{$clientID}}.timeout"))
	methodNames := map[string]string{
		{{range $i, $svc := .ProtoServices -}}
			{{range $j, $method := $svc.RPC -}}
			{{$serviceMethod := printf "%s::%s" $svc.Name .Name -}}
			{{$methodName := (title (index $exposedMethods $serviceMethod)) -}}
			{{- if $methodName -}}
				"{{$serviceMethod}}": "{{$methodName}}",
			{{ end -}}
			{{- end -}}
		{{- end}}
	}
	return &{{$clientName}}{
		{{range $s := $services -}}
		{{camel $s.Name}}Client: gen.New{{pascal $s.Name}}YARPCClient(oc),
		{{ end -}}
		opts: zanzibar.NewGRPCClientOpts(
		deps.Default.Logger,
		deps.Default.ContextMetrics,
		deps.Default.ContextExtractor,
		methodNames,
		"{{$clientID}}",
		routingKey,
		requestUUIDHeaderKey,
		configureCircuitBreaker(deps, timeoutInMS),
		timeoutInMS,
		),
	}
}

func configureCircuitBreaker(deps *module.Dependencies, timeoutVal int) bool {
	// circuitBreakerDisabled sets whether circuit-breaker should be disabled
	circuitBreakerDisabled := false
	if deps.Default.Config.ContainsKey("clients.{{$clientID}}.circuitBreakerDisabled") {
		circuitBreakerDisabled = deps.Default.Config.MustGetBoolean("clients.{{$clientID}}.circuitBreakerDisabled")
	}
	if circuitBreakerDisabled {
		return false
	}
	// sleepWindowInMilliseconds sets the amount of time, after tripping the circuit,
	// to reject requests before allowing attempts again to determine if the circuit should again be closed
	sleepWindowInMilliseconds := 5000
	if deps.Default.Config.ContainsKey("clients.{{$clientID}}.sleepWindowInMilliseconds") {
		sleepWindowInMilliseconds = int(deps.Default.Config.MustGetInt("clients.{{$clientID}}.sleepWindowInMilliseconds"))
	}
	// maxConcurrentRequests sets how many requests can be run at the same time, beyond which requests are rejected
	maxConcurrentRequests := 20
	if deps.Default.Config.ContainsKey("clients.{{$clientID}}.maxConcurrentRequests") {
		maxConcurrentRequests = int(deps.Default.Config.MustGetInt("clients.{{$clientID}}.maxConcurrentRequests"))
	}
	// errorPercentThreshold sets the error percentage at or above which the circuit should trip open
	errorPercentThreshold := 20
	if deps.Default.Config.ContainsKey("clients.{{$clientID}}.errorPercentThreshold") {
		errorPercentThreshold = int(deps.Default.Config.MustGetInt("clients.{{$clientID}}.errorPercentThreshold"))
	}
	// requestVolumeThreshold sets a minimum number of requests that will trip the circuit in a rolling window of 10s
	// For example, if the value is 20, then if only 19 requests are received in the rolling window of 10 seconds
	// the circuit will not trip open even if all 19 failed.
	requestVolumeThreshold := 20
	if deps.Default.Config.ContainsKey("clients.{{$clientID}}.requestVolumeThreshold") {
		requestVolumeThreshold = int(deps.Default.Config.MustGetInt("clients.{{$clientID}}.requestVolumeThreshold"))
	}

	hystrix.ConfigureCommand("{{$clientID}}", hystrix.CommandConfig{
		MaxConcurrentRequests:  maxConcurrentRequests,
		ErrorPercentThreshold:  errorPercentThreshold,
		SleepWindow:            sleepWindowInMilliseconds,
		RequestVolumeThreshold: requestVolumeThreshold,
		Timeout:                timeoutVal,
	})
	return true
}

{{range $i, $svc := .ProtoServices -}}
{{range $j, $method := $svc.RPC -}}
{{$serviceMethod := printf "%s::%s" $svc.Name .Name -}}
{{$methodName := (title (index $exposedMethods $serviceMethod)) -}}
{{if $methodName -}}
// {{$methodName}} is a client RPC call for method {{printf "%s::%s" $svc.Name $method.Name}}.
func (e *{{$clientName}}) {{$methodName}}(
	ctx context.Context,
	request *gen.{{$method.Request.Name}},
	opts ...yarpc.CallOption,
) (*gen.{{$method.Response.Name}}, error) {
	var result *gen.{{$method.Response.Name}}
	var err error

	ctx, callHelper := zanzibar.NewGRPCClientCallHelper(ctx, "{{printf "%s::%s" $svc.Name $method.Name}}", e.opts)

	if e.opts.RoutingKey != "" {
		opts = append(opts, yarpc.WithRoutingKey(e.opts.RoutingKey))
	}
	if e.opts.RequestUUIDHeaderKey != "" {
		reqUUID := zanzibar.RequestUUIDFromCtx(ctx)
		if reqUUID != "" {
			opts = append(opts, yarpc.WithHeader(e.opts.RequestUUIDHeaderKey, reqUUID))
		}
	}
	ctx, cancel := context.WithTimeout(ctx, e.opts.Timeout)
	defer cancel()

	runFunc := e.{{camel $svc.Name}}Client.{{$method.Name}}
	callHelper.Start()
	if e.opts.CircuitBreakerDisabled {
		result, err = runFunc(ctx, request, opts...)
	} else {
		err = hystrix.DoC(ctx, "{{$clientID}}", func(ctx context.Context) error {
			result, err = runFunc(ctx, request, opts...)
			return err
		}, nil)
	}
	callHelper.Finish(ctx, err)

	return result, err
}
{{end -}}
{{end -}}
{{end}}
