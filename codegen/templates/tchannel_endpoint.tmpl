{{- /* template to render edge gateway tchannel server code */ -}}
{{- $instance := .Instance }}
{{- $spec := .Spec }}
package {{$instance.PackageInfo.PackageName}}

import (
	"context"

	"github.com/pkg/errors"
	"go.uber.org/thriftrw/wire"
	"go.uber.org/zap"
	zanzibar "github.com/uber/zanzibar/runtime"

	{{range $idx, $pkg := .IncludedPackages -}}
	{{$pkg.AliasName}} "{{$pkg.PackageName}}"
	{{end -}}

	module "{{$instance.PackageInfo.ModulePackagePath}}"
)

{{$workflow := .WorkflowName -}}
{{$serviceMethod := printf "%s%s" (title .Method.ThriftService) (title .Method.Name) -}}
{{$handlerName := printf "%sHandler"  $serviceMethod -}}
{{$genCodePkg := .Method.GenCodePkgName -}}
{{with .Method -}}
// New{{$handlerName}} creates a handler to be registered with a thrift server.
func New{{$handlerName}}(
	gateway *zanzibar.Gateway,
	deps *module.Dependencies,
) *{{$handlerName}} {
	return &{{$handlerName}}{
		Clients: deps.Client,
	}
}

// {{$handlerName}} is the handler for "{{.ThriftService}}::{{.Name}}".
type {{$handlerName}} struct {
	Clients  *module.ClientDependencies
	endpoint *zanzibar.TChannelEndpoint
}

// Register adds the tchannel handler to the gateway's tchannel router
func (h *{{$handlerName}}) Register(g *zanzibar.Gateway) error {
	h.endpoint = g.TChannelRouter.Register(
		"{{$spec.EndpointID}}", "{{$spec.HandleID}}", "{{.ThriftService}}::{{.Name}}",
		h,
	)
	// TODO: Register should return an error for route conflicts
	return nil
}

// Handle handles RPC call of "{{.ThriftService}}::{{.Name}}".
func (h *{{$handlerName}}) Handle(
	ctx context.Context,
	reqHeaders map[string]string,
	wireValue *wire.Value,
) (bool, zanzibar.RWTStruct, map[string]string, error) {
	wfReqHeaders := zanzibar.ServerTChannelHeader(reqHeaders)
	{{if .ReqHeaders -}}
	if err := wfReqHeaders.Ensure({{.ReqHeaders | printf "%#v" }}, h.endpoint.Logger); err != nil {
		return false, nil, nil, errors.Wrapf(
			err, "%s.%s (%s) missing request headers",
			h.endpoint.EndpointID, h.endpoint.HandlerID, h.endpoint.Method,
		)
	}
	{{- end}}

	var res {{$genCodePkg}}.{{title .ThriftService}}_{{title .Name}}_Result

	{{if ne .RequestType "" -}}
	var req {{unref .RequestType}}
	if err := req.FromWire(*wireValue); err != nil {
		h.endpoint.Logger.Warn("Error converting request from wire", zap.Error(err))
		return false, nil, nil, errors.Wrapf(
			err, "Error converting %s.%s (%s) request from wire",
			h.endpoint.EndpointID, h.endpoint.HandlerID, h.endpoint.Method,
		)
	}
	{{end -}}

	workflow := {{$workflow}}{
		Clients: h.Clients,
		Logger:  h.endpoint.Logger,
	}

	{{if and (eq .RequestType "") (eq .ResponseType "")}}
	wfResHeaders, err := workflow.Handle(ctx, wfReqHeaders)
	{{else if eq .RequestType ""}}
	r, wfResHeaders, err := workflow.Handle(ctx, wfReqHeaders)
	{{else if eq .ResponseType ""}}
	wfResHeaders, err := workflow.Handle(ctx, wfReqHeaders, &req)
	{{else}}
	r, wfResHeaders, err := workflow.Handle(ctx, wfReqHeaders, &req)
	{{end}}

	{{- if .ResHeaders}}
	if err := wfResHeaders.Ensure({{.ResHeaders | printf "%#v" }}, h.endpoint.Logger); err != nil {
		return false, nil, nil, errors.Wrapf(
			err, "%s.%s (%s) missing response headers",
			h.endpoint.EndpointID, h.endpoint.HandlerID, h.endpoint.Method,
		)
	}
	{{- end}}

	resHeaders := map[string]string{}
	for _, key := range wfResHeaders.Keys() {
		resHeaders[key], _ = wfResHeaders.Get(key)
	}

	{{if eq (len .Exceptions) 0 -}}
		if err != nil {
			h.Logger.Warn("Handler returned error", zap.Error(err))
			return false, nil, resHeaders, err
		}
		res.Success = r
	{{else -}}
		if err != nil {
			switch v := err.(type) {
			{{$method := .Name -}}
			{{range .Exceptions -}}
				case *{{.Type}}:
					h.endpoint.Logger.Warn(
						"Handler returned non-nil error type *{{.Type}} but nil value",
						zap.Error(err),
					)
					if v == nil {
						return false, nil, resHeaders, errors.Errorf(
							"%s.%s (%s) handler returned non-nil error type *{{.Type}} but nil value",
							h.endpoint.EndpointID, h.endpoint.HandlerID, h.endpoint.Method,
						)
					}
					res.{{title .Name}} = v
			{{end -}}
				default:
					h.endpoint.Logger.Warn("Handler returned error", zap.Error(err))
					return false, nil, resHeaders, errors.Wrapf(
						err, "%s.%s (%s) handler returned error",
						h.endpoint.EndpointID, h.endpoint.HandlerID, h.endpoint.Method,
					)
			}
		} {{if ne .ResponseType "" -}} else {
			res.Success = r
		} {{end -}}
	{{end}}

	return err == nil, &res, resHeaders, nil
}

{{end -}}
