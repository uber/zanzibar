{{/* template to render gateway http endpoint tests */ -}}
{{- $instance := .Instance }}
package {{$instance.PackageInfo.PackageName}}

import (
	"bytes"
	"path/filepath"
	"net/http"
	"testing"
	"runtime"

	"github.com/stretchr/testify/assert"
	"github.com/uber/zanzibar/test/lib/bench_gateway"
	"github.com/uber/zanzibar/test/lib/test_backend"
	"github.com/uber/zanzibar/test/lib/test_gateway"
)

{{- $clientID := .ClientID }}
{{- $relativePathToRoot := .RelativePathToRoot}}
{{with .Method -}}
{{- $clientPackage := .Downstream.PackageName -}}
{{- $clientMethod := .DownstreamMethod -}}
{{- $clientMethodName := $clientMethod.Name | title -}}
{{- $clientMethodRequestType := fullTypeName  ($clientMethod).RequestType ($clientPackage) -}}
{{- $clientMethodResponseType := fullTypeName  ($clientMethod).ResponseType ($clientPackage) -}}
{{- $headers := .ReqHeaders }}


{{range $.TestStubs}}

func getDirName{{.HandlerID | title}}{{.TestName | title}}() string {
	_, file, _, _ := runtime.Caller(0)

	return filepath.Dir(file)
}

func Test{{.HandlerID | title}}{{.TestName | title}}OKResponse(t *testing.T) {
	var counter int

	gateway, err := testGateway.CreateGateway(t, nil, &testGateway.Options{
		KnownHTTPBackends: []string{"{{$clientID}}"},
		TestBinary: filepath.Join(
			getDirName{{.HandlerID | title}}{{.TestName | title}}(),
			"{{$relativePathToRoot}}",
			"build", "services", "{{.TestServiceName}}",
			"main", "main.go",
		),
		ConfigFiles: []string{
			filepath.Join(
				getDirName{{.HandlerID | title}}{{.TestName | title}}(),
				"{{$relativePathToRoot}}",
				"config", "production.json",
			),
			filepath.Join(
				getDirName{{.HandlerID | title}}{{.TestName | title}}(),
				"{{$relativePathToRoot}}",
				"config", "{{.TestServiceName}}", "production.json",
			),
		},
	})
	if !assert.NoError(t, err, "got bootstrap err") {
		return
	}
	defer gateway.Close()

	{{range .ClientStubs}}
	fake{{.ClientMethod | title}} := func(w http.ResponseWriter, r *http.Request) {

		{{range $k, $v := .ClientReqHeaders -}}
		assert.Equal(
			t,
			"{{$v}}",
			r.Header.Get("{{$k}}"))
		{{end}}

		{{range $k, $v := .ClientResHeaders -}}
		w.Header().Set("{{$k}}", "{{$v}}")
		{{end}}
		w.WriteHeader({{$.Method.OKStatusCode.Code}})
		
		// TODO(zw): generate client response.
		if _, err := w.Write([]byte( `{{.ClientResponseString}}`)); err != nil {
			t.Fatal("can't write fake response")
		}
		counter++
	}

	gateway.HTTPBackends()["{{$clientID}}"].HandleFunc(
		"{{$clientMethod.HTTPMethod}}", "{{$clientMethod.HTTPPath}}", fake{{.ClientMethod | title}},
	)

	{{end -}}

	headers := map[string]string{}
	{{ if $headers -}}
	{{range $k, $v := .EndpointReqHeaders -}}
	headers["{{$k}}"] = "{{$v}}"
	{{end}}
	{{- end}}

	res, err := gateway.MakeRequest(
		"{{$.Method.HTTPMethod}}",
		"{{$.Method.HTTPPath}}",
		headers,
		bytes.NewReader([]byte(`{{.EndpointRequestString}}`)),
	)
	if !assert.NoError(t, err, "got http error") {
		return
	}

	assert.Equal(t, {{$.Method.OKStatusCode.Code}}, res.StatusCode)
	{{range $k, $v := .EndpointResHeaders -}}
	assert.Equal(
		t,
		"{{$v}}",
		res.Header.Get("{{$k}}"))	
	{{end}}
	assert.Equal(t, 1, counter)
}

{{end -}}
{{end -}}
