{{/* template to render gateway http endpoint code */ -}}
// Code generated by zanzibar
// @generated

package {{.PackageName}}

import (
	"context"
	"io/ioutil"
	"net/http"

	"github.com/pkg/errors"
	"github.com/uber-go/zap"
	"{{.GatewayPackageName}}/clients"
	zanzibar "github.com/uber/zanzibar/runtime"

	{{range $idx, $pkg := .IncludedPackages -}}
	{{$pkg.AliasName}} "{{$pkg.PackageName}}"
	{{end}}

	{{range $idx, $pkg := .Method.Downstream.IncludedPackages -}}
	{{$file := basePath $pkg.PackageName -}}
	{{$pkg.AliasName}} "{{$pkg.PackageName}}"
	{{end}}
)

{{with .Method -}}
{{- $clientPackage := .Downstream.PackageName -}}
{{- $clientName := title .DownstreamService -}}
{{- $clientMethod := .DownstreamMethod -}}
{{- $clientMethodRequestType := fullTypeName ($clientMethod).RequestType ($clientPackage) -}}
{{- $clientMethodResponseType := fullTypeName  ($clientMethod).ResponseType ($clientPackage) -}}
{{- $clientMethodName := title ($clientMethod).Name -}}

// Handle{{title .Name}}Request handles "{{.HTTPPath}}".
func Handle{{title .Name}}Request(
	ctx context.Context,
	req *zanzibar.ServerHTTPRequest,
	res *zanzibar.ServerHTTPResponse,
	clients *clients.Clients,
) {
	{{ if .Headers -}}
	if !req.CheckHeaders({{.Headers | printf "%#v" }}) {
		return
	}
	{{- end}}

	{{if ne .RequestType ""}}
	var body {{title .RequestType}}
	if ok := req.ReadAndUnmarshalBody(&body); !ok {
		return
	}
	clientRequest := convertTo{{title .Name}}ClientRequest(&body)
	{{end}}

	{{if and (eq $clientMethodRequestType "") (eq $clientMethodResponseType "")}}
	_, err := clients.{{$clientName}}.{{$clientMethodName}}(ctx, nil)
	{{else if eq $clientMethodRequestType ""}}
	clientRespBody, _, err := clients.{{$clientName}}.{{$clientMethodName}}(
		ctx, nil,
	)
	{{else if eq $clientMethodResponseType ""}}
	_, err := clients.{{$clientName}}.{{$clientMethodName}}(
		ctx, nil, clientRequest,
	)
	{{else}}
	clientRespBody, _, err := clients.{{$clientName}}.{{$clientMethodName}}(
		ctx, nil, clientRequest,
	)
	{{end}}
	if err != nil {
		req.Logger.Warn("Could not make client request",
			zap.String("error", err.Error()),
		)
		res.SendError(500, errors.Wrap(err, "could not make client request:"))
		return
	}

	{{if eq .ResponseType "" -}}
	res.WriteJSONBytes({{.OKStatusCode.Code}}, nil)
	{{- else -}}
	response := convert{{title .Name}}ClientResponse(clientRespBody)
	res.WriteJSON({{.OKStatusCode.Code}}, response)
	{{- end -}}
}

{{if and (ne .RequestType "") (ne $clientMethodRequestType "") -}}
func convertTo{{title .Name}}ClientRequest(body *{{title .RequestType}}) *{{$clientMethodRequestType}} {
	clientRequest := &{{$clientMethodRequestType}}{}

	{{ range $key, $value := .RequestFieldMap -}}
	{{ range $name, $type := $.Method.RequestTypeMap -}} {{if eq $name $key -}}
	clientRequest.{{title $key }} = {{ $type }}(body.{{title $value }})
	{{ end -}}
	{{ end -}}
	{{ end }}
	return clientRequest
}
{{end -}}


{{if and (ne .ResponseType "") (ne $clientMethodResponseType "") -}}
func convert{{title .Name}}ClientResponse(body *{{$clientMethodResponseType}}) *{{.ResponseType}} {
	// TODO: Add response fields mapping here.
	downstreamResponse := &{{.ResponseType}}{}
	return downstreamResponse
}
{{end -}}

{{end -}}
