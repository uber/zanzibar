{{/* template to render gateway http endpoint code */ -}}
{{- $instance := .Instance }}
package {{$instance.PackageInfo.PackageName}}

{{- $reqHeaderMap := .ReqHeaders }}
{{- $reqHeaderMapKeys := .ReqHeadersKeys }}
{{- $reqHeaderRequiredKeys := .ReqRequiredHeadersKeys }}
{{- $resHeaderMap := .ResHeaders }}
{{- $resHeaderMapKeys := .ResHeadersKeys }}
{{- $resHeaderRequiredKeys := .ResRequiredHeadersKeys }}
{{- $clientName := title .ClientName }}
{{- $serviceMethod := printf "%s%s" (title .Method.ThriftService) (title .Method.Name) }}
{{- $handlerName := printf "%sHandler" $serviceMethod }}
{{- $clientMethodName := title .ClientMethodName }}
{{- $endpointId := .Spec.EndpointID }}
{{- $handleId := .Spec.HandleID }}
{{- $middlewares := .Spec.Middlewares }}
{{- $workflowPkg := .WorkflowPkg }}
{{- $workflowInterface := printf "%sWorkflow" $serviceMethod }}
{{- $traceKey := .TraceKey }}

import (
	"context"
	"runtime/debug"
	"encoding/json"
	"io/ioutil"
	"net/http"

	"github.com/opentracing/opentracing-go"
	"github.com/pkg/errors"
	"go.uber.org/thriftrw/ptr"
	"go.uber.org/zap"
	"go.uber.org/zap/zapcore"
	module "{{$instance.PackageInfo.ModulePackagePath}}"
	zanzibar "github.com/uber/zanzibar/runtime"

	{{range $idx, $pkg := .IncludedPackages -}}
	{{$pkg.AliasName}} "{{$pkg.PackageName}}"
	{{end -}}

	{{if .Method.Downstream }}
	{{- range $idx, $pkg := .Method.Downstream.IncludedPackages -}}
	{{$file := basePath $pkg.PackageName -}}
	{{$pkg.AliasName}} "{{$pkg.PackageName}}"
	{{end}}
	{{- end}}

	{{- if len $middlewares | ne 0 }}
	{{- range $idx, $middleware := $middlewares }}
	"{{$middleware.ImportPath}}"
	{{- end}}
	{{- end}}


)

{{with .Method -}}

// {{$handlerName}} is the handler for "{{.HTTPPath}}"
type {{$handlerName}} struct {
	Dependencies  *module.Dependencies
	endpoint      *zanzibar.RouterEndpoint
}

// New{{$handlerName}} creates a handler
func New{{$handlerName}}(deps *module.Dependencies) *{{$handlerName}} {
	handler := &{{$handlerName}}{
		Dependencies: deps,
	}
	handler.endpoint = zanzibar.NewRouterEndpointContext(
		deps.Default.ContextExtractor, deps.Default.Logger, deps.Default.Scope, deps.Default.Tracer,
		"{{$endpointId}}", "{{$handleId}}",
		{{ if len $middlewares | ne 0 -}}
		zanzibar.NewStack([]zanzibar.MiddlewareHandle{
			{{range $idx, $middleware := $middlewares -}}
			deps.Middleware.{{$middleware.Name | pascal}}.NewMiddlewareHandle(
				{{$middleware.Name}}.Options{
				{{range $key, $value := $middleware.PrettyOptions -}}
					{{$key}} : {{$value}},
				{{end -}}
				},
			),
			{{end -}}
		}, handler.HandleRequest).Handle,
		{{- else -}}
		handler.HandleRequest,
		{{- end}}
	)

	return handler
}

// Register adds the http handler to the gateway's http router
func (h *{{$handlerName}}) Register(g *zanzibar.Gateway) error {
	return g.HTTPRouter.Register(
		"{{.HTTPMethod}}", "{{.HTTPPath}}",
		h.endpoint,
	)
}

// HandleRequest handles "{{.HTTPPath}}".
func (h *{{$handlerName}}) HandleRequest(
	ctx context.Context,
	req *zanzibar.ServerHTTPRequest,
	res *zanzibar.ServerHTTPResponse,
) {
	defer func() {
		if r := recover(); r != nil {
			stacktrace := string(debug.Stack())
			e := errors.Errorf("enpoint panic: %v, stacktrace: %v", r, stacktrace)
			h.Dependencies.Default.ContextLogger.Error(
				ctx,
				"endpoint panic",
				zap.Error(e),
				zap.String("stacktrace", stacktrace),
				zap.String("endpoint", h.endpoint.EndpointName))

			h.endpoint.ContextMetrics.EndpointMetrics.Panic.Inc(1)
			res.SendError(502, "Unexpected workflow panic, recovered at endpoint.", nil)
		}
	}()

	{{ if $reqHeaderRequiredKeys -}}
	if !req.CheckHeaders({{$reqHeaderRequiredKeys | printf "%#v" }}) {
		return
	}
	{{- end -}}

	{{if ne .RequestType ""}}
	var requestBody {{unref .RequestType}}

	{{- if ne .HTTPMethod "GET"}}
	if ok := req.ReadAndUnmarshalBody(&requestBody); !ok {
		return
	}
	{{end}}

	{{range $index, $line := .RequestParamGoStatements -}}
	{{$line}}
	{{end}}

	{{end}}

	{{range $index, $line := .ReqHeaderGoStatements -}}
	{{$line}}
	{{end}}

	{{range $index, $line := .ParseQueryParamGoStatements -}}
	{{$line}}
	{{end}}

	// log endpoint request to downstream services
	if ce := h.Dependencies.Default.ContextLogger.Check(zapcore.DebugLevel, "stub"); ce != nil {
		zfields := []zapcore.Field{
			zap.String("endpoint", h.endpoint.EndpointName),
		}
		{{- if ne .RequestType ""}}
		zfields = append(zfields, zap.String("body", fmt.Sprintf("%s", req.GetRawBody())))
		{{- end}}
		for _, k := range req.Header.Keys() {
			if val, ok := req.Header.Get(k); ok {
				zfields = append(zfields, zap.String(k, val))
			}
		}
		h.Dependencies.Default.ContextLogger.Debug(ctx, "endpoint request to downstream", zfields...)
	}

	w := {{$workflowPkg}}.New{{$workflowInterface}}(h.Dependencies)
	if span := req.GetSpan(); span != nil {
		ctx = opentracing.ContextWithSpan(ctx, span)
	}

	{{if and (eq .RequestType "") (eq .ResponseType "")}}
	cliRespHeaders, err := w.Handle(ctx, req.Header)
	{{else if eq .RequestType ""}}
	response, cliRespHeaders, err := w.Handle(ctx, req.Header)
	{{else if eq .ResponseType ""}}
	cliRespHeaders, err := w.Handle(ctx, req.Header, &requestBody)
	{{else}}
	response, cliRespHeaders, err := w.Handle(ctx, req.Header, &requestBody)

	// log downstream response to endpoint
	if ce := h.Dependencies.Default.ContextLogger.Check(zapcore.DebugLevel, "stub"); ce != nil {
		zfields := []zapcore.Field{
			zap.String("endpoint", h.endpoint.EndpointName),
		}
		{{- if ne .ResponseType ""}}
		if body, err := json.Marshal(response); err == nil {
			zfields = append(zfields, zap.String("body", fmt.Sprintf("%s", body)))
		}
		{{- end}}
		for _, k := range cliRespHeaders.Keys() {
			if val, ok := cliRespHeaders.Get(k); ok {
				zfields = append(zfields, zap.String(k, val))
			}
		}
		if traceKey, ok := req.Header.Get("{{$traceKey}}"); ok {
			zfields = append(zfields, zap.String("{{$traceKey}}", traceKey))
		}
		h.Dependencies.Default.ContextLogger.Debug(ctx, "downstream service response", zfields...)
	}

	{{end -}}
	if err != nil {
		{{- if eq (len .Exceptions) 0 -}}
		res.SendError(500, "Unexpected server error", err)
		return
		{{ else }}
		switch errValue := err.(type) {
		{{range $idx, $exception := .Exceptions}}
		case *{{$exception.Type}}:
			res.WriteJSON(
				{{$exception.StatusCode.Code}}, cliRespHeaders, errValue,
			)
			return
		{{end}}
		  default:
			 res.SendError(500, "Unexpected server error", err)
			 return
		}
		{{ end }}
	}

	{{if eq .ResponseType "" -}}
	res.WriteJSONBytes({{.OKStatusCode.Code}}, cliRespHeaders, nil)
	{{- else if eq .ResponseType "string" -}}
	bytes, err := json.Marshal(response)
	if err != nil {
		res.SendError(500, "Unexpected server error", errors.Wrap(err, "Unable to marshal resp json"))
		return
	}
	res.WriteJSONBytes({{.OKStatusCode.Code}}, cliRespHeaders, bytes)
	{{- else -}}
	res.WriteJSON({{.OKStatusCode.Code}}, cliRespHeaders, response)
	{{- end }}
}

{{end -}}
