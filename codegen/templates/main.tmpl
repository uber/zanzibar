{{- /* template to render gateway main.go */ -}}
// Code generated by zanzibar
// @generated

package main

import (
	"os"
	"path/filepath"
	"runtime"

	"github.com/uber-go/zap"
    "github.com/uber/zanzibar/runtime"
	{{range $idx, $pkg := .IncludedPackages -}}
	{{$pkg.AliasName}} "{{$pkg.PackageName}}"
	{{end}}
)

func getDirName() string {
	_, file, _, _ := runtime.Caller(0)
	return zanzibar.GetDirnameFromRuntimeCaller(file)
}

func getConfigDirName() string {
	return filepath.Join(
		getDirName(),
		"{{.RelativePathToAppConfig}}",
		"config",
	)
}

func getConfig() *zanzibar.StaticConfig {
	return zanzibar.NewStaticConfigOrDie([]string{
		filepath.Join(getDirName(), "zanzibar-defaults.json"),
		filepath.Join(getConfigDirName(), "production.json"),
		filepath.Join(os.Getenv("CONFIG_DIR"), "production.json"),
	}, nil)
}

func createGateway() (*zanzibar.Gateway, error) {
	config := getConfig()
	
	gateway, err := zanzibar.CreateGateway(config, nil)
	if err != nil {
		return nil, err
	}

	clients := clients.CreateClients(config, gateway)
	gateway.Clients = clients

	return gateway, nil
}

func logAndWait(server *zanzibar.Gateway) {
	server.Logger.Info("Started {{.GatewayName | pascal}}",
		zap.String("realAddr", server.RealAddr),
		zap.Object("config", server.InspectOrDie()),
	)

	// TODO: handle sigterm gracefully
	server.Wait()
	// TODO: emit metrics about startup.
	// TODO: setup and configure tracing/jeager.
}

func main() {
	server, err := createGateway()
	if err != nil {
		panic(err)
	}

	err = server.Bootstrap(endpoints.Register)
	if err != nil {
		panic(err)
	}
	logAndWait(server)
}
