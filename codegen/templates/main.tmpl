{{- /* template to render gateway main.go */ -}}
{{- $instance := . -}}

package main

import (
	"flag"
	"os"
	"os/signal"
	"path/filepath"
	"strings"
	"syscall"

	"github.com/pkg/errors"

	_ "go.uber.org/automaxprocs"
	"go.uber.org/fx"
	"go.uber.org/zap"

	"github.com/uber/zanzibar/config"
	zanzibar "github.com/uber/zanzibar/runtime"

	app "{{$instance.PackageInfo.PackageRoot}}"
	service "{{$instance.PackageInfo.GeneratedPackagePath}}"
	module "{{$instance.PackageInfo.ModulePackagePath}}"
)

var configFiles *string

// Module defines the Zanzibar application module for {{$instance.InstanceName | pascal}}
var Module = fx.Options(
	fx.Provide(New),
	fx.Invoke(run),
)

func opts() fx.Option {
	return fx.Options(
		append(
			[]fx.Option{Module},
			app.GetOverrideFxOptions()...,
		)...,
	)
}

// Params defines the dependencies of the New module.
type Params struct {
	fx.In
	Lifecycle fx.Lifecycle
}

// Result defines the objects that the New module provides
type Result struct {
	fx.Out
	Gateway *zanzibar.Gateway
}

func main() {
	fx.New(opts()).Run()
}

// run is the main entry point for {{$instance.InstanceName | pascal}}
func run(gateway *zanzibar.Gateway) {
	gateway.Logger.Info("Started {{$instance.InstanceName | pascal}}",
		zap.String("realHTTPAddr", gateway.RealHTTPAddr),
		zap.String("realTChannelAddr", gateway.RealTChannelAddr),
		zap.Any("config", gateway.InspectOrDie()),
	)
}

// New exports functionality similar to Module, but allows the caller to wrap
// or modify Result. Most users should use Module instead.
func New(p Params) (Result, error) {
	readFlags()
	gateway, err := createGateway()
	if err != nil {
		panic(errors.Wrap(err, "failed to create gateway server"))
	}

	p.Lifecycle.Append(fx.Hook{
		OnStart: func(ctx context.Context) error {
			err = gateway.Bootstrap()
			if err != nil {
				panic(errors.Wrap(err, "failed to bootstrap gateway server"))
			}
			return nil
		},
		OnStop: func(ctx context.Context) error {
			gateway.Logger.Info("fx OnStop() hook activated")
			gateway.WaitGroup.Add(1)
			gateway.Shutdown()
			gateway.WaitGroup.Done()
			return nil
		},
	})

	return Result{
		Gateway: gateway,
	}, nil
}

func createGateway() (*zanzibar.Gateway, error) {
	cfg := getConfig()

	if gateway, _, err := service.CreateGateway(cfg, app.AppOptions); err != nil {
		return nil, err
	} else {
		return gateway, nil
	}
}

func getConfig() *zanzibar.StaticConfig {
	var files []string

	if configFiles == nil {
		files = []string{}
	} else {
		files = strings.Split(*configFiles, ";")
	}

	return config.NewRuntimeConfigOrDie(files, nil)
}

func readFlags() {
	configFiles = flag.String(
		"config",
		"",
		"an ordered, semi-colon separated list of configuration files to use",
	)
	flag.Parse()
}
