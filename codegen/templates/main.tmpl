{{- /* template to render gateway main.go */ -}}
{{- $instance := . -}}

package main

import (
	"flag"
	"os"
	"path/filepath"
	"runtime"
	"strings"

	"go.uber.org/zap"
	"go.uber.org/fx"

	"github.com/uber/zanzibar/config"
	"github.com/uber/zanzibar/runtime"

	service "{{$instance.PackageInfo.GeneratedPackagePath}}"
	module "{{$instance.PackageInfo.ModulePackagePath}}"
)

var configFiles *string

func getDirName() string {
	_, file, _, _ := runtime.Caller(0)
	return zanzibar.GetDirnameFromRuntimeCaller(file)
}

func getConfig() *zanzibar.StaticConfig {
	var files []string

	if configFiles == nil {
		files = []string{}
	} else {
		files = strings.Split(*configFiles, ";")
	}

	return config.NewRuntimeConfigOrDie(files, nil)
}

func createGateway() (*zanzibar.Gateway, error) {
	config := getConfig()
	
	gateway, _, err := service.CreateGateway(config, nil)
	if err != nil {
		return nil, err
	}

	return gateway, nil
}

func registerEndpoints(g *zanzibar.Gateway, deps *module.Dependencies) error {
	{{- range $idx, $endpoint := (index $instance.ResolvedDependencies "endpoint") }}
	err{{$idx}} := deps.Endpoint.{{$endpoint.PackageInfo.QualifiedInstanceName}}.Register(g)
	if err{{$idx}} != nil {
		return err{{$idx}}
	}
	{{- end}}
	return nil
}

func logAndWait(server *zanzibar.Gateway) {
	server.Logger.Info("Started {{$instance.InstanceName | pascal}}",
		zap.String("realHTTPAddr", server.RealHTTPAddr),
		zap.String("realTChannelAddr", server.RealTChannelAddr),
		zap.Any("config", server.InspectOrDie()),
	)

	// TODO: handle sigterm gracefully
	server.Wait()
	// TODO: emit metrics about startup.
	// TODO: setup and configure tracing/jeager.
}

func readFlags() {
	configFiles = flag.String(
		"config",
		"",
		"an ordered, semi-colon separated list of configuration files to use",
	)
	flag.Parse()
}

func main() {
	app := fx.New(
		fx.Invoke(zanzibarMain),
	)
	app.Run()
}

func zanzibarMain() {
	readFlags()
	server, err := createGateway()
	if err != nil {
		panic(err)
	}

	err = server.Bootstrap()
	if err != nil {
		panic(err)
	}

	logAndWait(server)
}
