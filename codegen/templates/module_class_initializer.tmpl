{{- $className := index . 0 }}
{{- $instance := index . 1 }}

{{- $moduleInstances := (index $instance.RecursiveDependencies $className)}}
{{- $initializedDeps := printf "initialized%sDependencies" (title $className) }}

{{- if eq (len .) 3 }}
{{$initializedDeps}} := &{{index . 2}}.{{$className | title}}DependenciesNodes{}
{{- else }}
{{$initializedDeps}} := &{{$className | title}}DependenciesNodes{}
{{- end }}
tree.{{$className | title}} = {{$initializedDeps}}

{{- range $idx, $dependency := $moduleInstances}}
	{{- $pkgInfo := $dependency.PackageInfo }}
	{{- if eq $pkgInfo.IsCustomInitialisation true}}
	{{$initializedDeps}}.{{$pkgInfo.QualifiedInstanceName}} = {{$pkgInfo.ImportPackageAlias}}.{{$pkgInfo.ExportName}}(&{{$pkgInfo.ImportPackageAlias}}.Dependencies{
		Default: initializedDefaultDependencies,
		{{- range $className, $moduleInstances := $dependency.ResolvedDependencies}}
		{{$className | pascal}}: &{{$pkgInfo.ImportPackageAlias}}.{{$className | pascal}}Dependencies{
			{{- range $idy, $subDependency := $moduleInstances}}
			{{$subDependency.PackageInfo.QualifiedInstanceName}}: initialized{{$className | pascal}}Dependencies.{{$subDependency.PackageInfo.QualifiedInstanceName}},
			{{- end}}
		},
		{{- end}}
	})
	{{- else }}
	{{$initializedDeps}}.{{$pkgInfo.QualifiedInstanceName}} = {{$pkgInfo.ImportPackageAlias}}.{{$pkgInfo.ExportName}}(&{{$pkgInfo.ModulePackageAlias}}.Dependencies{
		Default: initializedDefaultDependencies,
		{{- range $className, $moduleInstances := $dependency.ResolvedDependencies}}
		{{$className | pascal}}: &{{$pkgInfo.ModulePackageAlias}}.{{$className | pascal}}Dependencies{
			{{- range $idy, $subDependency := $moduleInstances}}
			{{$subDependency.PackageInfo.QualifiedInstanceName}}: initialized{{$className | pascal}}Dependencies.{{$subDependency.PackageInfo.QualifiedInstanceName}},
			{{- end}}
		},
		{{- end}}
	})
	{{- end}}
{{- end}}
