{{- /* template to render edge gateway http client code */ -}}
// Code generated by zanzibar
// @generated

package {{.PackageName}}

import (
	"bytes"
	"context"
	"net/http"
	"strconv"

	"github.com/uber/zanzibar/runtime"
	{{range $idx, $pkg := .IncludedPackages -}}
	{{$pkg.AliasName}} "{{$pkg.PackageName}}"
	{{end}}
)

{{- $clientID := .ClientID -}}
{{range .Services}}
{{- $clientName := title .Name | printf "%sClient" }}
// {{$clientName}} is the http client for service {{.Name}}.
type {{$clientName}} struct {
	ClientID string
	HTTPClient   *zanzibar.HTTPClient
}

// NewClient returns a new http client for service {{.Name}}.
func NewClient(
	config *zanzibar.StaticConfig,
	gateway *zanzibar.Gateway,
) *{{$clientName}} {
	ip := config.MustGetString("clients.{{.Name | camel}}.ip")
	port := config.MustGetInt("clients.{{.Name | camel}}.port")

	baseURL := "http://" + ip + ":" + strconv.Itoa(int(port))
	return &{{$clientName}}{
		ClientID: "{{$clientID}}",
		HTTPClient: zanzibar.NewHTTPClient(gateway, baseURL),
	}
}

{{/*  ========================= Method =========================  */ -}}

{{range .Methods}}

// {{title .Name}} calls "{{.HTTPPath}}" endpoint.
{{- if and (eq .RequestType "") (eq .ResponseType "") }}
func (c *{{$clientName}}) {{title .Name}}(
	ctx context.Context,
	headers map[string]string,
) (map[string]string, error) {
{{else if eq .RequestType "" }}
func (c *{{$clientName}}) {{title .Name}}(
	ctx context.Context,
	headers map[string]string,
) (*{{.ResponseType}}, map[string]string, error) {
{{else if eq .ResponseType "" }}
func (c *{{$clientName}}) {{title .Name}}(
	ctx context.Context,
	headers map[string]string,
	r *{{.RequestType}},
) (map[string]string, error) {
{{else}}
func (c *{{$clientName}}) {{title .Name}}(
	ctx context.Context,
	headers map[string]string,
	r *{{.RequestType}},
) (*{{.ResponseType}}, map[string]string, error) {
{{end}}
	req := zanzibar.NewClientHTTPRequest(
		c.ClientID, "{{.Name}}", c.HTTPClient,
	)

	// Generate full URL.
	fullURL := c.HTTPClient.BaseURL
	{{- range $k, $segment := .PathSegments -}}
	{{- if eq $segment.Type "static" -}}+"/{{$segment.Text}}"
	{{- else -}}+"/"+string(r.{{$segment.BodyIdentifier | title}})
	{{- end -}}
	{{- end}}

	{{if ne .RequestType ""}}
	err := req.WriteJSON("{{.HTTPMethod}}", fullURL, headers, r)
	{{else}}
	err := req.WriteJSON("{{.HTTPMethod}}", fullURL, headers, nil)
	{{end}} {{- /* <if .RequestType ne ""> */ -}}
	if err != nil {
		return {{if eq .ResponseType ""}}nil, err{{else}}nil, nil, err{{end}}
	}
	res, err := req.Do(ctx)
	if err != nil {
		return {{if eq .ResponseType ""}}nil, err{{else}}nil, nil, err{{end}}
	}

	respHeaders := map[string]string{}
	for k := range res.Header {
		respHeaders[k] = res.Header.Get(k)
	}

	res.CheckOKResponse({{.OKStatusCode.Code}})

	{{if eq .ResponseType ""}}
	_, err = res.ReadAll()
	if err != nil {
		return respHeaders, err
	}
	return respHeaders, nil
	{{else}}
	var responseBody {{.ResponseType}}
	err = res.ReadAndUnmarshalBody(&responseBody)
	if err != nil {
		return nil, respHeaders, err
	}

	return &responseBody, respHeaders, nil
	{{end}}
}
{{end}} {{- /* <range .Methods> */ -}}
{{end}} {{- /* <range .Services> */ -}}
