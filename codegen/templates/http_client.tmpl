{{- /* template to render edge gateway http client code */ -}}
{{- /* TODO(zw): refactor it to two templates */ -}}
// Code generated by zanzibar
// @generated

package {{.PackageName}}

import (
	"bytes"
	"context"
	"net/http"
	"strconv"

	"github.com/uber/zanzibar/runtime"
	{{range $idx, $pkg := .IncludedPackages -}}
	"{{$pkg}}"
	{{end}}
)

{{- $clientID := .ClientID -}}
{{range .Services}}
{{- $clientName := title .Name | printf "%sClient" }}
// {{$clientName}} is the http client for service {{.Name}}.
type {{$clientName}} struct {
	ClientID string
	HTTPClient   *zanzibar.HTTPClient
}

// NewClient returns a new http client for service {{.Name}}.
func NewClient(
	config *zanzibar.StaticConfig,
	gateway *zanzibar.Gateway,
) *{{$clientName}} {
	ip := config.MustGetString("clients.{{.Name | camel}}.ip")
	port := config.MustGetInt("clients.{{.Name | camel}}.port")

	baseURL := "http://" + ip + ":" + strconv.Itoa(int(port))
	return &{{$clientName}}{
		ClientID: "{{$clientID}}",
		HTTPClient: zanzibar.NewHTTPClient(gateway, baseURL),
	}
}

{{/*  ========================= Method =========================  */ -}}

{{range .Methods}}

// {{title .Name}} calls "{{.HTTPPath}}" endpoint.
{{- if ne .RequestType ""}}
func (c *{{$clientName}}) {{title .Name}}(ctx context.Context, r *{{.RequestType}}) (*http.Response, error) {
{{else}}
func (c *{{$clientName}}) {{title .Name}}(ctx context.Context) (*http.Response, error) {
{{end}} {{- /* <if .ReqeustType ne ""> */ -}}
	req := zanzibar.NewClientHTTPRequest(
		c.ClientID, "{{.Name}}", c.HTTPClient,
	)

	// Generate full URL.
	fullURL := c.HTTPClient.BaseURL
	{{- range $k, $segment := .PathSegments -}}
	{{- if eq $segment.Type "static" -}}+"/{{$segment.Text}}"
	{{- else -}}+"/"+string(r.{{$segment.BodyIdentifier | title}})
	{{- end -}}
	{{- end}}

	{{if ne .RequestType ""}}
	err := req.WriteJSON("{{.HTTPMethod}}", fullURL, r)
	{{else}}
	err := req.WriteJSON("{{.HTTPMethod}}", fullURL, nil)
	{{end}} {{- /* <if .ReqeustType ne ""> */ -}}
	if err != nil {
		return nil, err
	}
	return req.Do(ctx)
}
{{end}} {{- /* <range .Methods> */ -}}
{{end}} {{- /* <range .Services> */ -}}
