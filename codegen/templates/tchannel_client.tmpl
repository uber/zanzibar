{{- /* template to render edge gateway tchannel client code */ -}}
{{- $instance := .Instance }}
package {{$instance.PackageInfo.PackageName}}

import (
	"context"
	"errors"
	"strconv"
	"time"

	"go.uber.org/zap"	
	"go.uber.org/zap/zapcore"

	"github.com/uber/zanzibar/runtime"
	"github.com/uber/tchannel-go"

	{{range $idx, $pkg := .IncludedPackages -}}
	{{$pkg.AliasName}} "{{$pkg.PackageName}}"
	{{end}}
)

{{$clientID := .ClientID -}}
{{$exposedMethods := .ExposedMethods -}}
{{- $clientName := printf "%sClient" (camel $clientID) }}
{{- $exportName := .ExportName}}
{{- $logDownstream := .LogDownstream}}
{{- $sidecarRouter := .SidecarRouter}}

// Client defines {{$clientID}} client interface.
type Client interface {
{{range $svc := .Services -}}
{{range .Methods}}
{{$serviceMethod := printf "%s::%s" $svc.Name .Name -}}
{{$methodName := (title (index $exposedMethods $serviceMethod)) -}}
{{- if $methodName -}}
	{{$methodName}}(
		ctx context.Context,
		reqHeaders map[string]string,
		{{if ne .RequestType "" -}}
		args {{.RequestType}},
		{{end -}}
	) ({{- if ne .ResponseType "" -}} {{.ResponseType}}, {{- end -}}map[string]string, error)
{{- end -}}
{{- end -}}
{{- end -}}
}

// NewClient returns a new TChannel client for service {{$clientID}}.
func {{$exportName}}(gateway *zanzibar.Gateway) Client {
	{{- /* this is the service discovery service name */}}
	serviceName := gateway.Config.MustGetString("clients.{{$clientID}}.serviceName")
	sc := gateway.Channel.GetSubChannel(serviceName, tchannel.Isolated)

	{{if $sidecarRouter -}}
	ip := gateway.Config.MustGetString("sidecarRouter.{{$sidecarRouter}}.tchannel.ip")
	port := gateway.Config.MustGetInt("sidecarRouter.{{$sidecarRouter}}.tchannel.port")
	{{else -}}
	ip := gateway.Config.MustGetString("clients.{{$clientID}}.ip")
	port := gateway.Config.MustGetInt("clients.{{$clientID}}.port")
	{{end -}}
	sc.Peers().Add(ip + ":" + strconv.Itoa(int(port)))

	{{/* TODO: (lu) maybe set these at per method level */ -}}
	timeout := time.Millisecond * time.Duration(
		gateway.Config.MustGetInt("clients.{{$clientID}}.timeout"),
	)
	timeoutPerAttempt := time.Millisecond * time.Duration(
		gateway.Config.MustGetInt("clients.{{$clientID}}.timeoutPerAttempt"),
	)

	client := zanzibar.NewTChannelClient(gateway.Channel,
		&zanzibar.TChannelClientOption{
			ServiceName:       serviceName,
			Timeout:           timeout,
			TimeoutPerAttempt: timeoutPerAttempt,
		},
	)

	return &{{$clientName}}{
		client: client,
		logger: gateway.Logger,
	}
}

// {{$clientName}} is the TChannel client for downstream service.
type {{$clientName}} struct {
	client        zanzibar.TChannelClient
	logger *zap.Logger
}

{{range $svc := .Services}}
{{range .Methods}}
{{$serviceMethod := printf "%s::%s" $svc.Name .Name -}}
{{$methodName := (title (index $exposedMethods $serviceMethod)) -}}
{{if $methodName -}}
	// {{$methodName}} is a client RPC call for method "{{$svc.Name}}::{{.Name}}"
	func (c *{{$clientName}}) {{$methodName}}(
		ctx context.Context,
		reqHeaders map[string]string,
		{{if ne .RequestType "" -}}
		args {{.RequestType}},
		{{end -}}
	) ({{- if ne .ResponseType "" -}} {{.ResponseType}}, {{- end -}}map[string]string, error) {
		var result {{.GenCodePkgName}}.{{title $svc.Name}}_{{title .Name}}_Result
		{{if .ResponseType -}}
		var resp {{.ResponseType}}
		{{end}}

		{{if eq .RequestType "" -}}
			args := &{{.GenCodePkgName}}.{{title $svc.Name}}_{{title .Name}}_Args{}
		{{end -}}

		{{if $logDownstream -}}
			var fields []zapcore.Field
			fields = append(fields, zap.String("Downstream-Client", "{{$clientName}}"))
			fields = append(fields, zap.String("Downstream-Method", "{{$methodName}}"))
			fields = append(fields, zap.Time("timestamp", time.Now().UTC()))
			for k, v := range reqHeaders {
				fields = append(fields, zap.String("Downstream-Request-Header-"+k, v))
			}
			fields = append(fields, zap.Any("Downstream-Request-Body", args))
		{{end -}}

		success, respHeaders, err := c.client.Call(
			ctx, "{{$svc.Name}}", "{{.Name}}", reqHeaders, args, &result,
		)

		{{if $logDownstream -}}
			for k, v := range respHeaders {
				fields = append(fields, zap.String("Downstream-Response-Header-"+k, v))
			}
			fields = append(fields, zap.Any("Downstream-Response-Body", result))
			fields = append(fields, zap.Time("timestamp-finished", time.Now().UTC()))
			c.logger.Info(
				"Finished a downstream TChannel request",
				fields...)
		{{end -}}

		if err == nil && !success {
			switch {
				{{range .Exceptions -}}
				case result.{{title .Name}} != nil:
					err = result.{{title .Name}}
				{{end -}}
				default:
					err = errors.New("{{$clientName}} received no result or unknown exception for {{title .Name}}")
			}
		}
		if err != nil {
		{{if eq .ResponseType "" -}}
			return nil, err
		{{else -}}
			return resp, nil, err
		{{end -}}
		}

		{{if eq .ResponseType "" -}}
			return respHeaders, err
		{{else -}}
			resp, err = {{.GenCodePkgName}}.{{title $svc.Name}}_{{title .Name}}_Helper.UnwrapResponse(&result)
			return resp, respHeaders, err
		{{end -}}
	}
{{end -}}
{{end -}}
{{end}}
