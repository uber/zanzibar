{{/* template to render gateway http endpoint tests */}}
{{- $instance := .Instance }}
package {{$instance.PackageInfo.PackageName}}

import (
	"bytes"
	"context"
	{{if .Method.DownstreamMethod.ResponseType -}}
	"encoding/json"
	{{end -}}
	"path/filepath"
	"testing"
	{{if ne .Method.ResponseType "" -}}
	"io/ioutil"
	{{end}}

	"github.com/stretchr/testify/assert"
	"github.com/uber/zanzibar/test/lib/test_gateway"

	{{range $idx, $pkg := .IncludedPackages -}}
	{{$pkg.AliasName}} "{{$pkg.PackageName}}"
	{{end}}
)

{{- $clientName := camel .ClientName -}}

{{with .Method -}}
{{- $responseType := .ResponseType -}}
{{- $clientPackage := .Downstream.PackageName -}}
{{- $thriftService := .DownstreamMethod.ThriftService -}}
{{- $clientMethod := .DownstreamMethod -}}
{{- $clientMethodName := $clientMethod.Name -}}
{{- $clientMethodRequestType := fullTypeName  ($clientMethod).RequestType ($clientPackage) -}}
{{- $clientMethodResponseType := fullTypeName  ($clientMethod).ResponseType ($clientPackage) -}}
{{- $headers := .ReqHeaders -}}
{{- $counter := printf "test%sCounter" $clientMethodName -}}

{{range $.TestStubs}}
func Test{{title .HandlerID}}{{title .TestName}}OKResponse(t *testing.T) {
	{{$counter}} := 0

	gateway, err := testGateway.CreateGateway(t, map[string]interface{}{
		{{/* the serviceName here is service discovery name, therefore is ok to be arbitrary */ -}}
		"clients.{{$clientName}}.serviceName": "{{$clientName}}Service",
	}, &testGateway.Options{
	KnownTChannelBackends: []string{"{{$clientName}}"},
		TestBinary: filepath.Join(
			getDirName(), "..", "..", "services", "{{.TestServiceName}}", "main", "main.go",
		),
	})
	if !assert.NoError(t, err, "got bootstrap err") {
		return
	}
	defer gateway.Close()

	{{range .ClientStubs}}
	{{$clientFunc := printf "fake%s" (title .ClientMethod) -}}
	{{$clientFunc}} := func(
		ctx context.Context,
		reqHeaders map[string]string,
		{{if $clientMethod.RequestType -}}
		args {{$clientMethodRequestType}},
		{{end -}}
	) ({{- if $clientMethod.ResponseType -}}{{$clientMethodResponseType}}, {{- end -}}map[string]string, error) {
		{{$counter}}++

		{{range $k, $v := .ClientReqHeaders -}}
		assert.Equal(
			t,
			"{{$v}}",
			reqHeaders["{{$k}}"])
		{{end -}}

		var resHeaders map[string]string
		{{if (len .ClientResHeaders) -}}
		resHeaders = map[string]string{}
		{{end -}}
		{{range $k, $v := .ClientResHeaders -}}
		resHeaders["{{$k}}"] = "{{$v}}"
		{{end}}

		{{if $clientMethod.ResponseType -}}
		var res {{unref $clientMethod.ResponseType}}
		err := json.Unmarshal([]byte(`{{.ClientResponseString}}`), &res)
		if err!= nil {
			t.Fatal("cant't unmarshal client response json to client response struct")
			return nil, resHeaders, err
		}
		return &res, resHeaders, nil
		{{else -}}
		return resHeaders, nil
		{{end -}}
	}

	gateway.TChannelBackends()["{{$clientName}}"].Register(
		"{{$thriftService}}",
		"{{$clientMethodName}}",
		{{$clientPackage}}.New{{$thriftService}}{{title $clientMethodName}}Handler({{$clientFunc}}),
	)
	{{end}}

	headers := map[string]string{}
	{{ if $headers -}}
	{{range $k, $v := .EndpointReqHeaders -}}
	headers["{{$k}}"] = "{{$v}}"
	{{end}}
	{{- end}}

	res, err := gateway.MakeRequest(
		"{{$.Method.HTTPMethod}}",
		"{{$.Method.HTTPPath}}",
		headers,
		bytes.NewReader([]byte(`{{.EndpointRequestString}}`)),
	)
	if !assert.NoError(t, err, "got http error") {
		return
	}

	{{if $responseType -}}
	defer func() { _ = res.Body.Close() }()
	data, err := ioutil.ReadAll(res.Body)
	if !assert.NoError(t, err, "failed to read response body") {
		return
	}
	{{end}}

	assert.Equal(t, 1, {{$counter}})
	assert.Equal(t, {{$.Method.OKStatusCode.Code}}, res.StatusCode)
	{{range $k, $v := .EndpointResHeaders -}}
	assert.Equal(
		t,
		"{{$v}}",
		res.Header.Get("{{$k}}"))
	{{end -}}
	{{if $responseType -}}
		assert.Equal(t, `{{.EndpointResponseString}}`, string(data))
	{{end -}}
}

{{end -}}
{{end -}}
