{{- /* template to render client mock code for custom client */ -}}
{{- $methods := .Methods}}
{{- $fixturePkg := .Fixture.ImportPath -}}
{{- $scenarios := .Fixture.Scenarios -}}
{{- $clientinterface := .ClientInterface}}

package clientmock

import (
	"github.com/golang/mock/gomock"
)

// Mock{{$clientinterface}}WithFixture is a mock of Client interface with preset fixture
type Mock{{$clientinterface}}WithFixture struct {
	*Mock{{$clientinterface}}
	fixture *ClientFixture

	{{range $method := $methods}}
	{{$methodName := $method.Name -}}
	{{$methodMockType := printf "%sMock" $methodName -}}
	{{camel $methodMockType}} *{{$methodMockType}}
	{{- end}}
}

// Call is a thin wrapper around gomock.Call for exposing the methods that do not mutate the fixture related information
// like Return().
type Call struct {
	call *gomock.Call
}

// MaxTimes marks a fixture as callable up to a maximum number of times.
func (c Call) MaxTimes(max int) {
	c.call.MaxTimes(max)
}

// MinTimes marks a fixture as must be called a minimum number of times.
func (c Call) MinTimes(max int) {
	c.call.MinTimes(max)
}

// New creates a new mock instance
func New(ctrl *gomock.Controller, fixture *ClientFixture) *Mock{{$clientinterface}}WithFixture {
	return &Mock{{$clientinterface}}WithFixture{
		Mock{{$clientinterface}}: NewMock{{$clientinterface}}(ctrl),
		fixture:    fixture,
	}
}

// EXPECT shadows the EXPECT method on the underlying mock client.
// It should not be called directly.
func (m *Mock{{$clientinterface}}WithFixture) EXPECT() {
	panic("should not call EXPECT directly.")
}


{{range $method := $methods}}
{{$methodName := $method.Name -}}
{{$methodMockType := printf "%sMock" $methodName -}}
{{$methodMockField := camel $methodMockType -}}
{{$methodScenarios := index $scenarios $methodName -}}
// {{$methodMockType}} mocks the {{$methodName}} method
type {{$methodMockType}} struct {
	scenarios  *{{$methodName}}Scenarios
	mockClient *Mock{{$clientinterface}}
}
{{$methodMockMethod := printf "Expect%s" $methodName -}}
// {{$methodMockMethod}} returns an object that allows the caller to choose expected scenario for {{$methodName}}
func (m *Mock{{$clientinterface}}WithFixture) {{$methodMockMethod}}() *{{$methodMockType}} {
	if m.{{$methodMockField}} == nil {
		m.{{$methodMockField}} = &{{$methodMockType}}{
			scenarios:  m.fixture.{{$methodName}},
			mockClient: m.Mock{{$clientinterface}},
		}
	}
	return m.{{$methodMockField}}
}

{{- range $scenario := $methodScenarios -}}
{{$scenarioMethod := pascal $scenario}}
// {{$scenarioMethod}} sets the expected scenario as defined in the concrete fixture package
// {{$fixturePkg}}
func (s *{{$methodMockType}}) {{$scenarioMethod}}() Call {
	f := s.scenarios.{{$scenarioMethod}}

	{{range $argName, $argType := $method.In}}
	var {{$argName}} interface{}
	{{$argName}} = f.{{title $argName}}
	if f.{{title $argName}}Any {
		{{$argName}} = gomock.Any()
	}
	{{- end}}
	{{- if $method.Variadic}}
	var {{$method.Variadic}} []interface{}
	if f.{{title $method.Variadic}} != nil {
		for _, v := range f.{{title $method.Variadic}} {
			{{$method.Variadic}} = append({{$method.Variadic}}, v)
		}
	} else if f.{{title $method.Variadic}}Any > 0 {
		for i := 0; i < f.{{title $method.Variadic}}Any; i++ {
			{{$method.Variadic}} = append({{$method.Variadic}}, gomock.Any())
		}
	}
	{{- end}}

	{{range $retName, $retType := $method.Out}}
	{{$retName}} := f.{{title $retName}}
	{{- end}}

	return Call{call: s.mockClient.EXPECT().{{$methodName}}({{$method.InString}}{{if $method.Variadic}}, {{$method.Variadic}}...{{end}}).Return({{$method.OutString}})}
}
{{- end -}}
{{- end -}}
