{{$instance := .Instance -}}
{{$espec := .EndpointSpec -}}
{{$clientsWithFixture := .ClientsWithFixture -}}
{{$serviceMethod := printf "%s%s" (title $espec.ThriftServiceName) (title $espec.ThriftMethodName) -}}
{{$workflowInterface := printf "%sWorkflow" $serviceMethod -}}
{{$leafWithFixture := .ClientsWithFixture -}}
{{$leafClass := firstIsClientOrEmpty $instance.DependencyOrder -}}
{{$mockType := printf "Mock%sNodes" (title $leafClass) -}}
{{$classPkg := "module" -}}

package mock{{lower (camel $instance.InstanceName)}}workflow

import (
	"testing"

	"github.com/golang/mock/gomock"
	"go.uber.org/zap"
	zanzibar "github.com/uber/zanzibar/runtime"

	{{range $classType, $moduleInstances := $instance.RecursiveDependencies -}}
	{{range $idx, $moduleInstance := $moduleInstances -}}
	{{if eq $classType $leafClass -}}
	{{$moduleInstance.PackageInfo.GeneratedPackageAlias}}mock "{{$moduleInstance.PackageInfo.GeneratedPackagePath}}/mock-client"
	{{if (index $leafWithFixture $moduleInstance.InstanceName) -}}
	fixture{{$moduleInstance.PackageInfo.ImportPackageAlias}} "{{index $leafWithFixture $moduleInstance.InstanceName}}"
	{{end -}}
	{{else -}}
	{{$moduleInstance.PackageInfo.ImportPackageAlias}} "{{$moduleInstance.PackageInfo.ImportPackagePath}}"
	{{$moduleInstance.PackageInfo.ModulePackageAlias}} "{{$moduleInstance.PackageInfo.ModulePackagePath}}"
	{{end -}}
	{{end -}}
	{{end -}}
	{{$instance.PackageInfo.PackageAlias}} "{{$instance.PackageInfo.PackagePath}}"
	module "{{$instance.PackageInfo.ModulePackagePath}}"
	workflow "{{$instance.PackageInfo.GeneratedPackagePath}}/workflow"
)

// New{{$workflowInterface}}Mock creates a workflow with mock clients
func New{{$workflowInterface}}Mock(t *testing.T) (workflow.{{$workflowInterface}}, *{{$mockType}}) {
	{{ if (len $instance.DependencyOrder) -}}
	ctrl := gomock.NewController(t)
	{{ else -}}
	{{camel $mockType}} := &{{$mockType}}{}
	{{ end }}

	initializedDefaultDependencies := &zanzibar.DefaultDependencies {
		Logger: zap.NewNop(),
	}
	initializedDefaultDependencies.ContextLogger = zanzibar.NewContextLogger(initializedDefaultDependencies.Logger)
	contextExtractors := &zanzibar.ContextExtractors{}
	initializedDefaultDependencies.ContextExtractor = contextExtractors.MakeContextExtractor()

	{{range $idx, $className := $instance.DependencyOrder}}
	{{- $moduleInstances := (index $instance.RecursiveDependencies $className)}}
	{{- $initializedDeps := printf "initialized%sDependencies" (title $className) }}
	{{$initializedDeps}} := &{{$className}}DependenciesNodes{}
	{{if eq $className $leafClass -}}
	{{camel $mockType}} := &{{$mockType}}{
		{{- range $idx, $dependency := $moduleInstances}}
		{{- $pkgInfo := $dependency.PackageInfo }}
		{{- if (index $leafWithFixture $dependency.InstanceName) }}
		{{$pkgInfo.QualifiedInstanceName}}: {{$pkgInfo.GeneratedPackageAlias}}mock.New(ctrl, fixture{{$pkgInfo.ImportPackageAlias}}.Fixture),
		{{- else }}
		{{$pkgInfo.QualifiedInstanceName}}: {{$pkgInfo.GeneratedPackageAlias}}mock.NewMock{{title $className}}(ctrl),
		{{- end }}
		{{- end }}
	}
	{{- range $idx, $dependency := $moduleInstances}}
	{{- $pkgInfo := $dependency.PackageInfo }}
	{{$initializedDeps}}.{{$pkgInfo.QualifiedInstanceName}} = {{camel $mockType}}.{{$pkgInfo.QualifiedInstanceName}}
	{{- end }}
	{{else -}}
	{{- range $idx, $dependency := $moduleInstances}}
	{{- $pkgInfo := $dependency.PackageInfo }}
	{{$initializedDeps}}.{{$pkgInfo.QualifiedInstanceName}} = {{$pkgInfo.ImportPackageAlias}}.{{$pkgInfo.ExportName}}(&{{$pkgInfo.ModulePackageAlias}}.Dependencies{
	Default: initializedDefaultDependencies,
	{{- range $className, $moduleInstances := $dependency.ResolvedDependencies}}
	{{$className | pascal}}: &{{$pkgInfo.ModulePackageAlias}}.{{$className | pascal}}Dependencies{
		{{- range $idy, $subDependency := $moduleInstances}}
		{{$subDependency.PackageInfo.QualifiedInstanceName}}: initialized{{$className | pascal}}Dependencies.{{$subDependency.PackageInfo.QualifiedInstanceName}},
		{{- end}}
	},
	{{- end}}
})
{{- end}}
	{{end}}
	{{end}}

	w := {{$instance.PackageInfo.PackageAlias}}.New{{$workflowInterface}}(
		&{{$classPkg}}.Dependencies{
			Default: initializedDefaultDependencies,
			{{- range $className, $moduleInstances := $instance.ResolvedDependencies}}
			{{$className | pascal}}: &{{$classPkg}}.{{$className | pascal}}Dependencies{
				{{- range $idy, $subDependency := $moduleInstances}}
				{{$subDependency.PackageInfo.QualifiedInstanceName}}: initialized{{$className | pascal}}Dependencies.{{$subDependency.PackageInfo.QualifiedInstanceName}},
				{{- end}}
			},
			{{- end}}
		},
	)

	return w, {{camel $mockType}}
}