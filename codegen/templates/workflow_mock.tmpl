{{$instance := .Instance -}}
{{$espec := .EndpointSpec -}}
{{$clientsWithFixture := .ClientsWithFixture -}}
{{$clientDeps := index $instance.RecursiveDependencies "client" -}}
{{$serviceMethod := printf "%s%s" (title $espec.ThriftServiceName) (title $espec.ThriftMethodName) -}}
{{$workflowInterface := printf "%sWorkflow" $serviceMethod -}}
package mock{{lower (camel $instance.InstanceName)}}workflow

import (
	"testing"

	"github.com/golang/mock/gomock"
	"go.uber.org/zap"

	{{range $idx, $moduleInstance := $clientDeps -}}
	{{$moduleInstance.PackageInfo.GeneratedPackageAlias}} "{{$moduleInstance.PackageInfo.GeneratedPackagePath}}/mock-client"
	{{if (index $clientsWithFixture $moduleInstance.InstanceName) -}}
	fixture{{$moduleInstance.PackageInfo.ImportPackageAlias}} "{{index $clientsWithFixture $moduleInstance.InstanceName}}"
	{{- end }}
	{{- end }}
	{{$instance.PackageInfo.PackageAlias}} "{{$instance.PackageInfo.PackagePath}}"
	module "{{$instance.PackageInfo.ModulePackagePath}}"
	workflow "{{$instance.PackageInfo.GeneratedPackagePath}}/workflow"
)

// New{{$workflowInterface}}Mock creates a workflow with mock clients
func New{{$workflowInterface}}Mock(t *testing.T) (workflow.{{$workflowInterface}}, *MockClients) {
	ctrl := gomock.NewController(t)
	mockClients := &MockClients{
		{{- range $idx, $moduleInstance := $clientDeps -}}
		{{- $pkgInfo := $moduleInstance.PackageInfo }}
		{{- if (index $clientsWithFixture $moduleInstance.InstanceName) }}
		{{$pkgInfo.QualifiedInstanceName}}: {{$pkgInfo.GeneratedPackageAlias}}.New(ctrl, fixture{{$pkgInfo.ImportPackageAlias}}.Fixture),
		{{- else }}
		{{$pkgInfo.QualifiedInstanceName}}: {{$pkgInfo.GeneratedPackageAlias}}.NewMockClient(ctrl),
		{{- end }}
		{{- end }}
	}

	mockClientDependencies := &module.ClientDependencies{
		{{- range $idx, $moduleInstance := $clientDeps -}}
		{{- $pkgInfo := $moduleInstance.PackageInfo }}
		{{$pkgInfo.QualifiedInstanceName}}: mockClients.{{$pkgInfo.QualifiedInstanceName}},
		{{- end }}
	}

	w := {{$instance.PackageInfo.PackageAlias}}.New{{$workflowInterface}}(
		&module.Dependencies{
			Default: &zanzibar.DefaultDependencies {
				Logger: zap.NewNop(),
				Scope:  nil,
				Tracer:  nil,
				Config: nil,
				Channel:nil,
			},
			{{range $classType, $moduleInstances := $instance.ResolvedDependencies -}}
			{{$classType | pascal}}: mockClientDependencies,
			{{end -}}
		},
	)

	return w, mockClients
}