{
	"endpointId": "bar",
	"endpointType": "http",
	"handleId": "normal",
	"thriftFile": "endpoints/bar/bar.thrift",
	"thriftFileSha": "{{placeholder}}",
	"thriftMethodName": "Bar::normal",
	"workflowType": "httpClient",
	"clientId": "bar",
	"clientMethod": "Normal",
	"testFixtures": {
		"successfulRequest": {
			"testName": "successfulRequest",
			"endpointId": "bar",
			"handleId": "normal",
			"endpointRequest": {
				"requestType": "http",
				"httpRequest": {
					"method": "POST",
					"body": {
						"bodyType": "json",
						"bodyJson": {
							"request": {
								"binaryField": "aGVsbG8=",
								"boolField": true,
								"enumField": "APPLE",
								"i64TestField": {
									"i64Field": 123,
									"longField": 1234,
									"timestamp": 1257894000000
								},
								"stringField": "foo",
								"timestamp": 123
							}
						}
					}
				}
			},
			"endpointReqHeaders": {},
			"endpointResponse": {
				"responseType": "http",
				"httpResponse": {
					"statusCode": 200
				}
			},
			"endpointResHeaders": {},
			"clientTestFixtures": {
				"bar::normal": {
					"clientId": "bar",
					"clientMethod": "normal",
					"clientRequest": {
						"requestType": "tchannel",
						"tchannelRequest": {
							"requestType": "tchannel",
							"tchannelRequest": {
								"request": {
									"binaryField": "aGVsbG8=",
									"boolField": true,
									"enumField": "APPLE",
									"i64TestField": {
										"i64Field": 123,
										"longField": 1234,
										"timestamp": 1257894000000
									},
									"stringField": "foo",
									"timestamp": 123
								}
							}
						}
					},
					"clientReqHeaders": {},
					"clientResponse": {
						"responseType": "tchannel",
						"tchannelResponse": {
							"binaryField": "d29ybGQ=",
							"intWithRange": 0,
							"intWithoutRange": 1,
							"mapIntWithRange": {},
							"mapIntWithoutRange": {},
							"stringField": "foo"
						}
					},
					"clientResHeaders": {}
				}
			},
			"testServiceName": "example-gateway"
		}
	},
	"middlewares": [
		{
			"name": "example",
			"options": {
				"Baz": [
					"foo",
					"bar"
				],
				"Foo": "test"
			}
		}
	],
	"reqHeaderMap": {},
	"resHeaderMap": {}
}
