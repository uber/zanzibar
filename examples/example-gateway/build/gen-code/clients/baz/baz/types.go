// Code generated by thriftrw v1.18.0. DO NOT EDIT.
// @generated

package baz

import (
	bytes "bytes"
	json "encoding/json"
	errors "errors"
	fmt "fmt"
	multierr "go.uber.org/multierr"
	wire "go.uber.org/thriftrw/wire"
	zapcore "go.uber.org/zap/zapcore"
	math "math"
	strconv "strconv"
	strings "strings"
)

type AuthErr struct {
	Message string `json:"message,required"`
}

// ToWire translates a AuthErr struct into a Thrift-level intermediate
// representation. This intermediate representation may be serialized
// into bytes using a ThriftRW protocol implementation.
//
// An error is returned if the struct or any of its fields failed to
// validate.
//
//   x, err := v.ToWire()
//   if err != nil {
//     return err
//   }
//
//   if err := binaryProtocol.Encode(x, writer); err != nil {
//     return err
//   }
func (v *AuthErr) ToWire() (wire.Value, error) {
	var (
		fields [1]wire.Field
		i      int = 0
		w      wire.Value
		err    error
	)

	w, err = wire.NewValueString(v.Message), error(nil)
	if err != nil {
		return w, err
	}
	fields[i] = wire.Field{ID: 1, Value: w}
	i++

	return wire.NewValueStruct(wire.Struct{Fields: fields[:i]}), nil
}

// FromWire deserializes a AuthErr struct from its Thrift-level
// representation. The Thrift-level representation may be obtained
// from a ThriftRW protocol implementation.
//
// An error is returned if we were unable to build a AuthErr struct
// from the provided intermediate representation.
//
//   x, err := binaryProtocol.Decode(reader, wire.TStruct)
//   if err != nil {
//     return nil, err
//   }
//
//   var v AuthErr
//   if err := v.FromWire(x); err != nil {
//     return nil, err
//   }
//   return &v, nil
func (v *AuthErr) FromWire(w wire.Value) error {
	var err error

	messageIsSet := false

	for _, field := range w.GetStruct().Fields {
		switch field.ID {
		case 1:
			if field.Value.Type() == wire.TBinary {
				v.Message, err = field.Value.GetString(), error(nil)
				if err != nil {
					return err
				}
				messageIsSet = true
			}
		}
	}

	if !messageIsSet {
		return errors.New("field Message of AuthErr is required")
	}

	return nil
}

// String returns a readable string representation of a AuthErr
// struct.
func (v *AuthErr) String() string {
	if v == nil {
		return "<nil>"
	}

	var fields [1]string
	i := 0
	fields[i] = fmt.Sprintf("Message: %v", v.Message)
	i++

	return fmt.Sprintf("AuthErr{%v}", strings.Join(fields[:i], ", "))
}

// Equals returns true if all the fields of this AuthErr match the
// provided AuthErr.
//
// This function performs a deep comparison.
func (v *AuthErr) Equals(rhs *AuthErr) bool {
	if v == nil {
		return rhs == nil
	} else if rhs == nil {
		return false
	}
	if !(v.Message == rhs.Message) {
		return false
	}

	return true
}

// MarshalLogObject implements zapcore.ObjectMarshaler, enabling
// fast logging of AuthErr.
func (v *AuthErr) MarshalLogObject(enc zapcore.ObjectEncoder) (err error) {
	if v == nil {
		return nil
	}
	enc.AddString("message", v.Message)
	return err
}

// GetMessage returns the value of Message if it is set or its
// zero value if it is unset.
func (v *AuthErr) GetMessage() (o string) {
	if v != nil {
		o = v.Message
	}
	return
}

func (v *AuthErr) Error() string {
	return v.String()
}

type BazRequest struct {
	B1 bool   `json:"b1,required"`
	S2 string `json:"s2,required"`
	I3 int32  `json:"i3,required"`
}

// ToWire translates a BazRequest struct into a Thrift-level intermediate
// representation. This intermediate representation may be serialized
// into bytes using a ThriftRW protocol implementation.
//
// An error is returned if the struct or any of its fields failed to
// validate.
//
//   x, err := v.ToWire()
//   if err != nil {
//     return err
//   }
//
//   if err := binaryProtocol.Encode(x, writer); err != nil {
//     return err
//   }
func (v *BazRequest) ToWire() (wire.Value, error) {
	var (
		fields [3]wire.Field
		i      int = 0
		w      wire.Value
		err    error
	)

	w, err = wire.NewValueBool(v.B1), error(nil)
	if err != nil {
		return w, err
	}
	fields[i] = wire.Field{ID: 1, Value: w}
	i++

	w, err = wire.NewValueString(v.S2), error(nil)
	if err != nil {
		return w, err
	}
	fields[i] = wire.Field{ID: 2, Value: w}
	i++

	w, err = wire.NewValueI32(v.I3), error(nil)
	if err != nil {
		return w, err
	}
	fields[i] = wire.Field{ID: 3, Value: w}
	i++

	return wire.NewValueStruct(wire.Struct{Fields: fields[:i]}), nil
}

// FromWire deserializes a BazRequest struct from its Thrift-level
// representation. The Thrift-level representation may be obtained
// from a ThriftRW protocol implementation.
//
// An error is returned if we were unable to build a BazRequest struct
// from the provided intermediate representation.
//
//   x, err := binaryProtocol.Decode(reader, wire.TStruct)
//   if err != nil {
//     return nil, err
//   }
//
//   var v BazRequest
//   if err := v.FromWire(x); err != nil {
//     return nil, err
//   }
//   return &v, nil
func (v *BazRequest) FromWire(w wire.Value) error {
	var err error

	b1IsSet := false
	s2IsSet := false
	i3IsSet := false

	for _, field := range w.GetStruct().Fields {
		switch field.ID {
		case 1:
			if field.Value.Type() == wire.TBool {
				v.B1, err = field.Value.GetBool(), error(nil)
				if err != nil {
					return err
				}
				b1IsSet = true
			}
		case 2:
			if field.Value.Type() == wire.TBinary {
				v.S2, err = field.Value.GetString(), error(nil)
				if err != nil {
					return err
				}
				s2IsSet = true
			}
		case 3:
			if field.Value.Type() == wire.TI32 {
				v.I3, err = field.Value.GetI32(), error(nil)
				if err != nil {
					return err
				}
				i3IsSet = true
			}
		}
	}

	if !b1IsSet {
		return errors.New("field B1 of BazRequest is required")
	}

	if !s2IsSet {
		return errors.New("field S2 of BazRequest is required")
	}

	if !i3IsSet {
		return errors.New("field I3 of BazRequest is required")
	}

	return nil
}

// String returns a readable string representation of a BazRequest
// struct.
func (v *BazRequest) String() string {
	if v == nil {
		return "<nil>"
	}

	var fields [3]string
	i := 0
	fields[i] = fmt.Sprintf("B1: %v", v.B1)
	i++
	fields[i] = fmt.Sprintf("S2: %v", v.S2)
	i++
	fields[i] = fmt.Sprintf("I3: %v", v.I3)
	i++

	return fmt.Sprintf("BazRequest{%v}", strings.Join(fields[:i], ", "))
}

// Equals returns true if all the fields of this BazRequest match the
// provided BazRequest.
//
// This function performs a deep comparison.
func (v *BazRequest) Equals(rhs *BazRequest) bool {
	if v == nil {
		return rhs == nil
	} else if rhs == nil {
		return false
	}
	if !(v.B1 == rhs.B1) {
		return false
	}
	if !(v.S2 == rhs.S2) {
		return false
	}
	if !(v.I3 == rhs.I3) {
		return false
	}

	return true
}

// MarshalLogObject implements zapcore.ObjectMarshaler, enabling
// fast logging of BazRequest.
func (v *BazRequest) MarshalLogObject(enc zapcore.ObjectEncoder) (err error) {
	if v == nil {
		return nil
	}
	enc.AddBool("b1", v.B1)
	enc.AddString("s2", v.S2)
	enc.AddInt32("i3", v.I3)
	return err
}

// GetB1 returns the value of B1 if it is set or its
// zero value if it is unset.
func (v *BazRequest) GetB1() (o bool) {
	if v != nil {
		o = v.B1
	}
	return
}

// GetS2 returns the value of S2 if it is set or its
// zero value if it is unset.
func (v *BazRequest) GetS2() (o string) {
	if v != nil {
		o = v.S2
	}
	return
}

// GetI3 returns the value of I3 if it is set or its
// zero value if it is unset.
func (v *BazRequest) GetI3() (o int32) {
	if v != nil {
		o = v.I3
	}
	return
}

type Fruit int32

const (
	FruitApple  Fruit = 0
	FruitBanana Fruit = 1
)

// Fruit_Values returns all recognized values of Fruit.
func Fruit_Values() []Fruit {
	return []Fruit{
		FruitApple,
		FruitBanana,
	}
}

// UnmarshalText tries to decode Fruit from a byte slice
// containing its name.
//
//   var v Fruit
//   err := v.UnmarshalText([]byte("APPLE"))
func (v *Fruit) UnmarshalText(value []byte) error {
	switch s := string(value); s {
	case "APPLE":
		*v = FruitApple
		return nil
	case "BANANA":
		*v = FruitBanana
		return nil
	default:
		val, err := strconv.ParseInt(s, 10, 32)
		if err != nil {
			return fmt.Errorf("unknown enum value %q for %q: %v", s, "Fruit", err)
		}
		*v = Fruit(val)
		return nil
	}
}

// MarshalText encodes Fruit to text.
//
// If the enum value is recognized, its name is returned. Otherwise,
// its integer value is returned.
//
// This implements the TextMarshaler interface.
func (v Fruit) MarshalText() ([]byte, error) {
	switch int32(v) {
	case 0:
		return []byte("APPLE"), nil
	case 1:
		return []byte("BANANA"), nil
	}
	return []byte(strconv.FormatInt(int64(v), 10)), nil
}

// MarshalLogObject implements zapcore.ObjectMarshaler, enabling
// fast logging of Fruit.
// Enums are logged as objects, where the value is logged with key "value", and
// if this value's name is known, the name is logged with key "name".
func (v Fruit) MarshalLogObject(enc zapcore.ObjectEncoder) error {
	enc.AddInt32("value", int32(v))
	switch int32(v) {
	case 0:
		enc.AddString("name", "APPLE")
	case 1:
		enc.AddString("name", "BANANA")
	}
	return nil
}

// Ptr returns a pointer to this enum value.
func (v Fruit) Ptr() *Fruit {
	return &v
}

// ToWire translates Fruit into a Thrift-level intermediate
// representation. This intermediate representation may be serialized
// into bytes using a ThriftRW protocol implementation.
//
// Enums are represented as 32-bit integers over the wire.
func (v Fruit) ToWire() (wire.Value, error) {
	return wire.NewValueI32(int32(v)), nil
}

// FromWire deserializes Fruit from its Thrift-level
// representation.
//
//   x, err := binaryProtocol.Decode(reader, wire.TI32)
//   if err != nil {
//     return Fruit(0), err
//   }
//
//   var v Fruit
//   if err := v.FromWire(x); err != nil {
//     return Fruit(0), err
//   }
//   return v, nil
func (v *Fruit) FromWire(w wire.Value) error {
	*v = (Fruit)(w.GetI32())
	return nil
}

// String returns a readable string representation of Fruit.
func (v Fruit) String() string {
	w := int32(v)
	switch w {
	case 0:
		return "APPLE"
	case 1:
		return "BANANA"
	}
	return fmt.Sprintf("Fruit(%d)", w)
}

// Equals returns true if this Fruit value matches the provided
// value.
func (v Fruit) Equals(rhs Fruit) bool {
	return v == rhs
}

// MarshalJSON serializes Fruit into JSON.
//
// If the enum value is recognized, its name is returned. Otherwise,
// its integer value is returned.
//
// This implements json.Marshaler.
func (v Fruit) MarshalJSON() ([]byte, error) {
	switch int32(v) {
	case 0:
		return ([]byte)("\"APPLE\""), nil
	case 1:
		return ([]byte)("\"BANANA\""), nil
	}
	return ([]byte)(strconv.FormatInt(int64(v), 10)), nil
}

// UnmarshalJSON attempts to decode Fruit from its JSON
// representation.
//
// This implementation supports both, numeric and string inputs. If a
// string is provided, it must be a known enum name.
//
// This implements json.Unmarshaler.
func (v *Fruit) UnmarshalJSON(text []byte) error {
	d := json.NewDecoder(bytes.NewReader(text))
	d.UseNumber()
	t, err := d.Token()
	if err != nil {
		return err
	}

	switch w := t.(type) {
	case json.Number:
		x, err := w.Int64()
		if err != nil {
			return err
		}
		if x > math.MaxInt32 {
			return fmt.Errorf("enum overflow from JSON %q for %q", text, "Fruit")
		}
		if x < math.MinInt32 {
			return fmt.Errorf("enum underflow from JSON %q for %q", text, "Fruit")
		}
		*v = (Fruit)(x)
		return nil
	case string:
		return v.UnmarshalText([]byte(w))
	default:
		return fmt.Errorf("invalid JSON value %q (%T) to unmarshal into %q", t, t, "Fruit")
	}
}

type GetProfileRequest struct {
	Target UUID `json:"target,required"`
}

// ToWire translates a GetProfileRequest struct into a Thrift-level intermediate
// representation. This intermediate representation may be serialized
// into bytes using a ThriftRW protocol implementation.
//
// An error is returned if the struct or any of its fields failed to
// validate.
//
//   x, err := v.ToWire()
//   if err != nil {
//     return err
//   }
//
//   if err := binaryProtocol.Encode(x, writer); err != nil {
//     return err
//   }
func (v *GetProfileRequest) ToWire() (wire.Value, error) {
	var (
		fields [1]wire.Field
		i      int = 0
		w      wire.Value
		err    error
	)

	w, err = v.Target.ToWire()
	if err != nil {
		return w, err
	}
	fields[i] = wire.Field{ID: 1, Value: w}
	i++

	return wire.NewValueStruct(wire.Struct{Fields: fields[:i]}), nil
}

func _UUID_Read(w wire.Value) (UUID, error) {
	var x UUID
	err := x.FromWire(w)
	return x, err
}

// FromWire deserializes a GetProfileRequest struct from its Thrift-level
// representation. The Thrift-level representation may be obtained
// from a ThriftRW protocol implementation.
//
// An error is returned if we were unable to build a GetProfileRequest struct
// from the provided intermediate representation.
//
//   x, err := binaryProtocol.Decode(reader, wire.TStruct)
//   if err != nil {
//     return nil, err
//   }
//
//   var v GetProfileRequest
//   if err := v.FromWire(x); err != nil {
//     return nil, err
//   }
//   return &v, nil
func (v *GetProfileRequest) FromWire(w wire.Value) error {
	var err error

	targetIsSet := false

	for _, field := range w.GetStruct().Fields {
		switch field.ID {
		case 1:
			if field.Value.Type() == wire.TBinary {
				v.Target, err = _UUID_Read(field.Value)
				if err != nil {
					return err
				}
				targetIsSet = true
			}
		}
	}

	if !targetIsSet {
		return errors.New("field Target of GetProfileRequest is required")
	}

	return nil
}

// String returns a readable string representation of a GetProfileRequest
// struct.
func (v *GetProfileRequest) String() string {
	if v == nil {
		return "<nil>"
	}

	var fields [1]string
	i := 0
	fields[i] = fmt.Sprintf("Target: %v", v.Target)
	i++

	return fmt.Sprintf("GetProfileRequest{%v}", strings.Join(fields[:i], ", "))
}

// Equals returns true if all the fields of this GetProfileRequest match the
// provided GetProfileRequest.
//
// This function performs a deep comparison.
func (v *GetProfileRequest) Equals(rhs *GetProfileRequest) bool {
	if v == nil {
		return rhs == nil
	} else if rhs == nil {
		return false
	}
	if !(v.Target == rhs.Target) {
		return false
	}

	return true
}

// MarshalLogObject implements zapcore.ObjectMarshaler, enabling
// fast logging of GetProfileRequest.
func (v *GetProfileRequest) MarshalLogObject(enc zapcore.ObjectEncoder) (err error) {
	if v == nil {
		return nil
	}
	enc.AddString("target", (string)(v.Target))
	return err
}

// GetTarget returns the value of Target if it is set or its
// zero value if it is unset.
func (v *GetProfileRequest) GetTarget() (o UUID) {
	if v != nil {
		o = v.Target
	}
	return
}

type GetProfileResponse struct {
	Payloads []*Profile `json:"payloads,required"`
}

type _List_Profile_ValueList []*Profile

func (v _List_Profile_ValueList) ForEach(f func(wire.Value) error) error {
	for i, x := range v {
		if x == nil {
			return fmt.Errorf("invalid [%v]: value is nil", i)
		}
		w, err := x.ToWire()
		if err != nil {
			return err
		}
		err = f(w)
		if err != nil {
			return err
		}
	}
	return nil
}

func (v _List_Profile_ValueList) Size() int {
	return len(v)
}

func (_List_Profile_ValueList) ValueType() wire.Type {
	return wire.TStruct
}

func (_List_Profile_ValueList) Close() {}

// ToWire translates a GetProfileResponse struct into a Thrift-level intermediate
// representation. This intermediate representation may be serialized
// into bytes using a ThriftRW protocol implementation.
//
// An error is returned if the struct or any of its fields failed to
// validate.
//
//   x, err := v.ToWire()
//   if err != nil {
//     return err
//   }
//
//   if err := binaryProtocol.Encode(x, writer); err != nil {
//     return err
//   }
func (v *GetProfileResponse) ToWire() (wire.Value, error) {
	var (
		fields [1]wire.Field
		i      int = 0
		w      wire.Value
		err    error
	)

	if v.Payloads == nil {
		return w, errors.New("field Payloads of GetProfileResponse is required")
	}
	w, err = wire.NewValueList(_List_Profile_ValueList(v.Payloads)), error(nil)
	if err != nil {
		return w, err
	}
	fields[i] = wire.Field{ID: 1, Value: w}
	i++

	return wire.NewValueStruct(wire.Struct{Fields: fields[:i]}), nil
}

func _Profile_Read(w wire.Value) (*Profile, error) {
	var v Profile
	err := v.FromWire(w)
	return &v, err
}

func _List_Profile_Read(l wire.ValueList) ([]*Profile, error) {
	if l.ValueType() != wire.TStruct {
		return nil, nil
	}

	o := make([]*Profile, 0, l.Size())
	err := l.ForEach(func(x wire.Value) error {
		i, err := _Profile_Read(x)
		if err != nil {
			return err
		}
		o = append(o, i)
		return nil
	})
	l.Close()
	return o, err
}

// FromWire deserializes a GetProfileResponse struct from its Thrift-level
// representation. The Thrift-level representation may be obtained
// from a ThriftRW protocol implementation.
//
// An error is returned if we were unable to build a GetProfileResponse struct
// from the provided intermediate representation.
//
//   x, err := binaryProtocol.Decode(reader, wire.TStruct)
//   if err != nil {
//     return nil, err
//   }
//
//   var v GetProfileResponse
//   if err := v.FromWire(x); err != nil {
//     return nil, err
//   }
//   return &v, nil
func (v *GetProfileResponse) FromWire(w wire.Value) error {
	var err error

	payloadsIsSet := false

	for _, field := range w.GetStruct().Fields {
		switch field.ID {
		case 1:
			if field.Value.Type() == wire.TList {
				v.Payloads, err = _List_Profile_Read(field.Value.GetList())
				if err != nil {
					return err
				}
				payloadsIsSet = true
			}
		}
	}

	if !payloadsIsSet {
		return errors.New("field Payloads of GetProfileResponse is required")
	}

	return nil
}

// String returns a readable string representation of a GetProfileResponse
// struct.
func (v *GetProfileResponse) String() string {
	if v == nil {
		return "<nil>"
	}

	var fields [1]string
	i := 0
	fields[i] = fmt.Sprintf("Payloads: %v", v.Payloads)
	i++

	return fmt.Sprintf("GetProfileResponse{%v}", strings.Join(fields[:i], ", "))
}

func _List_Profile_Equals(lhs, rhs []*Profile) bool {
	if len(lhs) != len(rhs) {
		return false
	}

	for i, lv := range lhs {
		rv := rhs[i]
		if !lv.Equals(rv) {
			return false
		}
	}

	return true
}

// Equals returns true if all the fields of this GetProfileResponse match the
// provided GetProfileResponse.
//
// This function performs a deep comparison.
func (v *GetProfileResponse) Equals(rhs *GetProfileResponse) bool {
	if v == nil {
		return rhs == nil
	} else if rhs == nil {
		return false
	}
	if !_List_Profile_Equals(v.Payloads, rhs.Payloads) {
		return false
	}

	return true
}

type _List_Profile_Zapper []*Profile

// MarshalLogArray implements zapcore.ArrayMarshaler, enabling
// fast logging of _List_Profile_Zapper.
func (l _List_Profile_Zapper) MarshalLogArray(enc zapcore.ArrayEncoder) (err error) {
	for _, v := range l {
		err = multierr.Append(err, enc.AppendObject(v))
	}
	return err
}

// MarshalLogObject implements zapcore.ObjectMarshaler, enabling
// fast logging of GetProfileResponse.
func (v *GetProfileResponse) MarshalLogObject(enc zapcore.ObjectEncoder) (err error) {
	if v == nil {
		return nil
	}
	err = multierr.Append(err, enc.AddArray("payloads", (_List_Profile_Zapper)(v.Payloads)))
	return err
}

// GetPayloads returns the value of Payloads if it is set or its
// zero value if it is unset.
func (v *GetProfileResponse) GetPayloads() (o []*Profile) {
	if v != nil {
		o = v.Payloads
	}
	return
}

// IsSetPayloads returns true if Payloads is not nil.
func (v *GetProfileResponse) IsSetPayloads() bool {
	return v != nil && v.Payloads != nil
}

type HeaderSchema struct {
}

// ToWire translates a HeaderSchema struct into a Thrift-level intermediate
// representation. This intermediate representation may be serialized
// into bytes using a ThriftRW protocol implementation.
//
// An error is returned if the struct or any of its fields failed to
// validate.
//
//   x, err := v.ToWire()
//   if err != nil {
//     return err
//   }
//
//   if err := binaryProtocol.Encode(x, writer); err != nil {
//     return err
//   }
func (v *HeaderSchema) ToWire() (wire.Value, error) {
	var (
		fields [0]wire.Field
		i      int = 0
	)

	return wire.NewValueStruct(wire.Struct{Fields: fields[:i]}), nil
}

// FromWire deserializes a HeaderSchema struct from its Thrift-level
// representation. The Thrift-level representation may be obtained
// from a ThriftRW protocol implementation.
//
// An error is returned if we were unable to build a HeaderSchema struct
// from the provided intermediate representation.
//
//   x, err := binaryProtocol.Decode(reader, wire.TStruct)
//   if err != nil {
//     return nil, err
//   }
//
//   var v HeaderSchema
//   if err := v.FromWire(x); err != nil {
//     return nil, err
//   }
//   return &v, nil
func (v *HeaderSchema) FromWire(w wire.Value) error {

	for _, field := range w.GetStruct().Fields {
		switch field.ID {
		}
	}

	return nil
}

// String returns a readable string representation of a HeaderSchema
// struct.
func (v *HeaderSchema) String() string {
	if v == nil {
		return "<nil>"
	}

	var fields [0]string
	i := 0

	return fmt.Sprintf("HeaderSchema{%v}", strings.Join(fields[:i], ", "))
}

// Equals returns true if all the fields of this HeaderSchema match the
// provided HeaderSchema.
//
// This function performs a deep comparison.
func (v *HeaderSchema) Equals(rhs *HeaderSchema) bool {
	if v == nil {
		return rhs == nil
	} else if rhs == nil {
		return false
	}

	return true
}

// MarshalLogObject implements zapcore.ObjectMarshaler, enabling
// fast logging of HeaderSchema.
func (v *HeaderSchema) MarshalLogObject(enc zapcore.ObjectEncoder) (err error) {
	if v == nil {
		return nil
	}
	return err
}

type OtherAuthErr struct {
	Message string `json:"message,required"`
}

// ToWire translates a OtherAuthErr struct into a Thrift-level intermediate
// representation. This intermediate representation may be serialized
// into bytes using a ThriftRW protocol implementation.
//
// An error is returned if the struct or any of its fields failed to
// validate.
//
//   x, err := v.ToWire()
//   if err != nil {
//     return err
//   }
//
//   if err := binaryProtocol.Encode(x, writer); err != nil {
//     return err
//   }
func (v *OtherAuthErr) ToWire() (wire.Value, error) {
	var (
		fields [1]wire.Field
		i      int = 0
		w      wire.Value
		err    error
	)

	w, err = wire.NewValueString(v.Message), error(nil)
	if err != nil {
		return w, err
	}
	fields[i] = wire.Field{ID: 1, Value: w}
	i++

	return wire.NewValueStruct(wire.Struct{Fields: fields[:i]}), nil
}

// FromWire deserializes a OtherAuthErr struct from its Thrift-level
// representation. The Thrift-level representation may be obtained
// from a ThriftRW protocol implementation.
//
// An error is returned if we were unable to build a OtherAuthErr struct
// from the provided intermediate representation.
//
//   x, err := binaryProtocol.Decode(reader, wire.TStruct)
//   if err != nil {
//     return nil, err
//   }
//
//   var v OtherAuthErr
//   if err := v.FromWire(x); err != nil {
//     return nil, err
//   }
//   return &v, nil
func (v *OtherAuthErr) FromWire(w wire.Value) error {
	var err error

	messageIsSet := false

	for _, field := range w.GetStruct().Fields {
		switch field.ID {
		case 1:
			if field.Value.Type() == wire.TBinary {
				v.Message, err = field.Value.GetString(), error(nil)
				if err != nil {
					return err
				}
				messageIsSet = true
			}
		}
	}

	if !messageIsSet {
		return errors.New("field Message of OtherAuthErr is required")
	}

	return nil
}

// String returns a readable string representation of a OtherAuthErr
// struct.
func (v *OtherAuthErr) String() string {
	if v == nil {
		return "<nil>"
	}

	var fields [1]string
	i := 0
	fields[i] = fmt.Sprintf("Message: %v", v.Message)
	i++

	return fmt.Sprintf("OtherAuthErr{%v}", strings.Join(fields[:i], ", "))
}

// Equals returns true if all the fields of this OtherAuthErr match the
// provided OtherAuthErr.
//
// This function performs a deep comparison.
func (v *OtherAuthErr) Equals(rhs *OtherAuthErr) bool {
	if v == nil {
		return rhs == nil
	} else if rhs == nil {
		return false
	}
	if !(v.Message == rhs.Message) {
		return false
	}

	return true
}

// MarshalLogObject implements zapcore.ObjectMarshaler, enabling
// fast logging of OtherAuthErr.
func (v *OtherAuthErr) MarshalLogObject(enc zapcore.ObjectEncoder) (err error) {
	if v == nil {
		return nil
	}
	enc.AddString("message", v.Message)
	return err
}

// GetMessage returns the value of Message if it is set or its
// zero value if it is unset.
func (v *OtherAuthErr) GetMessage() (o string) {
	if v != nil {
		o = v.Message
	}
	return
}

func (v *OtherAuthErr) Error() string {
	return v.String()
}

type Profile struct {
	Recur1 *Recur1 `json:"recur1,required"`
}

// ToWire translates a Profile struct into a Thrift-level intermediate
// representation. This intermediate representation may be serialized
// into bytes using a ThriftRW protocol implementation.
//
// An error is returned if the struct or any of its fields failed to
// validate.
//
//   x, err := v.ToWire()
//   if err != nil {
//     return err
//   }
//
//   if err := binaryProtocol.Encode(x, writer); err != nil {
//     return err
//   }
func (v *Profile) ToWire() (wire.Value, error) {
	var (
		fields [1]wire.Field
		i      int = 0
		w      wire.Value
		err    error
	)

	if v.Recur1 == nil {
		return w, errors.New("field Recur1 of Profile is required")
	}
	w, err = v.Recur1.ToWire()
	if err != nil {
		return w, err
	}
	fields[i] = wire.Field{ID: 1, Value: w}
	i++

	return wire.NewValueStruct(wire.Struct{Fields: fields[:i]}), nil
}

func _Recur1_Read(w wire.Value) (*Recur1, error) {
	var v Recur1
	err := v.FromWire(w)
	return &v, err
}

// FromWire deserializes a Profile struct from its Thrift-level
// representation. The Thrift-level representation may be obtained
// from a ThriftRW protocol implementation.
//
// An error is returned if we were unable to build a Profile struct
// from the provided intermediate representation.
//
//   x, err := binaryProtocol.Decode(reader, wire.TStruct)
//   if err != nil {
//     return nil, err
//   }
//
//   var v Profile
//   if err := v.FromWire(x); err != nil {
//     return nil, err
//   }
//   return &v, nil
func (v *Profile) FromWire(w wire.Value) error {
	var err error

	recur1IsSet := false

	for _, field := range w.GetStruct().Fields {
		switch field.ID {
		case 1:
			if field.Value.Type() == wire.TStruct {
				v.Recur1, err = _Recur1_Read(field.Value)
				if err != nil {
					return err
				}
				recur1IsSet = true
			}
		}
	}

	if !recur1IsSet {
		return errors.New("field Recur1 of Profile is required")
	}

	return nil
}

// String returns a readable string representation of a Profile
// struct.
func (v *Profile) String() string {
	if v == nil {
		return "<nil>"
	}

	var fields [1]string
	i := 0
	fields[i] = fmt.Sprintf("Recur1: %v", v.Recur1)
	i++

	return fmt.Sprintf("Profile{%v}", strings.Join(fields[:i], ", "))
}

// Equals returns true if all the fields of this Profile match the
// provided Profile.
//
// This function performs a deep comparison.
func (v *Profile) Equals(rhs *Profile) bool {
	if v == nil {
		return rhs == nil
	} else if rhs == nil {
		return false
	}
	if !v.Recur1.Equals(rhs.Recur1) {
		return false
	}

	return true
}

// MarshalLogObject implements zapcore.ObjectMarshaler, enabling
// fast logging of Profile.
func (v *Profile) MarshalLogObject(enc zapcore.ObjectEncoder) (err error) {
	if v == nil {
		return nil
	}
	err = multierr.Append(err, enc.AddObject("recur1", v.Recur1))
	return err
}

// GetRecur1 returns the value of Recur1 if it is set or its
// zero value if it is unset.
func (v *Profile) GetRecur1() (o *Recur1) {
	if v != nil {
		o = v.Recur1
	}
	return
}

// IsSetRecur1 returns true if Recur1 is not nil.
func (v *Profile) IsSetRecur1() bool {
	return v != nil && v.Recur1 != nil
}

type Recur1 struct {
	Field1 map[UUID]*Recur2 `json:"field1,required"`
}

type _Map_UUID_Recur2_MapItemList map[UUID]*Recur2

func (m _Map_UUID_Recur2_MapItemList) ForEach(f func(wire.MapItem) error) error {
	for k, v := range m {
		if v == nil {
			return fmt.Errorf("invalid [%v]: value is nil", k)
		}
		kw, err := k.ToWire()
		if err != nil {
			return err
		}

		vw, err := v.ToWire()
		if err != nil {
			return err
		}
		err = f(wire.MapItem{Key: kw, Value: vw})
		if err != nil {
			return err
		}
	}
	return nil
}

func (m _Map_UUID_Recur2_MapItemList) Size() int {
	return len(m)
}

func (_Map_UUID_Recur2_MapItemList) KeyType() wire.Type {
	return wire.TBinary
}

func (_Map_UUID_Recur2_MapItemList) ValueType() wire.Type {
	return wire.TStruct
}

func (_Map_UUID_Recur2_MapItemList) Close() {}

// ToWire translates a Recur1 struct into a Thrift-level intermediate
// representation. This intermediate representation may be serialized
// into bytes using a ThriftRW protocol implementation.
//
// An error is returned if the struct or any of its fields failed to
// validate.
//
//   x, err := v.ToWire()
//   if err != nil {
//     return err
//   }
//
//   if err := binaryProtocol.Encode(x, writer); err != nil {
//     return err
//   }
func (v *Recur1) ToWire() (wire.Value, error) {
	var (
		fields [1]wire.Field
		i      int = 0
		w      wire.Value
		err    error
	)

	if v.Field1 == nil {
		return w, errors.New("field Field1 of Recur1 is required")
	}
	w, err = wire.NewValueMap(_Map_UUID_Recur2_MapItemList(v.Field1)), error(nil)
	if err != nil {
		return w, err
	}
	fields[i] = wire.Field{ID: 1, Value: w}
	i++

	return wire.NewValueStruct(wire.Struct{Fields: fields[:i]}), nil
}

func _Recur2_Read(w wire.Value) (*Recur2, error) {
	var v Recur2
	err := v.FromWire(w)
	return &v, err
}

func _Map_UUID_Recur2_Read(m wire.MapItemList) (map[UUID]*Recur2, error) {
	if m.KeyType() != wire.TBinary {
		return nil, nil
	}

	if m.ValueType() != wire.TStruct {
		return nil, nil
	}

	o := make(map[UUID]*Recur2, m.Size())
	err := m.ForEach(func(x wire.MapItem) error {
		k, err := _UUID_Read(x.Key)
		if err != nil {
			return err
		}

		v, err := _Recur2_Read(x.Value)
		if err != nil {
			return err
		}

		o[k] = v
		return nil
	})
	m.Close()
	return o, err
}

// FromWire deserializes a Recur1 struct from its Thrift-level
// representation. The Thrift-level representation may be obtained
// from a ThriftRW protocol implementation.
//
// An error is returned if we were unable to build a Recur1 struct
// from the provided intermediate representation.
//
//   x, err := binaryProtocol.Decode(reader, wire.TStruct)
//   if err != nil {
//     return nil, err
//   }
//
//   var v Recur1
//   if err := v.FromWire(x); err != nil {
//     return nil, err
//   }
//   return &v, nil
func (v *Recur1) FromWire(w wire.Value) error {
	var err error

	field1IsSet := false

	for _, field := range w.GetStruct().Fields {
		switch field.ID {
		case 1:
			if field.Value.Type() == wire.TMap {
				v.Field1, err = _Map_UUID_Recur2_Read(field.Value.GetMap())
				if err != nil {
					return err
				}
				field1IsSet = true
			}
		}
	}

	if !field1IsSet {
		return errors.New("field Field1 of Recur1 is required")
	}

	return nil
}

// String returns a readable string representation of a Recur1
// struct.
func (v *Recur1) String() string {
	if v == nil {
		return "<nil>"
	}

	var fields [1]string
	i := 0
	fields[i] = fmt.Sprintf("Field1: %v", v.Field1)
	i++

	return fmt.Sprintf("Recur1{%v}", strings.Join(fields[:i], ", "))
}

func _Map_UUID_Recur2_Equals(lhs, rhs map[UUID]*Recur2) bool {
	if len(lhs) != len(rhs) {
		return false
	}

	for lk, lv := range lhs {
		rv, ok := rhs[lk]
		if !ok {
			return false
		}
		if !lv.Equals(rv) {
			return false
		}
	}
	return true
}

// Equals returns true if all the fields of this Recur1 match the
// provided Recur1.
//
// This function performs a deep comparison.
func (v *Recur1) Equals(rhs *Recur1) bool {
	if v == nil {
		return rhs == nil
	} else if rhs == nil {
		return false
	}
	if !_Map_UUID_Recur2_Equals(v.Field1, rhs.Field1) {
		return false
	}

	return true
}

type _Map_UUID_Recur2_Zapper map[UUID]*Recur2

// MarshalLogObject implements zapcore.ObjectMarshaler, enabling
// fast logging of _Map_UUID_Recur2_Zapper.
func (m _Map_UUID_Recur2_Zapper) MarshalLogObject(enc zapcore.ObjectEncoder) (err error) {
	for k, v := range m {
		err = multierr.Append(err, enc.AddObject((string)(k), v))
	}
	return err
}

// MarshalLogObject implements zapcore.ObjectMarshaler, enabling
// fast logging of Recur1.
func (v *Recur1) MarshalLogObject(enc zapcore.ObjectEncoder) (err error) {
	if v == nil {
		return nil
	}
	err = multierr.Append(err, enc.AddObject("field1", (_Map_UUID_Recur2_Zapper)(v.Field1)))
	return err
}

// GetField1 returns the value of Field1 if it is set or its
// zero value if it is unset.
func (v *Recur1) GetField1() (o map[UUID]*Recur2) {
	if v != nil {
		o = v.Field1
	}
	return
}

// IsSetField1 returns true if Field1 is not nil.
func (v *Recur1) IsSetField1() bool {
	return v != nil && v.Field1 != nil
}

type Recur2 struct {
	Field21 *Recur3 `json:"field21,required"`
	Field22 *Recur3 `json:"field22,omitempty"`
}

// ToWire translates a Recur2 struct into a Thrift-level intermediate
// representation. This intermediate representation may be serialized
// into bytes using a ThriftRW protocol implementation.
//
// An error is returned if the struct or any of its fields failed to
// validate.
//
//   x, err := v.ToWire()
//   if err != nil {
//     return err
//   }
//
//   if err := binaryProtocol.Encode(x, writer); err != nil {
//     return err
//   }
func (v *Recur2) ToWire() (wire.Value, error) {
	var (
		fields [2]wire.Field
		i      int = 0
		w      wire.Value
		err    error
	)

	if v.Field21 == nil {
		return w, errors.New("field Field21 of Recur2 is required")
	}
	w, err = v.Field21.ToWire()
	if err != nil {
		return w, err
	}
	fields[i] = wire.Field{ID: 1, Value: w}
	i++
	if v.Field22 != nil {
		w, err = v.Field22.ToWire()
		if err != nil {
			return w, err
		}
		fields[i] = wire.Field{ID: 2, Value: w}
		i++
	}

	return wire.NewValueStruct(wire.Struct{Fields: fields[:i]}), nil
}

func _Recur3_Read(w wire.Value) (*Recur3, error) {
	var v Recur3
	err := v.FromWire(w)
	return &v, err
}

// FromWire deserializes a Recur2 struct from its Thrift-level
// representation. The Thrift-level representation may be obtained
// from a ThriftRW protocol implementation.
//
// An error is returned if we were unable to build a Recur2 struct
// from the provided intermediate representation.
//
//   x, err := binaryProtocol.Decode(reader, wire.TStruct)
//   if err != nil {
//     return nil, err
//   }
//
//   var v Recur2
//   if err := v.FromWire(x); err != nil {
//     return nil, err
//   }
//   return &v, nil
func (v *Recur2) FromWire(w wire.Value) error {
	var err error

	field21IsSet := false

	for _, field := range w.GetStruct().Fields {
		switch field.ID {
		case 1:
			if field.Value.Type() == wire.TStruct {
				v.Field21, err = _Recur3_Read(field.Value)
				if err != nil {
					return err
				}
				field21IsSet = true
			}
		case 2:
			if field.Value.Type() == wire.TStruct {
				v.Field22, err = _Recur3_Read(field.Value)
				if err != nil {
					return err
				}

			}
		}
	}

	if !field21IsSet {
		return errors.New("field Field21 of Recur2 is required")
	}

	return nil
}

// String returns a readable string representation of a Recur2
// struct.
func (v *Recur2) String() string {
	if v == nil {
		return "<nil>"
	}

	var fields [2]string
	i := 0
	fields[i] = fmt.Sprintf("Field21: %v", v.Field21)
	i++
	if v.Field22 != nil {
		fields[i] = fmt.Sprintf("Field22: %v", v.Field22)
		i++
	}

	return fmt.Sprintf("Recur2{%v}", strings.Join(fields[:i], ", "))
}

// Equals returns true if all the fields of this Recur2 match the
// provided Recur2.
//
// This function performs a deep comparison.
func (v *Recur2) Equals(rhs *Recur2) bool {
	if v == nil {
		return rhs == nil
	} else if rhs == nil {
		return false
	}
	if !v.Field21.Equals(rhs.Field21) {
		return false
	}
	if !((v.Field22 == nil && rhs.Field22 == nil) || (v.Field22 != nil && rhs.Field22 != nil && v.Field22.Equals(rhs.Field22))) {
		return false
	}

	return true
}

// MarshalLogObject implements zapcore.ObjectMarshaler, enabling
// fast logging of Recur2.
func (v *Recur2) MarshalLogObject(enc zapcore.ObjectEncoder) (err error) {
	if v == nil {
		return nil
	}
	err = multierr.Append(err, enc.AddObject("field21", v.Field21))
	if v.Field22 != nil {
		err = multierr.Append(err, enc.AddObject("field22", v.Field22))
	}
	return err
}

// GetField21 returns the value of Field21 if it is set or its
// zero value if it is unset.
func (v *Recur2) GetField21() (o *Recur3) {
	if v != nil {
		o = v.Field21
	}
	return
}

// IsSetField21 returns true if Field21 is not nil.
func (v *Recur2) IsSetField21() bool {
	return v != nil && v.Field21 != nil
}

// GetField22 returns the value of Field22 if it is set or its
// zero value if it is unset.
func (v *Recur2) GetField22() (o *Recur3) {
	if v != nil && v.Field22 != nil {
		return v.Field22
	}

	return
}

// IsSetField22 returns true if Field22 is not nil.
func (v *Recur2) IsSetField22() bool {
	return v != nil && v.Field22 != nil
}

type Recur3 struct {
	Field31 UUID `json:"field31,required"`
}

// ToWire translates a Recur3 struct into a Thrift-level intermediate
// representation. This intermediate representation may be serialized
// into bytes using a ThriftRW protocol implementation.
//
// An error is returned if the struct or any of its fields failed to
// validate.
//
//   x, err := v.ToWire()
//   if err != nil {
//     return err
//   }
//
//   if err := binaryProtocol.Encode(x, writer); err != nil {
//     return err
//   }
func (v *Recur3) ToWire() (wire.Value, error) {
	var (
		fields [1]wire.Field
		i      int = 0
		w      wire.Value
		err    error
	)

	w, err = v.Field31.ToWire()
	if err != nil {
		return w, err
	}
	fields[i] = wire.Field{ID: 1, Value: w}
	i++

	return wire.NewValueStruct(wire.Struct{Fields: fields[:i]}), nil
}

// FromWire deserializes a Recur3 struct from its Thrift-level
// representation. The Thrift-level representation may be obtained
// from a ThriftRW protocol implementation.
//
// An error is returned if we were unable to build a Recur3 struct
// from the provided intermediate representation.
//
//   x, err := binaryProtocol.Decode(reader, wire.TStruct)
//   if err != nil {
//     return nil, err
//   }
//
//   var v Recur3
//   if err := v.FromWire(x); err != nil {
//     return nil, err
//   }
//   return &v, nil
func (v *Recur3) FromWire(w wire.Value) error {
	var err error

	field31IsSet := false

	for _, field := range w.GetStruct().Fields {
		switch field.ID {
		case 1:
			if field.Value.Type() == wire.TBinary {
				v.Field31, err = _UUID_Read(field.Value)
				if err != nil {
					return err
				}
				field31IsSet = true
			}
		}
	}

	if !field31IsSet {
		return errors.New("field Field31 of Recur3 is required")
	}

	return nil
}

// String returns a readable string representation of a Recur3
// struct.
func (v *Recur3) String() string {
	if v == nil {
		return "<nil>"
	}

	var fields [1]string
	i := 0
	fields[i] = fmt.Sprintf("Field31: %v", v.Field31)
	i++

	return fmt.Sprintf("Recur3{%v}", strings.Join(fields[:i], ", "))
}

// Equals returns true if all the fields of this Recur3 match the
// provided Recur3.
//
// This function performs a deep comparison.
func (v *Recur3) Equals(rhs *Recur3) bool {
	if v == nil {
		return rhs == nil
	} else if rhs == nil {
		return false
	}
	if !(v.Field31 == rhs.Field31) {
		return false
	}

	return true
}

// MarshalLogObject implements zapcore.ObjectMarshaler, enabling
// fast logging of Recur3.
func (v *Recur3) MarshalLogObject(enc zapcore.ObjectEncoder) (err error) {
	if v == nil {
		return nil
	}
	enc.AddString("field31", (string)(v.Field31))
	return err
}

// GetField31 returns the value of Field31 if it is set or its
// zero value if it is unset.
func (v *Recur3) GetField31() (o UUID) {
	if v != nil {
		o = v.Field31
	}
	return
}

type UUID string

// UUIDPtr returns a pointer to a UUID
func (v UUID) Ptr() *UUID {
	return &v
}

// ToWire translates UUID into a Thrift-level intermediate
// representation. This intermediate representation may be serialized
// into bytes using a ThriftRW protocol implementation.
func (v UUID) ToWire() (wire.Value, error) {
	x := (string)(v)
	return wire.NewValueString(x), error(nil)
}

// String returns a readable string representation of UUID.
func (v UUID) String() string {
	x := (string)(v)
	return fmt.Sprint(x)
}

// FromWire deserializes UUID from its Thrift-level
// representation. The Thrift-level representation may be obtained
// from a ThriftRW protocol implementation.
func (v *UUID) FromWire(w wire.Value) error {
	x, err := w.GetString(), error(nil)
	*v = (UUID)(x)
	return err
}

// Equals returns true if this UUID is equal to the provided
// UUID.
func (lhs UUID) Equals(rhs UUID) bool {
	return ((string)(lhs) == (string)(rhs))
}

type TransHeaderType struct {
	B1 bool     `json:"b1,required"`
	I1 *int32   `json:"i1,omitempty"`
	I2 int64    `json:"i2,required"`
	F3 *float64 `json:"f3,omitempty"`
	U4 UUID     `json:"u4,required"`
	U5 *UUID    `json:"u5,omitempty"`
	S6 string   `json:"s6,required"`
}

// ToWire translates a TransHeaderType struct into a Thrift-level intermediate
// representation. This intermediate representation may be serialized
// into bytes using a ThriftRW protocol implementation.
//
// An error is returned if the struct or any of its fields failed to
// validate.
//
//   x, err := v.ToWire()
//   if err != nil {
//     return err
//   }
//
//   if err := binaryProtocol.Encode(x, writer); err != nil {
//     return err
//   }
func (v *TransHeaderType) ToWire() (wire.Value, error) {
	var (
		fields [7]wire.Field
		i      int = 0
		w      wire.Value
		err    error
	)

	w, err = wire.NewValueBool(v.B1), error(nil)
	if err != nil {
		return w, err
	}
	fields[i] = wire.Field{ID: 1, Value: w}
	i++
	if v.I1 != nil {
		w, err = wire.NewValueI32(*(v.I1)), error(nil)
		if err != nil {
			return w, err
		}
		fields[i] = wire.Field{ID: 2, Value: w}
		i++
	}

	w, err = wire.NewValueI64(v.I2), error(nil)
	if err != nil {
		return w, err
	}
	fields[i] = wire.Field{ID: 3, Value: w}
	i++
	if v.F3 != nil {
		w, err = wire.NewValueDouble(*(v.F3)), error(nil)
		if err != nil {
			return w, err
		}
		fields[i] = wire.Field{ID: 4, Value: w}
		i++
	}

	w, err = v.U4.ToWire()
	if err != nil {
		return w, err
	}
	fields[i] = wire.Field{ID: 5, Value: w}
	i++
	if v.U5 != nil {
		w, err = v.U5.ToWire()
		if err != nil {
			return w, err
		}
		fields[i] = wire.Field{ID: 6, Value: w}
		i++
	}

	w, err = wire.NewValueString(v.S6), error(nil)
	if err != nil {
		return w, err
	}
	fields[i] = wire.Field{ID: 7, Value: w}
	i++

	return wire.NewValueStruct(wire.Struct{Fields: fields[:i]}), nil
}

// FromWire deserializes a TransHeaderType struct from its Thrift-level
// representation. The Thrift-level representation may be obtained
// from a ThriftRW protocol implementation.
//
// An error is returned if we were unable to build a TransHeaderType struct
// from the provided intermediate representation.
//
//   x, err := binaryProtocol.Decode(reader, wire.TStruct)
//   if err != nil {
//     return nil, err
//   }
//
//   var v TransHeaderType
//   if err := v.FromWire(x); err != nil {
//     return nil, err
//   }
//   return &v, nil
func (v *TransHeaderType) FromWire(w wire.Value) error {
	var err error

	b1IsSet := false

	i2IsSet := false

	u4IsSet := false

	s6IsSet := false

	for _, field := range w.GetStruct().Fields {
		switch field.ID {
		case 1:
			if field.Value.Type() == wire.TBool {
				v.B1, err = field.Value.GetBool(), error(nil)
				if err != nil {
					return err
				}
				b1IsSet = true
			}
		case 2:
			if field.Value.Type() == wire.TI32 {
				var x int32
				x, err = field.Value.GetI32(), error(nil)
				v.I1 = &x
				if err != nil {
					return err
				}

			}
		case 3:
			if field.Value.Type() == wire.TI64 {
				v.I2, err = field.Value.GetI64(), error(nil)
				if err != nil {
					return err
				}
				i2IsSet = true
			}
		case 4:
			if field.Value.Type() == wire.TDouble {
				var x float64
				x, err = field.Value.GetDouble(), error(nil)
				v.F3 = &x
				if err != nil {
					return err
				}

			}
		case 5:
			if field.Value.Type() == wire.TBinary {
				v.U4, err = _UUID_Read(field.Value)
				if err != nil {
					return err
				}
				u4IsSet = true
			}
		case 6:
			if field.Value.Type() == wire.TBinary {
				var x UUID
				x, err = _UUID_Read(field.Value)
				v.U5 = &x
				if err != nil {
					return err
				}

			}
		case 7:
			if field.Value.Type() == wire.TBinary {
				v.S6, err = field.Value.GetString(), error(nil)
				if err != nil {
					return err
				}
				s6IsSet = true
			}
		}
	}

	if !b1IsSet {
		return errors.New("field B1 of TransHeaderType is required")
	}

	if !i2IsSet {
		return errors.New("field I2 of TransHeaderType is required")
	}

	if !u4IsSet {
		return errors.New("field U4 of TransHeaderType is required")
	}

	if !s6IsSet {
		return errors.New("field S6 of TransHeaderType is required")
	}

	return nil
}

// String returns a readable string representation of a TransHeaderType
// struct.
func (v *TransHeaderType) String() string {
	if v == nil {
		return "<nil>"
	}

	var fields [7]string
	i := 0
	fields[i] = fmt.Sprintf("B1: %v", v.B1)
	i++
	if v.I1 != nil {
		fields[i] = fmt.Sprintf("I1: %v", *(v.I1))
		i++
	}
	fields[i] = fmt.Sprintf("I2: %v", v.I2)
	i++
	if v.F3 != nil {
		fields[i] = fmt.Sprintf("F3: %v", *(v.F3))
		i++
	}
	fields[i] = fmt.Sprintf("U4: %v", v.U4)
	i++
	if v.U5 != nil {
		fields[i] = fmt.Sprintf("U5: %v", *(v.U5))
		i++
	}
	fields[i] = fmt.Sprintf("S6: %v", v.S6)
	i++

	return fmt.Sprintf("TransHeaderType{%v}", strings.Join(fields[:i], ", "))
}

func _I32_EqualsPtr(lhs, rhs *int32) bool {
	if lhs != nil && rhs != nil {

		x := *lhs
		y := *rhs
		return (x == y)
	}
	return lhs == nil && rhs == nil
}

func _Double_EqualsPtr(lhs, rhs *float64) bool {
	if lhs != nil && rhs != nil {

		x := *lhs
		y := *rhs
		return (x == y)
	}
	return lhs == nil && rhs == nil
}

func _UUID_EqualsPtr(lhs, rhs *UUID) bool {
	if lhs != nil && rhs != nil {

		x := *lhs
		y := *rhs
		return (x == y)
	}
	return lhs == nil && rhs == nil
}

// Equals returns true if all the fields of this TransHeaderType match the
// provided TransHeaderType.
//
// This function performs a deep comparison.
func (v *TransHeaderType) Equals(rhs *TransHeaderType) bool {
	if v == nil {
		return rhs == nil
	} else if rhs == nil {
		return false
	}
	if !(v.B1 == rhs.B1) {
		return false
	}
	if !_I32_EqualsPtr(v.I1, rhs.I1) {
		return false
	}
	if !(v.I2 == rhs.I2) {
		return false
	}
	if !_Double_EqualsPtr(v.F3, rhs.F3) {
		return false
	}
	if !(v.U4 == rhs.U4) {
		return false
	}
	if !_UUID_EqualsPtr(v.U5, rhs.U5) {
		return false
	}
	if !(v.S6 == rhs.S6) {
		return false
	}

	return true
}

// MarshalLogObject implements zapcore.ObjectMarshaler, enabling
// fast logging of TransHeaderType.
func (v *TransHeaderType) MarshalLogObject(enc zapcore.ObjectEncoder) (err error) {
	if v == nil {
		return nil
	}
	enc.AddBool("b1", v.B1)
	if v.I1 != nil {
		enc.AddInt32("i1", *v.I1)
	}
	enc.AddInt64("i2", v.I2)
	if v.F3 != nil {
		enc.AddFloat64("f3", *v.F3)
	}
	enc.AddString("u4", (string)(v.U4))
	if v.U5 != nil {
		enc.AddString("u5", (string)(*v.U5))
	}
	enc.AddString("s6", v.S6)
	return err
}

// GetB1 returns the value of B1 if it is set or its
// zero value if it is unset.
func (v *TransHeaderType) GetB1() (o bool) {
	if v != nil {
		o = v.B1
	}
	return
}

// GetI1 returns the value of I1 if it is set or its
// zero value if it is unset.
func (v *TransHeaderType) GetI1() (o int32) {
	if v != nil && v.I1 != nil {
		return *v.I1
	}

	return
}

// IsSetI1 returns true if I1 is not nil.
func (v *TransHeaderType) IsSetI1() bool {
	return v != nil && v.I1 != nil
}

// GetI2 returns the value of I2 if it is set or its
// zero value if it is unset.
func (v *TransHeaderType) GetI2() (o int64) {
	if v != nil {
		o = v.I2
	}
	return
}

// GetF3 returns the value of F3 if it is set or its
// zero value if it is unset.
func (v *TransHeaderType) GetF3() (o float64) {
	if v != nil && v.F3 != nil {
		return *v.F3
	}

	return
}

// IsSetF3 returns true if F3 is not nil.
func (v *TransHeaderType) IsSetF3() bool {
	return v != nil && v.F3 != nil
}

// GetU4 returns the value of U4 if it is set or its
// zero value if it is unset.
func (v *TransHeaderType) GetU4() (o UUID) {
	if v != nil {
		o = v.U4
	}
	return
}

// GetU5 returns the value of U5 if it is set or its
// zero value if it is unset.
func (v *TransHeaderType) GetU5() (o UUID) {
	if v != nil && v.U5 != nil {
		return *v.U5
	}

	return
}

// IsSetU5 returns true if U5 is not nil.
func (v *TransHeaderType) IsSetU5() bool {
	return v != nil && v.U5 != nil
}

// GetS6 returns the value of S6 if it is set or its
// zero value if it is unset.
func (v *TransHeaderType) GetS6() (o string) {
	if v != nil {
		o = v.S6
	}
	return
}
