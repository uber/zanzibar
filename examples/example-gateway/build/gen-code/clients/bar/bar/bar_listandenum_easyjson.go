// Code generated by zanzibar
// @generated
// Checksum : klxOWzjIVi59eHK2Cc3sQA==
// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package bar

import (
	json "encoding/json"
	fmt "fmt"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjson5553a28cDecodeGithubComUberZanzibarExamplesExampleGatewayBuildGenCodeClientsBarBarBarListAndEnum(in *jlexer.Lexer, out *Bar_ListAndEnum_Result) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "success":
			if in.IsNull() {
				in.Skip()
				out.Success = nil
			} else {
				if out.Success == nil {
					out.Success = new(string)
				}
				*out.Success = string(in.String())
			}
		case "barException":
			if in.IsNull() {
				in.Skip()
				out.BarException = nil
			} else {
				if out.BarException == nil {
					out.BarException = new(BarException)
				}
				(*out.BarException).UnmarshalEasyJSON(in)
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson5553a28cEncodeGithubComUberZanzibarExamplesExampleGatewayBuildGenCodeClientsBarBarBarListAndEnum(out *jwriter.Writer, in Bar_ListAndEnum_Result) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Success != nil {
		const prefix string = ",\"success\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.Success))
	}
	if in.BarException != nil {
		const prefix string = ",\"barException\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.BarException).MarshalEasyJSON(out)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Bar_ListAndEnum_Result) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson5553a28cEncodeGithubComUberZanzibarExamplesExampleGatewayBuildGenCodeClientsBarBarBarListAndEnum(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Bar_ListAndEnum_Result) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson5553a28cEncodeGithubComUberZanzibarExamplesExampleGatewayBuildGenCodeClientsBarBarBarListAndEnum(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Bar_ListAndEnum_Result) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson5553a28cDecodeGithubComUberZanzibarExamplesExampleGatewayBuildGenCodeClientsBarBarBarListAndEnum(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Bar_ListAndEnum_Result) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson5553a28cDecodeGithubComUberZanzibarExamplesExampleGatewayBuildGenCodeClientsBarBarBarListAndEnum(l, v)
}
func easyjson5553a28cDecodeGithubComUberZanzibarExamplesExampleGatewayBuildGenCodeClientsBarBarBarListAndEnum1(in *jlexer.Lexer, out *Bar_ListAndEnum_Args) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	var DemoIdsSet bool
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "demoIds":
			if in.IsNull() {
				in.Skip()
				out.DemoIds = nil
			} else {
				in.Delim('[')
				if out.DemoIds == nil {
					if !in.IsDelim(']') {
						out.DemoIds = make([]string, 0, 4)
					} else {
						out.DemoIds = []string{}
					}
				} else {
					out.DemoIds = (out.DemoIds)[:0]
				}
				for !in.IsDelim(']') {
					var v1 string
					v1 = string(in.String())
					out.DemoIds = append(out.DemoIds, v1)
					in.WantComma()
				}
				in.Delim(']')
			}
			DemoIdsSet = true
		case "demoType":
			if in.IsNull() {
				in.Skip()
				out.DemoType = nil
			} else {
				if out.DemoType == nil {
					out.DemoType = new(DemoType)
				}
				if data := in.Raw(); in.Ok() {
					in.AddError((*out.DemoType).UnmarshalJSON(data))
				}
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
	if !DemoIdsSet {
		in.AddError(fmt.Errorf("key 'demoIds' is required"))
	}
}
func easyjson5553a28cEncodeGithubComUberZanzibarExamplesExampleGatewayBuildGenCodeClientsBarBarBarListAndEnum1(out *jwriter.Writer, in Bar_ListAndEnum_Args) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"demoIds\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.DemoIds == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v2, v3 := range in.DemoIds {
				if v2 > 0 {
					out.RawByte(',')
				}
				out.String(string(v3))
			}
			out.RawByte(']')
		}
	}
	if in.DemoType != nil {
		const prefix string = ",\"demoType\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Raw((*in.DemoType).MarshalJSON())
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Bar_ListAndEnum_Args) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson5553a28cEncodeGithubComUberZanzibarExamplesExampleGatewayBuildGenCodeClientsBarBarBarListAndEnum1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Bar_ListAndEnum_Args) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson5553a28cEncodeGithubComUberZanzibarExamplesExampleGatewayBuildGenCodeClientsBarBarBarListAndEnum1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Bar_ListAndEnum_Args) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson5553a28cDecodeGithubComUberZanzibarExamplesExampleGatewayBuildGenCodeClientsBarBarBarListAndEnum1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Bar_ListAndEnum_Args) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson5553a28cDecodeGithubComUberZanzibarExamplesExampleGatewayBuildGenCodeClientsBarBarBarListAndEnum1(l, v)
}
