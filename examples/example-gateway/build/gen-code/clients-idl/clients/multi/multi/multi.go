// Code generated by thriftrw v1.29.2. DO NOT EDIT.
// @generated

package multi

import (
	errors "errors"
	fmt "fmt"
	strings "strings"

	stream "go.uber.org/thriftrw/protocol/stream"
	wire "go.uber.org/thriftrw/wire"
	zapcore "go.uber.org/zap/zapcore"
)

// ServiceABack_HelloA_Args represents the arguments for the ServiceABack.helloA function.
//
// The arguments for helloA are sent and received over the wire as this struct.
type ServiceABack_HelloA_Args struct {
}

// ToWire translates a ServiceABack_HelloA_Args struct into a Thrift-level intermediate
// representation. This intermediate representation may be serialized
// into bytes using a ThriftRW protocol implementation.
//
// An error is returned if the struct or any of its fields failed to
// validate.
//
//	x, err := v.ToWire()
//	if err != nil {
//	  return err
//	}
//
//	if err := binaryProtocol.Encode(x, writer); err != nil {
//	  return err
//	}
func (v *ServiceABack_HelloA_Args) ToWire() (wire.Value, error) {
	var (
		fields [0]wire.Field
		i      int = 0
	)

	return wire.NewValueStruct(wire.Struct{Fields: fields[:i]}), nil
}

// FromWire deserializes a ServiceABack_HelloA_Args struct from its Thrift-level
// representation. The Thrift-level representation may be obtained
// from a ThriftRW protocol implementation.
//
// An error is returned if we were unable to build a ServiceABack_HelloA_Args struct
// from the provided intermediate representation.
//
//	x, err := binaryProtocol.Decode(reader, wire.TStruct)
//	if err != nil {
//	  return nil, err
//	}
//
//	var v ServiceABack_HelloA_Args
//	if err := v.FromWire(x); err != nil {
//	  return nil, err
//	}
//	return &v, nil
func (v *ServiceABack_HelloA_Args) FromWire(w wire.Value) error {

	for _, field := range w.GetStruct().Fields {
		switch field.ID {
		}
	}

	return nil
}

// Encode serializes a ServiceABack_HelloA_Args struct directly into bytes, without going
// through an intermediary type.
//
// An error is returned if a ServiceABack_HelloA_Args struct could not be encoded.
func (v *ServiceABack_HelloA_Args) Encode(sw stream.Writer) error {
	if err := sw.WriteStructBegin(); err != nil {
		return err
	}

	return sw.WriteStructEnd()
}

// Decode deserializes a ServiceABack_HelloA_Args struct directly from its Thrift-level
// representation, without going through an intemediary type.
//
// An error is returned if a ServiceABack_HelloA_Args struct could not be generated from the wire
// representation.
func (v *ServiceABack_HelloA_Args) Decode(sr stream.Reader) error {

	if err := sr.ReadStructBegin(); err != nil {
		return err
	}

	fh, ok, err := sr.ReadFieldBegin()
	if err != nil {
		return err
	}

	for ok {
		switch {
		default:
			if err := sr.Skip(fh.Type); err != nil {
				return err
			}
		}

		if err := sr.ReadFieldEnd(); err != nil {
			return err
		}

		if fh, ok, err = sr.ReadFieldBegin(); err != nil {
			return err
		}
	}

	if err := sr.ReadStructEnd(); err != nil {
		return err
	}

	return nil
}

// String returns a readable string representation of a ServiceABack_HelloA_Args
// struct.
func (v *ServiceABack_HelloA_Args) String() string {
	if v == nil {
		return "<nil>"
	}

	var fields [0]string
	i := 0

	return fmt.Sprintf("ServiceABack_HelloA_Args{%v}", strings.Join(fields[:i], ", "))
}

// Equals returns true if all the fields of this ServiceABack_HelloA_Args match the
// provided ServiceABack_HelloA_Args.
//
// This function performs a deep comparison.
func (v *ServiceABack_HelloA_Args) Equals(rhs *ServiceABack_HelloA_Args) bool {
	if v == nil {
		return rhs == nil
	} else if rhs == nil {
		return false
	}

	return true
}

// MarshalLogObject implements zapcore.ObjectMarshaler, enabling
// fast logging of ServiceABack_HelloA_Args.
func (v *ServiceABack_HelloA_Args) MarshalLogObject(enc zapcore.ObjectEncoder) (err error) {
	if v == nil {
		return nil
	}
	return err
}

// MethodName returns the name of the Thrift function as specified in
// the IDL, for which this struct represent the arguments.
//
// This will always be "helloA" for this struct.
func (v *ServiceABack_HelloA_Args) MethodName() string {
	return "helloA"
}

// EnvelopeType returns the kind of value inside this struct.
//
// This will always be Call for this struct.
func (v *ServiceABack_HelloA_Args) EnvelopeType() wire.EnvelopeType {
	return wire.Call
}

// ServiceABack_HelloA_Helper provides functions that aid in handling the
// parameters and return values of the ServiceABack.helloA
// function.
var ServiceABack_HelloA_Helper = struct {
	// Args accepts the parameters of helloA in-order and returns
	// the arguments struct for the function.
	Args func() *ServiceABack_HelloA_Args

	// IsException returns true if the given error can be thrown
	// by helloA.
	//
	// An error can be thrown by helloA only if the
	// corresponding exception type was mentioned in the 'throws'
	// section for it in the Thrift file.
	IsException func(error) bool

	// WrapResponse returns the result struct for helloA
	// given its return value and error.
	//
	// This allows mapping values and errors returned by
	// helloA into a serializable result struct.
	// WrapResponse returns a non-nil error if the provided
	// error cannot be thrown by helloA
	//
	//   value, err := helloA(args)
	//   result, err := ServiceABack_HelloA_Helper.WrapResponse(value, err)
	//   if err != nil {
	//     return fmt.Errorf("unexpected error from helloA: %v", err)
	//   }
	//   serialize(result)
	WrapResponse func(string, error) (*ServiceABack_HelloA_Result, error)

	// UnwrapResponse takes the result struct for helloA
	// and returns the value or error returned by it.
	//
	// The error is non-nil only if helloA threw an
	// exception.
	//
	//   result := deserialize(bytes)
	//   value, err := ServiceABack_HelloA_Helper.UnwrapResponse(result)
	UnwrapResponse func(*ServiceABack_HelloA_Result) (string, error)
}{}

func init() {
	ServiceABack_HelloA_Helper.Args = func() *ServiceABack_HelloA_Args {
		return &ServiceABack_HelloA_Args{}
	}

	ServiceABack_HelloA_Helper.IsException = func(err error) bool {
		switch err.(type) {
		default:
			return false
		}
	}

	ServiceABack_HelloA_Helper.WrapResponse = func(success string, err error) (*ServiceABack_HelloA_Result, error) {
		if err == nil {
			return &ServiceABack_HelloA_Result{Success: &success}, nil
		}

		return nil, err
	}
	ServiceABack_HelloA_Helper.UnwrapResponse = func(result *ServiceABack_HelloA_Result) (success string, err error) {

		if result.Success != nil {
			success = *result.Success
			return
		}

		err = errors.New("expected a non-void result")
		return
	}

}

// ServiceABack_HelloA_Result represents the result of a ServiceABack.helloA function call.
//
// The result of a helloA execution is sent and received over the wire as this struct.
//
// Success is set only if the function did not throw an exception.
type ServiceABack_HelloA_Result struct {
	// Value returned by helloA after a successful execution.
	Success *string `json:"success,omitempty"`
}

// ToWire translates a ServiceABack_HelloA_Result struct into a Thrift-level intermediate
// representation. This intermediate representation may be serialized
// into bytes using a ThriftRW protocol implementation.
//
// An error is returned if the struct or any of its fields failed to
// validate.
//
//	x, err := v.ToWire()
//	if err != nil {
//	  return err
//	}
//
//	if err := binaryProtocol.Encode(x, writer); err != nil {
//	  return err
//	}
func (v *ServiceABack_HelloA_Result) ToWire() (wire.Value, error) {
	var (
		fields [1]wire.Field
		i      int = 0
		w      wire.Value
		err    error
	)

	if v.Success != nil {
		w, err = wire.NewValueString(*(v.Success)), error(nil)
		if err != nil {
			return w, err
		}
		fields[i] = wire.Field{ID: 0, Value: w}
		i++
	}

	if i != 1 {
		return wire.Value{}, fmt.Errorf("ServiceABack_HelloA_Result should have exactly one field: got %v fields", i)
	}

	return wire.NewValueStruct(wire.Struct{Fields: fields[:i]}), nil
}

// FromWire deserializes a ServiceABack_HelloA_Result struct from its Thrift-level
// representation. The Thrift-level representation may be obtained
// from a ThriftRW protocol implementation.
//
// An error is returned if we were unable to build a ServiceABack_HelloA_Result struct
// from the provided intermediate representation.
//
//	x, err := binaryProtocol.Decode(reader, wire.TStruct)
//	if err != nil {
//	  return nil, err
//	}
//
//	var v ServiceABack_HelloA_Result
//	if err := v.FromWire(x); err != nil {
//	  return nil, err
//	}
//	return &v, nil
func (v *ServiceABack_HelloA_Result) FromWire(w wire.Value) error {
	var err error

	for _, field := range w.GetStruct().Fields {
		switch field.ID {
		case 0:
			if field.Value.Type() == wire.TBinary {
				var x string
				x, err = field.Value.GetString(), error(nil)
				v.Success = &x
				if err != nil {
					return err
				}

			}
		}
	}

	count := 0
	if v.Success != nil {
		count++
	}
	if count != 1 {
		return fmt.Errorf("ServiceABack_HelloA_Result should have exactly one field: got %v fields", count)
	}

	return nil
}

// Encode serializes a ServiceABack_HelloA_Result struct directly into bytes, without going
// through an intermediary type.
//
// An error is returned if a ServiceABack_HelloA_Result struct could not be encoded.
func (v *ServiceABack_HelloA_Result) Encode(sw stream.Writer) error {
	if err := sw.WriteStructBegin(); err != nil {
		return err
	}

	if v.Success != nil {
		if err := sw.WriteFieldBegin(stream.FieldHeader{ID: 0, Type: wire.TBinary}); err != nil {
			return err
		}
		if err := sw.WriteString(*(v.Success)); err != nil {
			return err
		}
		if err := sw.WriteFieldEnd(); err != nil {
			return err
		}
	}

	count := 0
	if v.Success != nil {
		count++
	}

	if count != 1 {
		return fmt.Errorf("ServiceABack_HelloA_Result should have exactly one field: got %v fields", count)
	}

	return sw.WriteStructEnd()
}

// Decode deserializes a ServiceABack_HelloA_Result struct directly from its Thrift-level
// representation, without going through an intemediary type.
//
// An error is returned if a ServiceABack_HelloA_Result struct could not be generated from the wire
// representation.
func (v *ServiceABack_HelloA_Result) Decode(sr stream.Reader) error {

	if err := sr.ReadStructBegin(); err != nil {
		return err
	}

	fh, ok, err := sr.ReadFieldBegin()
	if err != nil {
		return err
	}

	for ok {
		switch {
		case fh.ID == 0 && fh.Type == wire.TBinary:
			var x string
			x, err = sr.ReadString()
			v.Success = &x
			if err != nil {
				return err
			}

		default:
			if err := sr.Skip(fh.Type); err != nil {
				return err
			}
		}

		if err := sr.ReadFieldEnd(); err != nil {
			return err
		}

		if fh, ok, err = sr.ReadFieldBegin(); err != nil {
			return err
		}
	}

	if err := sr.ReadStructEnd(); err != nil {
		return err
	}

	count := 0
	if v.Success != nil {
		count++
	}
	if count != 1 {
		return fmt.Errorf("ServiceABack_HelloA_Result should have exactly one field: got %v fields", count)
	}

	return nil
}

// String returns a readable string representation of a ServiceABack_HelloA_Result
// struct.
func (v *ServiceABack_HelloA_Result) String() string {
	if v == nil {
		return "<nil>"
	}

	var fields [1]string
	i := 0
	if v.Success != nil {
		fields[i] = fmt.Sprintf("Success: %v", *(v.Success))
		i++
	}

	return fmt.Sprintf("ServiceABack_HelloA_Result{%v}", strings.Join(fields[:i], ", "))
}

func _String_EqualsPtr(lhs, rhs *string) bool {
	if lhs != nil && rhs != nil {

		x := *lhs
		y := *rhs
		return (x == y)
	}
	return lhs == nil && rhs == nil
}

// Equals returns true if all the fields of this ServiceABack_HelloA_Result match the
// provided ServiceABack_HelloA_Result.
//
// This function performs a deep comparison.
func (v *ServiceABack_HelloA_Result) Equals(rhs *ServiceABack_HelloA_Result) bool {
	if v == nil {
		return rhs == nil
	} else if rhs == nil {
		return false
	}
	if !_String_EqualsPtr(v.Success, rhs.Success) {
		return false
	}

	return true
}

// MarshalLogObject implements zapcore.ObjectMarshaler, enabling
// fast logging of ServiceABack_HelloA_Result.
func (v *ServiceABack_HelloA_Result) MarshalLogObject(enc zapcore.ObjectEncoder) (err error) {
	if v == nil {
		return nil
	}
	if v.Success != nil {
		enc.AddString("success", *v.Success)
	}
	return err
}

// GetSuccess returns the value of Success if it is set or its
// zero value if it is unset.
func (v *ServiceABack_HelloA_Result) GetSuccess() (o string) {
	if v != nil && v.Success != nil {
		return *v.Success
	}

	return
}

// IsSetSuccess returns true if Success is not nil.
func (v *ServiceABack_HelloA_Result) IsSetSuccess() bool {
	return v != nil && v.Success != nil
}

// MethodName returns the name of the Thrift function as specified in
// the IDL, for which this struct represent the result.
//
// This will always be "helloA" for this struct.
func (v *ServiceABack_HelloA_Result) MethodName() string {
	return "helloA"
}

// EnvelopeType returns the kind of value inside this struct.
//
// This will always be Reply for this struct.
func (v *ServiceABack_HelloA_Result) EnvelopeType() wire.EnvelopeType {
	return wire.Reply
}

// ServiceBBack_HelloB_Args represents the arguments for the ServiceBBack.helloB function.
//
// The arguments for helloB are sent and received over the wire as this struct.
type ServiceBBack_HelloB_Args struct {
}

// ToWire translates a ServiceBBack_HelloB_Args struct into a Thrift-level intermediate
// representation. This intermediate representation may be serialized
// into bytes using a ThriftRW protocol implementation.
//
// An error is returned if the struct or any of its fields failed to
// validate.
//
//	x, err := v.ToWire()
//	if err != nil {
//	  return err
//	}
//
//	if err := binaryProtocol.Encode(x, writer); err != nil {
//	  return err
//	}
func (v *ServiceBBack_HelloB_Args) ToWire() (wire.Value, error) {
	var (
		fields [0]wire.Field
		i      int = 0
	)

	return wire.NewValueStruct(wire.Struct{Fields: fields[:i]}), nil
}

// FromWire deserializes a ServiceBBack_HelloB_Args struct from its Thrift-level
// representation. The Thrift-level representation may be obtained
// from a ThriftRW protocol implementation.
//
// An error is returned if we were unable to build a ServiceBBack_HelloB_Args struct
// from the provided intermediate representation.
//
//	x, err := binaryProtocol.Decode(reader, wire.TStruct)
//	if err != nil {
//	  return nil, err
//	}
//
//	var v ServiceBBack_HelloB_Args
//	if err := v.FromWire(x); err != nil {
//	  return nil, err
//	}
//	return &v, nil
func (v *ServiceBBack_HelloB_Args) FromWire(w wire.Value) error {

	for _, field := range w.GetStruct().Fields {
		switch field.ID {
		}
	}

	return nil
}

// Encode serializes a ServiceBBack_HelloB_Args struct directly into bytes, without going
// through an intermediary type.
//
// An error is returned if a ServiceBBack_HelloB_Args struct could not be encoded.
func (v *ServiceBBack_HelloB_Args) Encode(sw stream.Writer) error {
	if err := sw.WriteStructBegin(); err != nil {
		return err
	}

	return sw.WriteStructEnd()
}

// Decode deserializes a ServiceBBack_HelloB_Args struct directly from its Thrift-level
// representation, without going through an intemediary type.
//
// An error is returned if a ServiceBBack_HelloB_Args struct could not be generated from the wire
// representation.
func (v *ServiceBBack_HelloB_Args) Decode(sr stream.Reader) error {

	if err := sr.ReadStructBegin(); err != nil {
		return err
	}

	fh, ok, err := sr.ReadFieldBegin()
	if err != nil {
		return err
	}

	for ok {
		switch {
		default:
			if err := sr.Skip(fh.Type); err != nil {
				return err
			}
		}

		if err := sr.ReadFieldEnd(); err != nil {
			return err
		}

		if fh, ok, err = sr.ReadFieldBegin(); err != nil {
			return err
		}
	}

	if err := sr.ReadStructEnd(); err != nil {
		return err
	}

	return nil
}

// String returns a readable string representation of a ServiceBBack_HelloB_Args
// struct.
func (v *ServiceBBack_HelloB_Args) String() string {
	if v == nil {
		return "<nil>"
	}

	var fields [0]string
	i := 0

	return fmt.Sprintf("ServiceBBack_HelloB_Args{%v}", strings.Join(fields[:i], ", "))
}

// Equals returns true if all the fields of this ServiceBBack_HelloB_Args match the
// provided ServiceBBack_HelloB_Args.
//
// This function performs a deep comparison.
func (v *ServiceBBack_HelloB_Args) Equals(rhs *ServiceBBack_HelloB_Args) bool {
	if v == nil {
		return rhs == nil
	} else if rhs == nil {
		return false
	}

	return true
}

// MarshalLogObject implements zapcore.ObjectMarshaler, enabling
// fast logging of ServiceBBack_HelloB_Args.
func (v *ServiceBBack_HelloB_Args) MarshalLogObject(enc zapcore.ObjectEncoder) (err error) {
	if v == nil {
		return nil
	}
	return err
}

// MethodName returns the name of the Thrift function as specified in
// the IDL, for which this struct represent the arguments.
//
// This will always be "helloB" for this struct.
func (v *ServiceBBack_HelloB_Args) MethodName() string {
	return "helloB"
}

// EnvelopeType returns the kind of value inside this struct.
//
// This will always be Call for this struct.
func (v *ServiceBBack_HelloB_Args) EnvelopeType() wire.EnvelopeType {
	return wire.Call
}

// ServiceBBack_HelloB_Helper provides functions that aid in handling the
// parameters and return values of the ServiceBBack.helloB
// function.
var ServiceBBack_HelloB_Helper = struct {
	// Args accepts the parameters of helloB in-order and returns
	// the arguments struct for the function.
	Args func() *ServiceBBack_HelloB_Args

	// IsException returns true if the given error can be thrown
	// by helloB.
	//
	// An error can be thrown by helloB only if the
	// corresponding exception type was mentioned in the 'throws'
	// section for it in the Thrift file.
	IsException func(error) bool

	// WrapResponse returns the result struct for helloB
	// given its return value and error.
	//
	// This allows mapping values and errors returned by
	// helloB into a serializable result struct.
	// WrapResponse returns a non-nil error if the provided
	// error cannot be thrown by helloB
	//
	//   value, err := helloB(args)
	//   result, err := ServiceBBack_HelloB_Helper.WrapResponse(value, err)
	//   if err != nil {
	//     return fmt.Errorf("unexpected error from helloB: %v", err)
	//   }
	//   serialize(result)
	WrapResponse func(string, error) (*ServiceBBack_HelloB_Result, error)

	// UnwrapResponse takes the result struct for helloB
	// and returns the value or error returned by it.
	//
	// The error is non-nil only if helloB threw an
	// exception.
	//
	//   result := deserialize(bytes)
	//   value, err := ServiceBBack_HelloB_Helper.UnwrapResponse(result)
	UnwrapResponse func(*ServiceBBack_HelloB_Result) (string, error)
}{}

func init() {
	ServiceBBack_HelloB_Helper.Args = func() *ServiceBBack_HelloB_Args {
		return &ServiceBBack_HelloB_Args{}
	}

	ServiceBBack_HelloB_Helper.IsException = func(err error) bool {
		switch err.(type) {
		default:
			return false
		}
	}

	ServiceBBack_HelloB_Helper.WrapResponse = func(success string, err error) (*ServiceBBack_HelloB_Result, error) {
		if err == nil {
			return &ServiceBBack_HelloB_Result{Success: &success}, nil
		}

		return nil, err
	}
	ServiceBBack_HelloB_Helper.UnwrapResponse = func(result *ServiceBBack_HelloB_Result) (success string, err error) {

		if result.Success != nil {
			success = *result.Success
			return
		}

		err = errors.New("expected a non-void result")
		return
	}

}

// ServiceBBack_HelloB_Result represents the result of a ServiceBBack.helloB function call.
//
// The result of a helloB execution is sent and received over the wire as this struct.
//
// Success is set only if the function did not throw an exception.
type ServiceBBack_HelloB_Result struct {
	// Value returned by helloB after a successful execution.
	Success *string `json:"success,omitempty"`
}

// ToWire translates a ServiceBBack_HelloB_Result struct into a Thrift-level intermediate
// representation. This intermediate representation may be serialized
// into bytes using a ThriftRW protocol implementation.
//
// An error is returned if the struct or any of its fields failed to
// validate.
//
//	x, err := v.ToWire()
//	if err != nil {
//	  return err
//	}
//
//	if err := binaryProtocol.Encode(x, writer); err != nil {
//	  return err
//	}
func (v *ServiceBBack_HelloB_Result) ToWire() (wire.Value, error) {
	var (
		fields [1]wire.Field
		i      int = 0
		w      wire.Value
		err    error
	)

	if v.Success != nil {
		w, err = wire.NewValueString(*(v.Success)), error(nil)
		if err != nil {
			return w, err
		}
		fields[i] = wire.Field{ID: 0, Value: w}
		i++
	}

	if i != 1 {
		return wire.Value{}, fmt.Errorf("ServiceBBack_HelloB_Result should have exactly one field: got %v fields", i)
	}

	return wire.NewValueStruct(wire.Struct{Fields: fields[:i]}), nil
}

// FromWire deserializes a ServiceBBack_HelloB_Result struct from its Thrift-level
// representation. The Thrift-level representation may be obtained
// from a ThriftRW protocol implementation.
//
// An error is returned if we were unable to build a ServiceBBack_HelloB_Result struct
// from the provided intermediate representation.
//
//	x, err := binaryProtocol.Decode(reader, wire.TStruct)
//	if err != nil {
//	  return nil, err
//	}
//
//	var v ServiceBBack_HelloB_Result
//	if err := v.FromWire(x); err != nil {
//	  return nil, err
//	}
//	return &v, nil
func (v *ServiceBBack_HelloB_Result) FromWire(w wire.Value) error {
	var err error

	for _, field := range w.GetStruct().Fields {
		switch field.ID {
		case 0:
			if field.Value.Type() == wire.TBinary {
				var x string
				x, err = field.Value.GetString(), error(nil)
				v.Success = &x
				if err != nil {
					return err
				}

			}
		}
	}

	count := 0
	if v.Success != nil {
		count++
	}
	if count != 1 {
		return fmt.Errorf("ServiceBBack_HelloB_Result should have exactly one field: got %v fields", count)
	}

	return nil
}

// Encode serializes a ServiceBBack_HelloB_Result struct directly into bytes, without going
// through an intermediary type.
//
// An error is returned if a ServiceBBack_HelloB_Result struct could not be encoded.
func (v *ServiceBBack_HelloB_Result) Encode(sw stream.Writer) error {
	if err := sw.WriteStructBegin(); err != nil {
		return err
	}

	if v.Success != nil {
		if err := sw.WriteFieldBegin(stream.FieldHeader{ID: 0, Type: wire.TBinary}); err != nil {
			return err
		}
		if err := sw.WriteString(*(v.Success)); err != nil {
			return err
		}
		if err := sw.WriteFieldEnd(); err != nil {
			return err
		}
	}

	count := 0
	if v.Success != nil {
		count++
	}

	if count != 1 {
		return fmt.Errorf("ServiceBBack_HelloB_Result should have exactly one field: got %v fields", count)
	}

	return sw.WriteStructEnd()
}

// Decode deserializes a ServiceBBack_HelloB_Result struct directly from its Thrift-level
// representation, without going through an intemediary type.
//
// An error is returned if a ServiceBBack_HelloB_Result struct could not be generated from the wire
// representation.
func (v *ServiceBBack_HelloB_Result) Decode(sr stream.Reader) error {

	if err := sr.ReadStructBegin(); err != nil {
		return err
	}

	fh, ok, err := sr.ReadFieldBegin()
	if err != nil {
		return err
	}

	for ok {
		switch {
		case fh.ID == 0 && fh.Type == wire.TBinary:
			var x string
			x, err = sr.ReadString()
			v.Success = &x
			if err != nil {
				return err
			}

		default:
			if err := sr.Skip(fh.Type); err != nil {
				return err
			}
		}

		if err := sr.ReadFieldEnd(); err != nil {
			return err
		}

		if fh, ok, err = sr.ReadFieldBegin(); err != nil {
			return err
		}
	}

	if err := sr.ReadStructEnd(); err != nil {
		return err
	}

	count := 0
	if v.Success != nil {
		count++
	}
	if count != 1 {
		return fmt.Errorf("ServiceBBack_HelloB_Result should have exactly one field: got %v fields", count)
	}

	return nil
}

// String returns a readable string representation of a ServiceBBack_HelloB_Result
// struct.
func (v *ServiceBBack_HelloB_Result) String() string {
	if v == nil {
		return "<nil>"
	}

	var fields [1]string
	i := 0
	if v.Success != nil {
		fields[i] = fmt.Sprintf("Success: %v", *(v.Success))
		i++
	}

	return fmt.Sprintf("ServiceBBack_HelloB_Result{%v}", strings.Join(fields[:i], ", "))
}

// Equals returns true if all the fields of this ServiceBBack_HelloB_Result match the
// provided ServiceBBack_HelloB_Result.
//
// This function performs a deep comparison.
func (v *ServiceBBack_HelloB_Result) Equals(rhs *ServiceBBack_HelloB_Result) bool {
	if v == nil {
		return rhs == nil
	} else if rhs == nil {
		return false
	}
	if !_String_EqualsPtr(v.Success, rhs.Success) {
		return false
	}

	return true
}

// MarshalLogObject implements zapcore.ObjectMarshaler, enabling
// fast logging of ServiceBBack_HelloB_Result.
func (v *ServiceBBack_HelloB_Result) MarshalLogObject(enc zapcore.ObjectEncoder) (err error) {
	if v == nil {
		return nil
	}
	if v.Success != nil {
		enc.AddString("success", *v.Success)
	}
	return err
}

// GetSuccess returns the value of Success if it is set or its
// zero value if it is unset.
func (v *ServiceBBack_HelloB_Result) GetSuccess() (o string) {
	if v != nil && v.Success != nil {
		return *v.Success
	}

	return
}

// IsSetSuccess returns true if Success is not nil.
func (v *ServiceBBack_HelloB_Result) IsSetSuccess() bool {
	return v != nil && v.Success != nil
}

// MethodName returns the name of the Thrift function as specified in
// the IDL, for which this struct represent the result.
//
// This will always be "helloB" for this struct.
func (v *ServiceBBack_HelloB_Result) MethodName() string {
	return "helloB"
}

// EnvelopeType returns the kind of value inside this struct.
//
// This will always be Reply for this struct.
func (v *ServiceBBack_HelloB_Result) EnvelopeType() wire.EnvelopeType {
	return wire.Reply
}

// ServiceCBack_Hello_Args represents the arguments for the ServiceCBack.hello function.
//
// The arguments for hello are sent and received over the wire as this struct.
type ServiceCBack_Hello_Args struct {
}

// ToWire translates a ServiceCBack_Hello_Args struct into a Thrift-level intermediate
// representation. This intermediate representation may be serialized
// into bytes using a ThriftRW protocol implementation.
//
// An error is returned if the struct or any of its fields failed to
// validate.
//
//	x, err := v.ToWire()
//	if err != nil {
//	  return err
//	}
//
//	if err := binaryProtocol.Encode(x, writer); err != nil {
//	  return err
//	}
func (v *ServiceCBack_Hello_Args) ToWire() (wire.Value, error) {
	var (
		fields [0]wire.Field
		i      int = 0
	)

	return wire.NewValueStruct(wire.Struct{Fields: fields[:i]}), nil
}

// FromWire deserializes a ServiceCBack_Hello_Args struct from its Thrift-level
// representation. The Thrift-level representation may be obtained
// from a ThriftRW protocol implementation.
//
// An error is returned if we were unable to build a ServiceCBack_Hello_Args struct
// from the provided intermediate representation.
//
//	x, err := binaryProtocol.Decode(reader, wire.TStruct)
//	if err != nil {
//	  return nil, err
//	}
//
//	var v ServiceCBack_Hello_Args
//	if err := v.FromWire(x); err != nil {
//	  return nil, err
//	}
//	return &v, nil
func (v *ServiceCBack_Hello_Args) FromWire(w wire.Value) error {

	for _, field := range w.GetStruct().Fields {
		switch field.ID {
		}
	}

	return nil
}

// Encode serializes a ServiceCBack_Hello_Args struct directly into bytes, without going
// through an intermediary type.
//
// An error is returned if a ServiceCBack_Hello_Args struct could not be encoded.
func (v *ServiceCBack_Hello_Args) Encode(sw stream.Writer) error {
	if err := sw.WriteStructBegin(); err != nil {
		return err
	}

	return sw.WriteStructEnd()
}

// Decode deserializes a ServiceCBack_Hello_Args struct directly from its Thrift-level
// representation, without going through an intemediary type.
//
// An error is returned if a ServiceCBack_Hello_Args struct could not be generated from the wire
// representation.
func (v *ServiceCBack_Hello_Args) Decode(sr stream.Reader) error {

	if err := sr.ReadStructBegin(); err != nil {
		return err
	}

	fh, ok, err := sr.ReadFieldBegin()
	if err != nil {
		return err
	}

	for ok {
		switch {
		default:
			if err := sr.Skip(fh.Type); err != nil {
				return err
			}
		}

		if err := sr.ReadFieldEnd(); err != nil {
			return err
		}

		if fh, ok, err = sr.ReadFieldBegin(); err != nil {
			return err
		}
	}

	if err := sr.ReadStructEnd(); err != nil {
		return err
	}

	return nil
}

// String returns a readable string representation of a ServiceCBack_Hello_Args
// struct.
func (v *ServiceCBack_Hello_Args) String() string {
	if v == nil {
		return "<nil>"
	}

	var fields [0]string
	i := 0

	return fmt.Sprintf("ServiceCBack_Hello_Args{%v}", strings.Join(fields[:i], ", "))
}

// Equals returns true if all the fields of this ServiceCBack_Hello_Args match the
// provided ServiceCBack_Hello_Args.
//
// This function performs a deep comparison.
func (v *ServiceCBack_Hello_Args) Equals(rhs *ServiceCBack_Hello_Args) bool {
	if v == nil {
		return rhs == nil
	} else if rhs == nil {
		return false
	}

	return true
}

// MarshalLogObject implements zapcore.ObjectMarshaler, enabling
// fast logging of ServiceCBack_Hello_Args.
func (v *ServiceCBack_Hello_Args) MarshalLogObject(enc zapcore.ObjectEncoder) (err error) {
	if v == nil {
		return nil
	}
	return err
}

// MethodName returns the name of the Thrift function as specified in
// the IDL, for which this struct represent the arguments.
//
// This will always be "hello" for this struct.
func (v *ServiceCBack_Hello_Args) MethodName() string {
	return "hello"
}

// EnvelopeType returns the kind of value inside this struct.
//
// This will always be Call for this struct.
func (v *ServiceCBack_Hello_Args) EnvelopeType() wire.EnvelopeType {
	return wire.Call
}

// ServiceCBack_Hello_Helper provides functions that aid in handling the
// parameters and return values of the ServiceCBack.hello
// function.
var ServiceCBack_Hello_Helper = struct {
	// Args accepts the parameters of hello in-order and returns
	// the arguments struct for the function.
	Args func() *ServiceCBack_Hello_Args

	// IsException returns true if the given error can be thrown
	// by hello.
	//
	// An error can be thrown by hello only if the
	// corresponding exception type was mentioned in the 'throws'
	// section for it in the Thrift file.
	IsException func(error) bool

	// WrapResponse returns the result struct for hello
	// given its return value and error.
	//
	// This allows mapping values and errors returned by
	// hello into a serializable result struct.
	// WrapResponse returns a non-nil error if the provided
	// error cannot be thrown by hello
	//
	//   value, err := hello(args)
	//   result, err := ServiceCBack_Hello_Helper.WrapResponse(value, err)
	//   if err != nil {
	//     return fmt.Errorf("unexpected error from hello: %v", err)
	//   }
	//   serialize(result)
	WrapResponse func(string, error) (*ServiceCBack_Hello_Result, error)

	// UnwrapResponse takes the result struct for hello
	// and returns the value or error returned by it.
	//
	// The error is non-nil only if hello threw an
	// exception.
	//
	//   result := deserialize(bytes)
	//   value, err := ServiceCBack_Hello_Helper.UnwrapResponse(result)
	UnwrapResponse func(*ServiceCBack_Hello_Result) (string, error)
}{}

func init() {
	ServiceCBack_Hello_Helper.Args = func() *ServiceCBack_Hello_Args {
		return &ServiceCBack_Hello_Args{}
	}

	ServiceCBack_Hello_Helper.IsException = func(err error) bool {
		switch err.(type) {
		default:
			return false
		}
	}

	ServiceCBack_Hello_Helper.WrapResponse = func(success string, err error) (*ServiceCBack_Hello_Result, error) {
		if err == nil {
			return &ServiceCBack_Hello_Result{Success: &success}, nil
		}

		return nil, err
	}
	ServiceCBack_Hello_Helper.UnwrapResponse = func(result *ServiceCBack_Hello_Result) (success string, err error) {

		if result.Success != nil {
			success = *result.Success
			return
		}

		err = errors.New("expected a non-void result")
		return
	}

}

// ServiceCBack_Hello_Result represents the result of a ServiceCBack.hello function call.
//
// The result of a hello execution is sent and received over the wire as this struct.
//
// Success is set only if the function did not throw an exception.
type ServiceCBack_Hello_Result struct {
	// Value returned by hello after a successful execution.
	Success *string `json:"success,omitempty"`
}

// ToWire translates a ServiceCBack_Hello_Result struct into a Thrift-level intermediate
// representation. This intermediate representation may be serialized
// into bytes using a ThriftRW protocol implementation.
//
// An error is returned if the struct or any of its fields failed to
// validate.
//
//	x, err := v.ToWire()
//	if err != nil {
//	  return err
//	}
//
//	if err := binaryProtocol.Encode(x, writer); err != nil {
//	  return err
//	}
func (v *ServiceCBack_Hello_Result) ToWire() (wire.Value, error) {
	var (
		fields [1]wire.Field
		i      int = 0
		w      wire.Value
		err    error
	)

	if v.Success != nil {
		w, err = wire.NewValueString(*(v.Success)), error(nil)
		if err != nil {
			return w, err
		}
		fields[i] = wire.Field{ID: 0, Value: w}
		i++
	}

	if i != 1 {
		return wire.Value{}, fmt.Errorf("ServiceCBack_Hello_Result should have exactly one field: got %v fields", i)
	}

	return wire.NewValueStruct(wire.Struct{Fields: fields[:i]}), nil
}

// FromWire deserializes a ServiceCBack_Hello_Result struct from its Thrift-level
// representation. The Thrift-level representation may be obtained
// from a ThriftRW protocol implementation.
//
// An error is returned if we were unable to build a ServiceCBack_Hello_Result struct
// from the provided intermediate representation.
//
//	x, err := binaryProtocol.Decode(reader, wire.TStruct)
//	if err != nil {
//	  return nil, err
//	}
//
//	var v ServiceCBack_Hello_Result
//	if err := v.FromWire(x); err != nil {
//	  return nil, err
//	}
//	return &v, nil
func (v *ServiceCBack_Hello_Result) FromWire(w wire.Value) error {
	var err error

	for _, field := range w.GetStruct().Fields {
		switch field.ID {
		case 0:
			if field.Value.Type() == wire.TBinary {
				var x string
				x, err = field.Value.GetString(), error(nil)
				v.Success = &x
				if err != nil {
					return err
				}

			}
		}
	}

	count := 0
	if v.Success != nil {
		count++
	}
	if count != 1 {
		return fmt.Errorf("ServiceCBack_Hello_Result should have exactly one field: got %v fields", count)
	}

	return nil
}

// Encode serializes a ServiceCBack_Hello_Result struct directly into bytes, without going
// through an intermediary type.
//
// An error is returned if a ServiceCBack_Hello_Result struct could not be encoded.
func (v *ServiceCBack_Hello_Result) Encode(sw stream.Writer) error {
	if err := sw.WriteStructBegin(); err != nil {
		return err
	}

	if v.Success != nil {
		if err := sw.WriteFieldBegin(stream.FieldHeader{ID: 0, Type: wire.TBinary}); err != nil {
			return err
		}
		if err := sw.WriteString(*(v.Success)); err != nil {
			return err
		}
		if err := sw.WriteFieldEnd(); err != nil {
			return err
		}
	}

	count := 0
	if v.Success != nil {
		count++
	}

	if count != 1 {
		return fmt.Errorf("ServiceCBack_Hello_Result should have exactly one field: got %v fields", count)
	}

	return sw.WriteStructEnd()
}

// Decode deserializes a ServiceCBack_Hello_Result struct directly from its Thrift-level
// representation, without going through an intemediary type.
//
// An error is returned if a ServiceCBack_Hello_Result struct could not be generated from the wire
// representation.
func (v *ServiceCBack_Hello_Result) Decode(sr stream.Reader) error {

	if err := sr.ReadStructBegin(); err != nil {
		return err
	}

	fh, ok, err := sr.ReadFieldBegin()
	if err != nil {
		return err
	}

	for ok {
		switch {
		case fh.ID == 0 && fh.Type == wire.TBinary:
			var x string
			x, err = sr.ReadString()
			v.Success = &x
			if err != nil {
				return err
			}

		default:
			if err := sr.Skip(fh.Type); err != nil {
				return err
			}
		}

		if err := sr.ReadFieldEnd(); err != nil {
			return err
		}

		if fh, ok, err = sr.ReadFieldBegin(); err != nil {
			return err
		}
	}

	if err := sr.ReadStructEnd(); err != nil {
		return err
	}

	count := 0
	if v.Success != nil {
		count++
	}
	if count != 1 {
		return fmt.Errorf("ServiceCBack_Hello_Result should have exactly one field: got %v fields", count)
	}

	return nil
}

// String returns a readable string representation of a ServiceCBack_Hello_Result
// struct.
func (v *ServiceCBack_Hello_Result) String() string {
	if v == nil {
		return "<nil>"
	}

	var fields [1]string
	i := 0
	if v.Success != nil {
		fields[i] = fmt.Sprintf("Success: %v", *(v.Success))
		i++
	}

	return fmt.Sprintf("ServiceCBack_Hello_Result{%v}", strings.Join(fields[:i], ", "))
}

// Equals returns true if all the fields of this ServiceCBack_Hello_Result match the
// provided ServiceCBack_Hello_Result.
//
// This function performs a deep comparison.
func (v *ServiceCBack_Hello_Result) Equals(rhs *ServiceCBack_Hello_Result) bool {
	if v == nil {
		return rhs == nil
	} else if rhs == nil {
		return false
	}
	if !_String_EqualsPtr(v.Success, rhs.Success) {
		return false
	}

	return true
}

// MarshalLogObject implements zapcore.ObjectMarshaler, enabling
// fast logging of ServiceCBack_Hello_Result.
func (v *ServiceCBack_Hello_Result) MarshalLogObject(enc zapcore.ObjectEncoder) (err error) {
	if v == nil {
		return nil
	}
	if v.Success != nil {
		enc.AddString("success", *v.Success)
	}
	return err
}

// GetSuccess returns the value of Success if it is set or its
// zero value if it is unset.
func (v *ServiceCBack_Hello_Result) GetSuccess() (o string) {
	if v != nil && v.Success != nil {
		return *v.Success
	}

	return
}

// IsSetSuccess returns true if Success is not nil.
func (v *ServiceCBack_Hello_Result) IsSetSuccess() bool {
	return v != nil && v.Success != nil
}

// MethodName returns the name of the Thrift function as specified in
// the IDL, for which this struct represent the result.
//
// This will always be "hello" for this struct.
func (v *ServiceCBack_Hello_Result) MethodName() string {
	return "hello"
}

// EnvelopeType returns the kind of value inside this struct.
//
// This will always be Reply for this struct.
func (v *ServiceCBack_Hello_Result) EnvelopeType() wire.EnvelopeType {
	return wire.Reply
}
