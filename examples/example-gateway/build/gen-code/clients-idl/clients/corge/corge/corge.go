// Code generated by thriftrw v1.29.2. DO NOT EDIT.
// @generated

package corge

import (
	errors "errors"
	fmt "fmt"
	strings "strings"

	multierr "go.uber.org/multierr"
	stream "go.uber.org/thriftrw/protocol/stream"
	wire "go.uber.org/thriftrw/wire"
	zapcore "go.uber.org/zap/zapcore"
)

type Foo struct {
}

// ToWire translates a Foo struct into a Thrift-level intermediate
// representation. This intermediate representation may be serialized
// into bytes using a ThriftRW protocol implementation.
//
// An error is returned if the struct or any of its fields failed to
// validate.
//
//	x, err := v.ToWire()
//	if err != nil {
//	  return err
//	}
//
//	if err := binaryProtocol.Encode(x, writer); err != nil {
//	  return err
//	}
func (v *Foo) ToWire() (wire.Value, error) {
	var (
		fields [0]wire.Field
		i      int = 0
	)

	return wire.NewValueStruct(wire.Struct{Fields: fields[:i]}), nil
}

// FromWire deserializes a Foo struct from its Thrift-level
// representation. The Thrift-level representation may be obtained
// from a ThriftRW protocol implementation.
//
// An error is returned if we were unable to build a Foo struct
// from the provided intermediate representation.
//
//	x, err := binaryProtocol.Decode(reader, wire.TStruct)
//	if err != nil {
//	  return nil, err
//	}
//
//	var v Foo
//	if err := v.FromWire(x); err != nil {
//	  return nil, err
//	}
//	return &v, nil
func (v *Foo) FromWire(w wire.Value) error {

	for _, field := range w.GetStruct().Fields {
		switch field.ID {
		}
	}

	return nil
}

// Encode serializes a Foo struct directly into bytes, without going
// through an intermediary type.
//
// An error is returned if a Foo struct could not be encoded.
func (v *Foo) Encode(sw stream.Writer) error {
	if err := sw.WriteStructBegin(); err != nil {
		return err
	}

	return sw.WriteStructEnd()
}

// Decode deserializes a Foo struct directly from its Thrift-level
// representation, without going through an intemediary type.
//
// An error is returned if a Foo struct could not be generated from the wire
// representation.
func (v *Foo) Decode(sr stream.Reader) error {

	if err := sr.ReadStructBegin(); err != nil {
		return err
	}

	fh, ok, err := sr.ReadFieldBegin()
	if err != nil {
		return err
	}

	for ok {
		switch {
		default:
			if err := sr.Skip(fh.Type); err != nil {
				return err
			}
		}

		if err := sr.ReadFieldEnd(); err != nil {
			return err
		}

		if fh, ok, err = sr.ReadFieldBegin(); err != nil {
			return err
		}
	}

	if err := sr.ReadStructEnd(); err != nil {
		return err
	}

	return nil
}

// String returns a readable string representation of a Foo
// struct.
func (v *Foo) String() string {
	if v == nil {
		return "<nil>"
	}

	var fields [0]string
	i := 0

	return fmt.Sprintf("Foo{%v}", strings.Join(fields[:i], ", "))
}

// Equals returns true if all the fields of this Foo match the
// provided Foo.
//
// This function performs a deep comparison.
func (v *Foo) Equals(rhs *Foo) bool {
	if v == nil {
		return rhs == nil
	} else if rhs == nil {
		return false
	}

	return true
}

// MarshalLogObject implements zapcore.ObjectMarshaler, enabling
// fast logging of Foo.
func (v *Foo) MarshalLogObject(enc zapcore.ObjectEncoder) (err error) {
	if v == nil {
		return nil
	}
	return err
}

type NotModified struct {
}

// ToWire translates a NotModified struct into a Thrift-level intermediate
// representation. This intermediate representation may be serialized
// into bytes using a ThriftRW protocol implementation.
//
// An error is returned if the struct or any of its fields failed to
// validate.
//
//	x, err := v.ToWire()
//	if err != nil {
//	  return err
//	}
//
//	if err := binaryProtocol.Encode(x, writer); err != nil {
//	  return err
//	}
func (v *NotModified) ToWire() (wire.Value, error) {
	var (
		fields [0]wire.Field
		i      int = 0
	)

	return wire.NewValueStruct(wire.Struct{Fields: fields[:i]}), nil
}

// FromWire deserializes a NotModified struct from its Thrift-level
// representation. The Thrift-level representation may be obtained
// from a ThriftRW protocol implementation.
//
// An error is returned if we were unable to build a NotModified struct
// from the provided intermediate representation.
//
//	x, err := binaryProtocol.Decode(reader, wire.TStruct)
//	if err != nil {
//	  return nil, err
//	}
//
//	var v NotModified
//	if err := v.FromWire(x); err != nil {
//	  return nil, err
//	}
//	return &v, nil
func (v *NotModified) FromWire(w wire.Value) error {

	for _, field := range w.GetStruct().Fields {
		switch field.ID {
		}
	}

	return nil
}

// Encode serializes a NotModified struct directly into bytes, without going
// through an intermediary type.
//
// An error is returned if a NotModified struct could not be encoded.
func (v *NotModified) Encode(sw stream.Writer) error {
	if err := sw.WriteStructBegin(); err != nil {
		return err
	}

	return sw.WriteStructEnd()
}

// Decode deserializes a NotModified struct directly from its Thrift-level
// representation, without going through an intemediary type.
//
// An error is returned if a NotModified struct could not be generated from the wire
// representation.
func (v *NotModified) Decode(sr stream.Reader) error {

	if err := sr.ReadStructBegin(); err != nil {
		return err
	}

	fh, ok, err := sr.ReadFieldBegin()
	if err != nil {
		return err
	}

	for ok {
		switch {
		default:
			if err := sr.Skip(fh.Type); err != nil {
				return err
			}
		}

		if err := sr.ReadFieldEnd(); err != nil {
			return err
		}

		if fh, ok, err = sr.ReadFieldBegin(); err != nil {
			return err
		}
	}

	if err := sr.ReadStructEnd(); err != nil {
		return err
	}

	return nil
}

// String returns a readable string representation of a NotModified
// struct.
func (v *NotModified) String() string {
	if v == nil {
		return "<nil>"
	}

	var fields [0]string
	i := 0

	return fmt.Sprintf("NotModified{%v}", strings.Join(fields[:i], ", "))
}

// ErrorName is the name of this type as defined in the Thrift
// file.
func (*NotModified) ErrorName() string {
	return "NotModified"
}

// Equals returns true if all the fields of this NotModified match the
// provided NotModified.
//
// This function performs a deep comparison.
func (v *NotModified) Equals(rhs *NotModified) bool {
	if v == nil {
		return rhs == nil
	} else if rhs == nil {
		return false
	}

	return true
}

// MarshalLogObject implements zapcore.ObjectMarshaler, enabling
// fast logging of NotModified.
func (v *NotModified) MarshalLogObject(enc zapcore.ObjectEncoder) (err error) {
	if v == nil {
		return nil
	}
	return err
}

func (v *NotModified) Error() string {
	return v.String()
}

// Corge_EchoBool_Args represents the arguments for the Corge.echoBool function.
//
// The arguments for echoBool are sent and received over the wire as this struct.
type Corge_EchoBool_Args struct {
	Arg bool `json:"arg,required"`
}

// ToWire translates a Corge_EchoBool_Args struct into a Thrift-level intermediate
// representation. This intermediate representation may be serialized
// into bytes using a ThriftRW protocol implementation.
//
// An error is returned if the struct or any of its fields failed to
// validate.
//
//	x, err := v.ToWire()
//	if err != nil {
//	  return err
//	}
//
//	if err := binaryProtocol.Encode(x, writer); err != nil {
//	  return err
//	}
func (v *Corge_EchoBool_Args) ToWire() (wire.Value, error) {
	var (
		fields [1]wire.Field
		i      int = 0
		w      wire.Value
		err    error
	)

	w, err = wire.NewValueBool(v.Arg), error(nil)
	if err != nil {
		return w, err
	}
	fields[i] = wire.Field{ID: 1, Value: w}
	i++

	return wire.NewValueStruct(wire.Struct{Fields: fields[:i]}), nil
}

// FromWire deserializes a Corge_EchoBool_Args struct from its Thrift-level
// representation. The Thrift-level representation may be obtained
// from a ThriftRW protocol implementation.
//
// An error is returned if we were unable to build a Corge_EchoBool_Args struct
// from the provided intermediate representation.
//
//	x, err := binaryProtocol.Decode(reader, wire.TStruct)
//	if err != nil {
//	  return nil, err
//	}
//
//	var v Corge_EchoBool_Args
//	if err := v.FromWire(x); err != nil {
//	  return nil, err
//	}
//	return &v, nil
func (v *Corge_EchoBool_Args) FromWire(w wire.Value) error {
	var err error

	argIsSet := false

	for _, field := range w.GetStruct().Fields {
		switch field.ID {
		case 1:
			if field.Value.Type() == wire.TBool {
				v.Arg, err = field.Value.GetBool(), error(nil)
				if err != nil {
					return err
				}
				argIsSet = true
			}
		}
	}

	if !argIsSet {
		return errors.New("field Arg of Corge_EchoBool_Args is required")
	}

	return nil
}

// Encode serializes a Corge_EchoBool_Args struct directly into bytes, without going
// through an intermediary type.
//
// An error is returned if a Corge_EchoBool_Args struct could not be encoded.
func (v *Corge_EchoBool_Args) Encode(sw stream.Writer) error {
	if err := sw.WriteStructBegin(); err != nil {
		return err
	}

	if err := sw.WriteFieldBegin(stream.FieldHeader{ID: 1, Type: wire.TBool}); err != nil {
		return err
	}
	if err := sw.WriteBool(v.Arg); err != nil {
		return err
	}
	if err := sw.WriteFieldEnd(); err != nil {
		return err
	}

	return sw.WriteStructEnd()
}

// Decode deserializes a Corge_EchoBool_Args struct directly from its Thrift-level
// representation, without going through an intemediary type.
//
// An error is returned if a Corge_EchoBool_Args struct could not be generated from the wire
// representation.
func (v *Corge_EchoBool_Args) Decode(sr stream.Reader) error {

	argIsSet := false

	if err := sr.ReadStructBegin(); err != nil {
		return err
	}

	fh, ok, err := sr.ReadFieldBegin()
	if err != nil {
		return err
	}

	for ok {
		switch {
		case fh.ID == 1 && fh.Type == wire.TBool:
			v.Arg, err = sr.ReadBool()
			if err != nil {
				return err
			}
			argIsSet = true
		default:
			if err := sr.Skip(fh.Type); err != nil {
				return err
			}
		}

		if err := sr.ReadFieldEnd(); err != nil {
			return err
		}

		if fh, ok, err = sr.ReadFieldBegin(); err != nil {
			return err
		}
	}

	if err := sr.ReadStructEnd(); err != nil {
		return err
	}

	if !argIsSet {
		return errors.New("field Arg of Corge_EchoBool_Args is required")
	}

	return nil
}

// String returns a readable string representation of a Corge_EchoBool_Args
// struct.
func (v *Corge_EchoBool_Args) String() string {
	if v == nil {
		return "<nil>"
	}

	var fields [1]string
	i := 0
	fields[i] = fmt.Sprintf("Arg: %v", v.Arg)
	i++

	return fmt.Sprintf("Corge_EchoBool_Args{%v}", strings.Join(fields[:i], ", "))
}

// Equals returns true if all the fields of this Corge_EchoBool_Args match the
// provided Corge_EchoBool_Args.
//
// This function performs a deep comparison.
func (v *Corge_EchoBool_Args) Equals(rhs *Corge_EchoBool_Args) bool {
	if v == nil {
		return rhs == nil
	} else if rhs == nil {
		return false
	}
	if !(v.Arg == rhs.Arg) {
		return false
	}

	return true
}

// MarshalLogObject implements zapcore.ObjectMarshaler, enabling
// fast logging of Corge_EchoBool_Args.
func (v *Corge_EchoBool_Args) MarshalLogObject(enc zapcore.ObjectEncoder) (err error) {
	if v == nil {
		return nil
	}
	enc.AddBool("arg", v.Arg)
	return err
}

// GetArg returns the value of Arg if it is set or its
// zero value if it is unset.
func (v *Corge_EchoBool_Args) GetArg() (o bool) {
	if v != nil {
		o = v.Arg
	}
	return
}

// MethodName returns the name of the Thrift function as specified in
// the IDL, for which this struct represent the arguments.
//
// This will always be "echoBool" for this struct.
func (v *Corge_EchoBool_Args) MethodName() string {
	return "echoBool"
}

// EnvelopeType returns the kind of value inside this struct.
//
// This will always be Call for this struct.
func (v *Corge_EchoBool_Args) EnvelopeType() wire.EnvelopeType {
	return wire.Call
}

// Corge_EchoBool_Helper provides functions that aid in handling the
// parameters and return values of the Corge.echoBool
// function.
var Corge_EchoBool_Helper = struct {
	// Args accepts the parameters of echoBool in-order and returns
	// the arguments struct for the function.
	Args func(
		arg bool,
	) *Corge_EchoBool_Args

	// IsException returns true if the given error can be thrown
	// by echoBool.
	//
	// An error can be thrown by echoBool only if the
	// corresponding exception type was mentioned in the 'throws'
	// section for it in the Thrift file.
	IsException func(error) bool

	// WrapResponse returns the result struct for echoBool
	// given its return value and error.
	//
	// This allows mapping values and errors returned by
	// echoBool into a serializable result struct.
	// WrapResponse returns a non-nil error if the provided
	// error cannot be thrown by echoBool
	//
	//   value, err := echoBool(args)
	//   result, err := Corge_EchoBool_Helper.WrapResponse(value, err)
	//   if err != nil {
	//     return fmt.Errorf("unexpected error from echoBool: %v", err)
	//   }
	//   serialize(result)
	WrapResponse func(bool, error) (*Corge_EchoBool_Result, error)

	// UnwrapResponse takes the result struct for echoBool
	// and returns the value or error returned by it.
	//
	// The error is non-nil only if echoBool threw an
	// exception.
	//
	//   result := deserialize(bytes)
	//   value, err := Corge_EchoBool_Helper.UnwrapResponse(result)
	UnwrapResponse func(*Corge_EchoBool_Result) (bool, error)
}{}

func init() {
	Corge_EchoBool_Helper.Args = func(
		arg bool,
	) *Corge_EchoBool_Args {
		return &Corge_EchoBool_Args{
			Arg: arg,
		}
	}

	Corge_EchoBool_Helper.IsException = func(err error) bool {
		switch err.(type) {
		default:
			return false
		}
	}

	Corge_EchoBool_Helper.WrapResponse = func(success bool, err error) (*Corge_EchoBool_Result, error) {
		if err == nil {
			return &Corge_EchoBool_Result{Success: &success}, nil
		}

		return nil, err
	}
	Corge_EchoBool_Helper.UnwrapResponse = func(result *Corge_EchoBool_Result) (success bool, err error) {

		if result.Success != nil {
			success = *result.Success
			return
		}

		err = errors.New("expected a non-void result")
		return
	}

}

// Corge_EchoBool_Result represents the result of a Corge.echoBool function call.
//
// The result of a echoBool execution is sent and received over the wire as this struct.
//
// Success is set only if the function did not throw an exception.
type Corge_EchoBool_Result struct {
	// Value returned by echoBool after a successful execution.
	Success *bool `json:"success,omitempty"`
}

// ToWire translates a Corge_EchoBool_Result struct into a Thrift-level intermediate
// representation. This intermediate representation may be serialized
// into bytes using a ThriftRW protocol implementation.
//
// An error is returned if the struct or any of its fields failed to
// validate.
//
//	x, err := v.ToWire()
//	if err != nil {
//	  return err
//	}
//
//	if err := binaryProtocol.Encode(x, writer); err != nil {
//	  return err
//	}
func (v *Corge_EchoBool_Result) ToWire() (wire.Value, error) {
	var (
		fields [1]wire.Field
		i      int = 0
		w      wire.Value
		err    error
	)

	if v.Success != nil {
		w, err = wire.NewValueBool(*(v.Success)), error(nil)
		if err != nil {
			return w, err
		}
		fields[i] = wire.Field{ID: 0, Value: w}
		i++
	}

	if i != 1 {
		return wire.Value{}, fmt.Errorf("Corge_EchoBool_Result should have exactly one field: got %v fields", i)
	}

	return wire.NewValueStruct(wire.Struct{Fields: fields[:i]}), nil
}

// FromWire deserializes a Corge_EchoBool_Result struct from its Thrift-level
// representation. The Thrift-level representation may be obtained
// from a ThriftRW protocol implementation.
//
// An error is returned if we were unable to build a Corge_EchoBool_Result struct
// from the provided intermediate representation.
//
//	x, err := binaryProtocol.Decode(reader, wire.TStruct)
//	if err != nil {
//	  return nil, err
//	}
//
//	var v Corge_EchoBool_Result
//	if err := v.FromWire(x); err != nil {
//	  return nil, err
//	}
//	return &v, nil
func (v *Corge_EchoBool_Result) FromWire(w wire.Value) error {
	var err error

	for _, field := range w.GetStruct().Fields {
		switch field.ID {
		case 0:
			if field.Value.Type() == wire.TBool {
				var x bool
				x, err = field.Value.GetBool(), error(nil)
				v.Success = &x
				if err != nil {
					return err
				}

			}
		}
	}

	count := 0
	if v.Success != nil {
		count++
	}
	if count != 1 {
		return fmt.Errorf("Corge_EchoBool_Result should have exactly one field: got %v fields", count)
	}

	return nil
}

// Encode serializes a Corge_EchoBool_Result struct directly into bytes, without going
// through an intermediary type.
//
// An error is returned if a Corge_EchoBool_Result struct could not be encoded.
func (v *Corge_EchoBool_Result) Encode(sw stream.Writer) error {
	if err := sw.WriteStructBegin(); err != nil {
		return err
	}

	if v.Success != nil {
		if err := sw.WriteFieldBegin(stream.FieldHeader{ID: 0, Type: wire.TBool}); err != nil {
			return err
		}
		if err := sw.WriteBool(*(v.Success)); err != nil {
			return err
		}
		if err := sw.WriteFieldEnd(); err != nil {
			return err
		}
	}

	count := 0
	if v.Success != nil {
		count++
	}

	if count != 1 {
		return fmt.Errorf("Corge_EchoBool_Result should have exactly one field: got %v fields", count)
	}

	return sw.WriteStructEnd()
}

// Decode deserializes a Corge_EchoBool_Result struct directly from its Thrift-level
// representation, without going through an intemediary type.
//
// An error is returned if a Corge_EchoBool_Result struct could not be generated from the wire
// representation.
func (v *Corge_EchoBool_Result) Decode(sr stream.Reader) error {

	if err := sr.ReadStructBegin(); err != nil {
		return err
	}

	fh, ok, err := sr.ReadFieldBegin()
	if err != nil {
		return err
	}

	for ok {
		switch {
		case fh.ID == 0 && fh.Type == wire.TBool:
			var x bool
			x, err = sr.ReadBool()
			v.Success = &x
			if err != nil {
				return err
			}

		default:
			if err := sr.Skip(fh.Type); err != nil {
				return err
			}
		}

		if err := sr.ReadFieldEnd(); err != nil {
			return err
		}

		if fh, ok, err = sr.ReadFieldBegin(); err != nil {
			return err
		}
	}

	if err := sr.ReadStructEnd(); err != nil {
		return err
	}

	count := 0
	if v.Success != nil {
		count++
	}
	if count != 1 {
		return fmt.Errorf("Corge_EchoBool_Result should have exactly one field: got %v fields", count)
	}

	return nil
}

// String returns a readable string representation of a Corge_EchoBool_Result
// struct.
func (v *Corge_EchoBool_Result) String() string {
	if v == nil {
		return "<nil>"
	}

	var fields [1]string
	i := 0
	if v.Success != nil {
		fields[i] = fmt.Sprintf("Success: %v", *(v.Success))
		i++
	}

	return fmt.Sprintf("Corge_EchoBool_Result{%v}", strings.Join(fields[:i], ", "))
}

func _Bool_EqualsPtr(lhs, rhs *bool) bool {
	if lhs != nil && rhs != nil {

		x := *lhs
		y := *rhs
		return (x == y)
	}
	return lhs == nil && rhs == nil
}

// Equals returns true if all the fields of this Corge_EchoBool_Result match the
// provided Corge_EchoBool_Result.
//
// This function performs a deep comparison.
func (v *Corge_EchoBool_Result) Equals(rhs *Corge_EchoBool_Result) bool {
	if v == nil {
		return rhs == nil
	} else if rhs == nil {
		return false
	}
	if !_Bool_EqualsPtr(v.Success, rhs.Success) {
		return false
	}

	return true
}

// MarshalLogObject implements zapcore.ObjectMarshaler, enabling
// fast logging of Corge_EchoBool_Result.
func (v *Corge_EchoBool_Result) MarshalLogObject(enc zapcore.ObjectEncoder) (err error) {
	if v == nil {
		return nil
	}
	if v.Success != nil {
		enc.AddBool("success", *v.Success)
	}
	return err
}

// GetSuccess returns the value of Success if it is set or its
// zero value if it is unset.
func (v *Corge_EchoBool_Result) GetSuccess() (o bool) {
	if v != nil && v.Success != nil {
		return *v.Success
	}

	return
}

// IsSetSuccess returns true if Success is not nil.
func (v *Corge_EchoBool_Result) IsSetSuccess() bool {
	return v != nil && v.Success != nil
}

// MethodName returns the name of the Thrift function as specified in
// the IDL, for which this struct represent the result.
//
// This will always be "echoBool" for this struct.
func (v *Corge_EchoBool_Result) MethodName() string {
	return "echoBool"
}

// EnvelopeType returns the kind of value inside this struct.
//
// This will always be Reply for this struct.
func (v *Corge_EchoBool_Result) EnvelopeType() wire.EnvelopeType {
	return wire.Reply
}

// Corge_EchoString_Args represents the arguments for the Corge.echoString function.
//
// The arguments for echoString are sent and received over the wire as this struct.
type Corge_EchoString_Args struct {
	Arg string `json:"arg,required"`
}

// ToWire translates a Corge_EchoString_Args struct into a Thrift-level intermediate
// representation. This intermediate representation may be serialized
// into bytes using a ThriftRW protocol implementation.
//
// An error is returned if the struct or any of its fields failed to
// validate.
//
//	x, err := v.ToWire()
//	if err != nil {
//	  return err
//	}
//
//	if err := binaryProtocol.Encode(x, writer); err != nil {
//	  return err
//	}
func (v *Corge_EchoString_Args) ToWire() (wire.Value, error) {
	var (
		fields [1]wire.Field
		i      int = 0
		w      wire.Value
		err    error
	)

	w, err = wire.NewValueString(v.Arg), error(nil)
	if err != nil {
		return w, err
	}
	fields[i] = wire.Field{ID: 1, Value: w}
	i++

	return wire.NewValueStruct(wire.Struct{Fields: fields[:i]}), nil
}

// FromWire deserializes a Corge_EchoString_Args struct from its Thrift-level
// representation. The Thrift-level representation may be obtained
// from a ThriftRW protocol implementation.
//
// An error is returned if we were unable to build a Corge_EchoString_Args struct
// from the provided intermediate representation.
//
//	x, err := binaryProtocol.Decode(reader, wire.TStruct)
//	if err != nil {
//	  return nil, err
//	}
//
//	var v Corge_EchoString_Args
//	if err := v.FromWire(x); err != nil {
//	  return nil, err
//	}
//	return &v, nil
func (v *Corge_EchoString_Args) FromWire(w wire.Value) error {
	var err error

	argIsSet := false

	for _, field := range w.GetStruct().Fields {
		switch field.ID {
		case 1:
			if field.Value.Type() == wire.TBinary {
				v.Arg, err = field.Value.GetString(), error(nil)
				if err != nil {
					return err
				}
				argIsSet = true
			}
		}
	}

	if !argIsSet {
		return errors.New("field Arg of Corge_EchoString_Args is required")
	}

	return nil
}

// Encode serializes a Corge_EchoString_Args struct directly into bytes, without going
// through an intermediary type.
//
// An error is returned if a Corge_EchoString_Args struct could not be encoded.
func (v *Corge_EchoString_Args) Encode(sw stream.Writer) error {
	if err := sw.WriteStructBegin(); err != nil {
		return err
	}

	if err := sw.WriteFieldBegin(stream.FieldHeader{ID: 1, Type: wire.TBinary}); err != nil {
		return err
	}
	if err := sw.WriteString(v.Arg); err != nil {
		return err
	}
	if err := sw.WriteFieldEnd(); err != nil {
		return err
	}

	return sw.WriteStructEnd()
}

// Decode deserializes a Corge_EchoString_Args struct directly from its Thrift-level
// representation, without going through an intemediary type.
//
// An error is returned if a Corge_EchoString_Args struct could not be generated from the wire
// representation.
func (v *Corge_EchoString_Args) Decode(sr stream.Reader) error {

	argIsSet := false

	if err := sr.ReadStructBegin(); err != nil {
		return err
	}

	fh, ok, err := sr.ReadFieldBegin()
	if err != nil {
		return err
	}

	for ok {
		switch {
		case fh.ID == 1 && fh.Type == wire.TBinary:
			v.Arg, err = sr.ReadString()
			if err != nil {
				return err
			}
			argIsSet = true
		default:
			if err := sr.Skip(fh.Type); err != nil {
				return err
			}
		}

		if err := sr.ReadFieldEnd(); err != nil {
			return err
		}

		if fh, ok, err = sr.ReadFieldBegin(); err != nil {
			return err
		}
	}

	if err := sr.ReadStructEnd(); err != nil {
		return err
	}

	if !argIsSet {
		return errors.New("field Arg of Corge_EchoString_Args is required")
	}

	return nil
}

// String returns a readable string representation of a Corge_EchoString_Args
// struct.
func (v *Corge_EchoString_Args) String() string {
	if v == nil {
		return "<nil>"
	}

	var fields [1]string
	i := 0
	fields[i] = fmt.Sprintf("Arg: %v", v.Arg)
	i++

	return fmt.Sprintf("Corge_EchoString_Args{%v}", strings.Join(fields[:i], ", "))
}

// Equals returns true if all the fields of this Corge_EchoString_Args match the
// provided Corge_EchoString_Args.
//
// This function performs a deep comparison.
func (v *Corge_EchoString_Args) Equals(rhs *Corge_EchoString_Args) bool {
	if v == nil {
		return rhs == nil
	} else if rhs == nil {
		return false
	}
	if !(v.Arg == rhs.Arg) {
		return false
	}

	return true
}

// MarshalLogObject implements zapcore.ObjectMarshaler, enabling
// fast logging of Corge_EchoString_Args.
func (v *Corge_EchoString_Args) MarshalLogObject(enc zapcore.ObjectEncoder) (err error) {
	if v == nil {
		return nil
	}
	enc.AddString("arg", v.Arg)
	return err
}

// GetArg returns the value of Arg if it is set or its
// zero value if it is unset.
func (v *Corge_EchoString_Args) GetArg() (o string) {
	if v != nil {
		o = v.Arg
	}
	return
}

// MethodName returns the name of the Thrift function as specified in
// the IDL, for which this struct represent the arguments.
//
// This will always be "echoString" for this struct.
func (v *Corge_EchoString_Args) MethodName() string {
	return "echoString"
}

// EnvelopeType returns the kind of value inside this struct.
//
// This will always be Call for this struct.
func (v *Corge_EchoString_Args) EnvelopeType() wire.EnvelopeType {
	return wire.Call
}

// Corge_EchoString_Helper provides functions that aid in handling the
// parameters and return values of the Corge.echoString
// function.
var Corge_EchoString_Helper = struct {
	// Args accepts the parameters of echoString in-order and returns
	// the arguments struct for the function.
	Args func(
		arg string,
	) *Corge_EchoString_Args

	// IsException returns true if the given error can be thrown
	// by echoString.
	//
	// An error can be thrown by echoString only if the
	// corresponding exception type was mentioned in the 'throws'
	// section for it in the Thrift file.
	IsException func(error) bool

	// WrapResponse returns the result struct for echoString
	// given its return value and error.
	//
	// This allows mapping values and errors returned by
	// echoString into a serializable result struct.
	// WrapResponse returns a non-nil error if the provided
	// error cannot be thrown by echoString
	//
	//   value, err := echoString(args)
	//   result, err := Corge_EchoString_Helper.WrapResponse(value, err)
	//   if err != nil {
	//     return fmt.Errorf("unexpected error from echoString: %v", err)
	//   }
	//   serialize(result)
	WrapResponse func(string, error) (*Corge_EchoString_Result, error)

	// UnwrapResponse takes the result struct for echoString
	// and returns the value or error returned by it.
	//
	// The error is non-nil only if echoString threw an
	// exception.
	//
	//   result := deserialize(bytes)
	//   value, err := Corge_EchoString_Helper.UnwrapResponse(result)
	UnwrapResponse func(*Corge_EchoString_Result) (string, error)
}{}

func init() {
	Corge_EchoString_Helper.Args = func(
		arg string,
	) *Corge_EchoString_Args {
		return &Corge_EchoString_Args{
			Arg: arg,
		}
	}

	Corge_EchoString_Helper.IsException = func(err error) bool {
		switch err.(type) {
		default:
			return false
		}
	}

	Corge_EchoString_Helper.WrapResponse = func(success string, err error) (*Corge_EchoString_Result, error) {
		if err == nil {
			return &Corge_EchoString_Result{Success: &success}, nil
		}

		return nil, err
	}
	Corge_EchoString_Helper.UnwrapResponse = func(result *Corge_EchoString_Result) (success string, err error) {

		if result.Success != nil {
			success = *result.Success
			return
		}

		err = errors.New("expected a non-void result")
		return
	}

}

// Corge_EchoString_Result represents the result of a Corge.echoString function call.
//
// The result of a echoString execution is sent and received over the wire as this struct.
//
// Success is set only if the function did not throw an exception.
type Corge_EchoString_Result struct {
	// Value returned by echoString after a successful execution.
	Success *string `json:"success,omitempty"`
}

// ToWire translates a Corge_EchoString_Result struct into a Thrift-level intermediate
// representation. This intermediate representation may be serialized
// into bytes using a ThriftRW protocol implementation.
//
// An error is returned if the struct or any of its fields failed to
// validate.
//
//	x, err := v.ToWire()
//	if err != nil {
//	  return err
//	}
//
//	if err := binaryProtocol.Encode(x, writer); err != nil {
//	  return err
//	}
func (v *Corge_EchoString_Result) ToWire() (wire.Value, error) {
	var (
		fields [1]wire.Field
		i      int = 0
		w      wire.Value
		err    error
	)

	if v.Success != nil {
		w, err = wire.NewValueString(*(v.Success)), error(nil)
		if err != nil {
			return w, err
		}
		fields[i] = wire.Field{ID: 0, Value: w}
		i++
	}

	if i != 1 {
		return wire.Value{}, fmt.Errorf("Corge_EchoString_Result should have exactly one field: got %v fields", i)
	}

	return wire.NewValueStruct(wire.Struct{Fields: fields[:i]}), nil
}

// FromWire deserializes a Corge_EchoString_Result struct from its Thrift-level
// representation. The Thrift-level representation may be obtained
// from a ThriftRW protocol implementation.
//
// An error is returned if we were unable to build a Corge_EchoString_Result struct
// from the provided intermediate representation.
//
//	x, err := binaryProtocol.Decode(reader, wire.TStruct)
//	if err != nil {
//	  return nil, err
//	}
//
//	var v Corge_EchoString_Result
//	if err := v.FromWire(x); err != nil {
//	  return nil, err
//	}
//	return &v, nil
func (v *Corge_EchoString_Result) FromWire(w wire.Value) error {
	var err error

	for _, field := range w.GetStruct().Fields {
		switch field.ID {
		case 0:
			if field.Value.Type() == wire.TBinary {
				var x string
				x, err = field.Value.GetString(), error(nil)
				v.Success = &x
				if err != nil {
					return err
				}

			}
		}
	}

	count := 0
	if v.Success != nil {
		count++
	}
	if count != 1 {
		return fmt.Errorf("Corge_EchoString_Result should have exactly one field: got %v fields", count)
	}

	return nil
}

// Encode serializes a Corge_EchoString_Result struct directly into bytes, without going
// through an intermediary type.
//
// An error is returned if a Corge_EchoString_Result struct could not be encoded.
func (v *Corge_EchoString_Result) Encode(sw stream.Writer) error {
	if err := sw.WriteStructBegin(); err != nil {
		return err
	}

	if v.Success != nil {
		if err := sw.WriteFieldBegin(stream.FieldHeader{ID: 0, Type: wire.TBinary}); err != nil {
			return err
		}
		if err := sw.WriteString(*(v.Success)); err != nil {
			return err
		}
		if err := sw.WriteFieldEnd(); err != nil {
			return err
		}
	}

	count := 0
	if v.Success != nil {
		count++
	}

	if count != 1 {
		return fmt.Errorf("Corge_EchoString_Result should have exactly one field: got %v fields", count)
	}

	return sw.WriteStructEnd()
}

// Decode deserializes a Corge_EchoString_Result struct directly from its Thrift-level
// representation, without going through an intemediary type.
//
// An error is returned if a Corge_EchoString_Result struct could not be generated from the wire
// representation.
func (v *Corge_EchoString_Result) Decode(sr stream.Reader) error {

	if err := sr.ReadStructBegin(); err != nil {
		return err
	}

	fh, ok, err := sr.ReadFieldBegin()
	if err != nil {
		return err
	}

	for ok {
		switch {
		case fh.ID == 0 && fh.Type == wire.TBinary:
			var x string
			x, err = sr.ReadString()
			v.Success = &x
			if err != nil {
				return err
			}

		default:
			if err := sr.Skip(fh.Type); err != nil {
				return err
			}
		}

		if err := sr.ReadFieldEnd(); err != nil {
			return err
		}

		if fh, ok, err = sr.ReadFieldBegin(); err != nil {
			return err
		}
	}

	if err := sr.ReadStructEnd(); err != nil {
		return err
	}

	count := 0
	if v.Success != nil {
		count++
	}
	if count != 1 {
		return fmt.Errorf("Corge_EchoString_Result should have exactly one field: got %v fields", count)
	}

	return nil
}

// String returns a readable string representation of a Corge_EchoString_Result
// struct.
func (v *Corge_EchoString_Result) String() string {
	if v == nil {
		return "<nil>"
	}

	var fields [1]string
	i := 0
	if v.Success != nil {
		fields[i] = fmt.Sprintf("Success: %v", *(v.Success))
		i++
	}

	return fmt.Sprintf("Corge_EchoString_Result{%v}", strings.Join(fields[:i], ", "))
}

func _String_EqualsPtr(lhs, rhs *string) bool {
	if lhs != nil && rhs != nil {

		x := *lhs
		y := *rhs
		return (x == y)
	}
	return lhs == nil && rhs == nil
}

// Equals returns true if all the fields of this Corge_EchoString_Result match the
// provided Corge_EchoString_Result.
//
// This function performs a deep comparison.
func (v *Corge_EchoString_Result) Equals(rhs *Corge_EchoString_Result) bool {
	if v == nil {
		return rhs == nil
	} else if rhs == nil {
		return false
	}
	if !_String_EqualsPtr(v.Success, rhs.Success) {
		return false
	}

	return true
}

// MarshalLogObject implements zapcore.ObjectMarshaler, enabling
// fast logging of Corge_EchoString_Result.
func (v *Corge_EchoString_Result) MarshalLogObject(enc zapcore.ObjectEncoder) (err error) {
	if v == nil {
		return nil
	}
	if v.Success != nil {
		enc.AddString("success", *v.Success)
	}
	return err
}

// GetSuccess returns the value of Success if it is set or its
// zero value if it is unset.
func (v *Corge_EchoString_Result) GetSuccess() (o string) {
	if v != nil && v.Success != nil {
		return *v.Success
	}

	return
}

// IsSetSuccess returns true if Success is not nil.
func (v *Corge_EchoString_Result) IsSetSuccess() bool {
	return v != nil && v.Success != nil
}

// MethodName returns the name of the Thrift function as specified in
// the IDL, for which this struct represent the result.
//
// This will always be "echoString" for this struct.
func (v *Corge_EchoString_Result) MethodName() string {
	return "echoString"
}

// EnvelopeType returns the kind of value inside this struct.
//
// This will always be Reply for this struct.
func (v *Corge_EchoString_Result) EnvelopeType() wire.EnvelopeType {
	return wire.Reply
}

// Corge_NoContent_Args represents the arguments for the Corge.noContent function.
//
// The arguments for noContent are sent and received over the wire as this struct.
type Corge_NoContent_Args struct {
	Arg bool `json:"arg,required"`
}

// ToWire translates a Corge_NoContent_Args struct into a Thrift-level intermediate
// representation. This intermediate representation may be serialized
// into bytes using a ThriftRW protocol implementation.
//
// An error is returned if the struct or any of its fields failed to
// validate.
//
//	x, err := v.ToWire()
//	if err != nil {
//	  return err
//	}
//
//	if err := binaryProtocol.Encode(x, writer); err != nil {
//	  return err
//	}
func (v *Corge_NoContent_Args) ToWire() (wire.Value, error) {
	var (
		fields [1]wire.Field
		i      int = 0
		w      wire.Value
		err    error
	)

	w, err = wire.NewValueBool(v.Arg), error(nil)
	if err != nil {
		return w, err
	}
	fields[i] = wire.Field{ID: 1, Value: w}
	i++

	return wire.NewValueStruct(wire.Struct{Fields: fields[:i]}), nil
}

// FromWire deserializes a Corge_NoContent_Args struct from its Thrift-level
// representation. The Thrift-level representation may be obtained
// from a ThriftRW protocol implementation.
//
// An error is returned if we were unable to build a Corge_NoContent_Args struct
// from the provided intermediate representation.
//
//	x, err := binaryProtocol.Decode(reader, wire.TStruct)
//	if err != nil {
//	  return nil, err
//	}
//
//	var v Corge_NoContent_Args
//	if err := v.FromWire(x); err != nil {
//	  return nil, err
//	}
//	return &v, nil
func (v *Corge_NoContent_Args) FromWire(w wire.Value) error {
	var err error

	argIsSet := false

	for _, field := range w.GetStruct().Fields {
		switch field.ID {
		case 1:
			if field.Value.Type() == wire.TBool {
				v.Arg, err = field.Value.GetBool(), error(nil)
				if err != nil {
					return err
				}
				argIsSet = true
			}
		}
	}

	if !argIsSet {
		return errors.New("field Arg of Corge_NoContent_Args is required")
	}

	return nil
}

// Encode serializes a Corge_NoContent_Args struct directly into bytes, without going
// through an intermediary type.
//
// An error is returned if a Corge_NoContent_Args struct could not be encoded.
func (v *Corge_NoContent_Args) Encode(sw stream.Writer) error {
	if err := sw.WriteStructBegin(); err != nil {
		return err
	}

	if err := sw.WriteFieldBegin(stream.FieldHeader{ID: 1, Type: wire.TBool}); err != nil {
		return err
	}
	if err := sw.WriteBool(v.Arg); err != nil {
		return err
	}
	if err := sw.WriteFieldEnd(); err != nil {
		return err
	}

	return sw.WriteStructEnd()
}

// Decode deserializes a Corge_NoContent_Args struct directly from its Thrift-level
// representation, without going through an intemediary type.
//
// An error is returned if a Corge_NoContent_Args struct could not be generated from the wire
// representation.
func (v *Corge_NoContent_Args) Decode(sr stream.Reader) error {

	argIsSet := false

	if err := sr.ReadStructBegin(); err != nil {
		return err
	}

	fh, ok, err := sr.ReadFieldBegin()
	if err != nil {
		return err
	}

	for ok {
		switch {
		case fh.ID == 1 && fh.Type == wire.TBool:
			v.Arg, err = sr.ReadBool()
			if err != nil {
				return err
			}
			argIsSet = true
		default:
			if err := sr.Skip(fh.Type); err != nil {
				return err
			}
		}

		if err := sr.ReadFieldEnd(); err != nil {
			return err
		}

		if fh, ok, err = sr.ReadFieldBegin(); err != nil {
			return err
		}
	}

	if err := sr.ReadStructEnd(); err != nil {
		return err
	}

	if !argIsSet {
		return errors.New("field Arg of Corge_NoContent_Args is required")
	}

	return nil
}

// String returns a readable string representation of a Corge_NoContent_Args
// struct.
func (v *Corge_NoContent_Args) String() string {
	if v == nil {
		return "<nil>"
	}

	var fields [1]string
	i := 0
	fields[i] = fmt.Sprintf("Arg: %v", v.Arg)
	i++

	return fmt.Sprintf("Corge_NoContent_Args{%v}", strings.Join(fields[:i], ", "))
}

// Equals returns true if all the fields of this Corge_NoContent_Args match the
// provided Corge_NoContent_Args.
//
// This function performs a deep comparison.
func (v *Corge_NoContent_Args) Equals(rhs *Corge_NoContent_Args) bool {
	if v == nil {
		return rhs == nil
	} else if rhs == nil {
		return false
	}
	if !(v.Arg == rhs.Arg) {
		return false
	}

	return true
}

// MarshalLogObject implements zapcore.ObjectMarshaler, enabling
// fast logging of Corge_NoContent_Args.
func (v *Corge_NoContent_Args) MarshalLogObject(enc zapcore.ObjectEncoder) (err error) {
	if v == nil {
		return nil
	}
	enc.AddBool("arg", v.Arg)
	return err
}

// GetArg returns the value of Arg if it is set or its
// zero value if it is unset.
func (v *Corge_NoContent_Args) GetArg() (o bool) {
	if v != nil {
		o = v.Arg
	}
	return
}

// MethodName returns the name of the Thrift function as specified in
// the IDL, for which this struct represent the arguments.
//
// This will always be "noContent" for this struct.
func (v *Corge_NoContent_Args) MethodName() string {
	return "noContent"
}

// EnvelopeType returns the kind of value inside this struct.
//
// This will always be Call for this struct.
func (v *Corge_NoContent_Args) EnvelopeType() wire.EnvelopeType {
	return wire.Call
}

// Corge_NoContent_Helper provides functions that aid in handling the
// parameters and return values of the Corge.noContent
// function.
var Corge_NoContent_Helper = struct {
	// Args accepts the parameters of noContent in-order and returns
	// the arguments struct for the function.
	Args func(
		arg bool,
	) *Corge_NoContent_Args

	// IsException returns true if the given error can be thrown
	// by noContent.
	//
	// An error can be thrown by noContent only if the
	// corresponding exception type was mentioned in the 'throws'
	// section for it in the Thrift file.
	IsException func(error) bool

	// WrapResponse returns the result struct for noContent
	// given the error returned by it. The provided error may
	// be nil if noContent did not fail.
	//
	// This allows mapping errors returned by noContent into a
	// serializable result struct. WrapResponse returns a
	// non-nil error if the provided error cannot be thrown by
	// noContent
	//
	//   err := noContent(args)
	//   result, err := Corge_NoContent_Helper.WrapResponse(err)
	//   if err != nil {
	//     return fmt.Errorf("unexpected error from noContent: %v", err)
	//   }
	//   serialize(result)
	WrapResponse func(error) (*Corge_NoContent_Result, error)

	// UnwrapResponse takes the result struct for noContent
	// and returns the erorr returned by it (if any).
	//
	// The error is non-nil only if noContent threw an
	// exception.
	//
	//   result := deserialize(bytes)
	//   err := Corge_NoContent_Helper.UnwrapResponse(result)
	UnwrapResponse func(*Corge_NoContent_Result) error
}{}

func init() {
	Corge_NoContent_Helper.Args = func(
		arg bool,
	) *Corge_NoContent_Args {
		return &Corge_NoContent_Args{
			Arg: arg,
		}
	}

	Corge_NoContent_Helper.IsException = func(err error) bool {
		switch err.(type) {
		case *NotModified:
			return true
		default:
			return false
		}
	}

	Corge_NoContent_Helper.WrapResponse = func(err error) (*Corge_NoContent_Result, error) {
		if err == nil {
			return &Corge_NoContent_Result{}, nil
		}

		switch e := err.(type) {
		case *NotModified:
			if e == nil {
				return nil, errors.New("WrapResponse received non-nil error type with nil value for Corge_NoContent_Result.NotModified")
			}
			return &Corge_NoContent_Result{NotModified: e}, nil
		}

		return nil, err
	}
	Corge_NoContent_Helper.UnwrapResponse = func(result *Corge_NoContent_Result) (err error) {
		if result.NotModified != nil {
			err = result.NotModified
			return
		}
		return
	}

}

// Corge_NoContent_Result represents the result of a Corge.noContent function call.
//
// The result of a noContent execution is sent and received over the wire as this struct.
type Corge_NoContent_Result struct {
	NotModified *NotModified `json:"notModified,omitempty"`
}

// ToWire translates a Corge_NoContent_Result struct into a Thrift-level intermediate
// representation. This intermediate representation may be serialized
// into bytes using a ThriftRW protocol implementation.
//
// An error is returned if the struct or any of its fields failed to
// validate.
//
//	x, err := v.ToWire()
//	if err != nil {
//	  return err
//	}
//
//	if err := binaryProtocol.Encode(x, writer); err != nil {
//	  return err
//	}
func (v *Corge_NoContent_Result) ToWire() (wire.Value, error) {
	var (
		fields [1]wire.Field
		i      int = 0
		w      wire.Value
		err    error
	)

	if v.NotModified != nil {
		w, err = v.NotModified.ToWire()
		if err != nil {
			return w, err
		}
		fields[i] = wire.Field{ID: 1, Value: w}
		i++
	}

	if i > 1 {
		return wire.Value{}, fmt.Errorf("Corge_NoContent_Result should have at most one field: got %v fields", i)
	}

	return wire.NewValueStruct(wire.Struct{Fields: fields[:i]}), nil
}

func _NotModified_Read(w wire.Value) (*NotModified, error) {
	var v NotModified
	err := v.FromWire(w)
	return &v, err
}

// FromWire deserializes a Corge_NoContent_Result struct from its Thrift-level
// representation. The Thrift-level representation may be obtained
// from a ThriftRW protocol implementation.
//
// An error is returned if we were unable to build a Corge_NoContent_Result struct
// from the provided intermediate representation.
//
//	x, err := binaryProtocol.Decode(reader, wire.TStruct)
//	if err != nil {
//	  return nil, err
//	}
//
//	var v Corge_NoContent_Result
//	if err := v.FromWire(x); err != nil {
//	  return nil, err
//	}
//	return &v, nil
func (v *Corge_NoContent_Result) FromWire(w wire.Value) error {
	var err error

	for _, field := range w.GetStruct().Fields {
		switch field.ID {
		case 1:
			if field.Value.Type() == wire.TStruct {
				v.NotModified, err = _NotModified_Read(field.Value)
				if err != nil {
					return err
				}

			}
		}
	}

	count := 0
	if v.NotModified != nil {
		count++
	}
	if count > 1 {
		return fmt.Errorf("Corge_NoContent_Result should have at most one field: got %v fields", count)
	}

	return nil
}

// Encode serializes a Corge_NoContent_Result struct directly into bytes, without going
// through an intermediary type.
//
// An error is returned if a Corge_NoContent_Result struct could not be encoded.
func (v *Corge_NoContent_Result) Encode(sw stream.Writer) error {
	if err := sw.WriteStructBegin(); err != nil {
		return err
	}

	if v.NotModified != nil {
		if err := sw.WriteFieldBegin(stream.FieldHeader{ID: 1, Type: wire.TStruct}); err != nil {
			return err
		}
		if err := v.NotModified.Encode(sw); err != nil {
			return err
		}
		if err := sw.WriteFieldEnd(); err != nil {
			return err
		}
	}

	count := 0
	if v.NotModified != nil {
		count++
	}

	if count > 1 {
		return fmt.Errorf("Corge_NoContent_Result should have at most one field: got %v fields", count)
	}

	return sw.WriteStructEnd()
}

func _NotModified_Decode(sr stream.Reader) (*NotModified, error) {
	var v NotModified
	err := v.Decode(sr)
	return &v, err
}

// Decode deserializes a Corge_NoContent_Result struct directly from its Thrift-level
// representation, without going through an intemediary type.
//
// An error is returned if a Corge_NoContent_Result struct could not be generated from the wire
// representation.
func (v *Corge_NoContent_Result) Decode(sr stream.Reader) error {

	if err := sr.ReadStructBegin(); err != nil {
		return err
	}

	fh, ok, err := sr.ReadFieldBegin()
	if err != nil {
		return err
	}

	for ok {
		switch {
		case fh.ID == 1 && fh.Type == wire.TStruct:
			v.NotModified, err = _NotModified_Decode(sr)
			if err != nil {
				return err
			}

		default:
			if err := sr.Skip(fh.Type); err != nil {
				return err
			}
		}

		if err := sr.ReadFieldEnd(); err != nil {
			return err
		}

		if fh, ok, err = sr.ReadFieldBegin(); err != nil {
			return err
		}
	}

	if err := sr.ReadStructEnd(); err != nil {
		return err
	}

	count := 0
	if v.NotModified != nil {
		count++
	}
	if count > 1 {
		return fmt.Errorf("Corge_NoContent_Result should have at most one field: got %v fields", count)
	}

	return nil
}

// String returns a readable string representation of a Corge_NoContent_Result
// struct.
func (v *Corge_NoContent_Result) String() string {
	if v == nil {
		return "<nil>"
	}

	var fields [1]string
	i := 0
	if v.NotModified != nil {
		fields[i] = fmt.Sprintf("NotModified: %v", v.NotModified)
		i++
	}

	return fmt.Sprintf("Corge_NoContent_Result{%v}", strings.Join(fields[:i], ", "))
}

// Equals returns true if all the fields of this Corge_NoContent_Result match the
// provided Corge_NoContent_Result.
//
// This function performs a deep comparison.
func (v *Corge_NoContent_Result) Equals(rhs *Corge_NoContent_Result) bool {
	if v == nil {
		return rhs == nil
	} else if rhs == nil {
		return false
	}
	if !((v.NotModified == nil && rhs.NotModified == nil) || (v.NotModified != nil && rhs.NotModified != nil && v.NotModified.Equals(rhs.NotModified))) {
		return false
	}

	return true
}

// MarshalLogObject implements zapcore.ObjectMarshaler, enabling
// fast logging of Corge_NoContent_Result.
func (v *Corge_NoContent_Result) MarshalLogObject(enc zapcore.ObjectEncoder) (err error) {
	if v == nil {
		return nil
	}
	if v.NotModified != nil {
		err = multierr.Append(err, enc.AddObject("notModified", v.NotModified))
	}
	return err
}

// GetNotModified returns the value of NotModified if it is set or its
// zero value if it is unset.
func (v *Corge_NoContent_Result) GetNotModified() (o *NotModified) {
	if v != nil && v.NotModified != nil {
		return v.NotModified
	}

	return
}

// IsSetNotModified returns true if NotModified is not nil.
func (v *Corge_NoContent_Result) IsSetNotModified() bool {
	return v != nil && v.NotModified != nil
}

// MethodName returns the name of the Thrift function as specified in
// the IDL, for which this struct represent the result.
//
// This will always be "noContent" for this struct.
func (v *Corge_NoContent_Result) MethodName() string {
	return "noContent"
}

// EnvelopeType returns the kind of value inside this struct.
//
// This will always be Reply for this struct.
func (v *Corge_NoContent_Result) EnvelopeType() wire.EnvelopeType {
	return wire.Reply
}

// Corge_NoContentNoException_Args represents the arguments for the Corge.noContentNoException function.
//
// The arguments for noContentNoException are sent and received over the wire as this struct.
type Corge_NoContentNoException_Args struct {
	Arg bool `json:"arg,required"`
}

// ToWire translates a Corge_NoContentNoException_Args struct into a Thrift-level intermediate
// representation. This intermediate representation may be serialized
// into bytes using a ThriftRW protocol implementation.
//
// An error is returned if the struct or any of its fields failed to
// validate.
//
//	x, err := v.ToWire()
//	if err != nil {
//	  return err
//	}
//
//	if err := binaryProtocol.Encode(x, writer); err != nil {
//	  return err
//	}
func (v *Corge_NoContentNoException_Args) ToWire() (wire.Value, error) {
	var (
		fields [1]wire.Field
		i      int = 0
		w      wire.Value
		err    error
	)

	w, err = wire.NewValueBool(v.Arg), error(nil)
	if err != nil {
		return w, err
	}
	fields[i] = wire.Field{ID: 1, Value: w}
	i++

	return wire.NewValueStruct(wire.Struct{Fields: fields[:i]}), nil
}

// FromWire deserializes a Corge_NoContentNoException_Args struct from its Thrift-level
// representation. The Thrift-level representation may be obtained
// from a ThriftRW protocol implementation.
//
// An error is returned if we were unable to build a Corge_NoContentNoException_Args struct
// from the provided intermediate representation.
//
//	x, err := binaryProtocol.Decode(reader, wire.TStruct)
//	if err != nil {
//	  return nil, err
//	}
//
//	var v Corge_NoContentNoException_Args
//	if err := v.FromWire(x); err != nil {
//	  return nil, err
//	}
//	return &v, nil
func (v *Corge_NoContentNoException_Args) FromWire(w wire.Value) error {
	var err error

	argIsSet := false

	for _, field := range w.GetStruct().Fields {
		switch field.ID {
		case 1:
			if field.Value.Type() == wire.TBool {
				v.Arg, err = field.Value.GetBool(), error(nil)
				if err != nil {
					return err
				}
				argIsSet = true
			}
		}
	}

	if !argIsSet {
		return errors.New("field Arg of Corge_NoContentNoException_Args is required")
	}

	return nil
}

// Encode serializes a Corge_NoContentNoException_Args struct directly into bytes, without going
// through an intermediary type.
//
// An error is returned if a Corge_NoContentNoException_Args struct could not be encoded.
func (v *Corge_NoContentNoException_Args) Encode(sw stream.Writer) error {
	if err := sw.WriteStructBegin(); err != nil {
		return err
	}

	if err := sw.WriteFieldBegin(stream.FieldHeader{ID: 1, Type: wire.TBool}); err != nil {
		return err
	}
	if err := sw.WriteBool(v.Arg); err != nil {
		return err
	}
	if err := sw.WriteFieldEnd(); err != nil {
		return err
	}

	return sw.WriteStructEnd()
}

// Decode deserializes a Corge_NoContentNoException_Args struct directly from its Thrift-level
// representation, without going through an intemediary type.
//
// An error is returned if a Corge_NoContentNoException_Args struct could not be generated from the wire
// representation.
func (v *Corge_NoContentNoException_Args) Decode(sr stream.Reader) error {

	argIsSet := false

	if err := sr.ReadStructBegin(); err != nil {
		return err
	}

	fh, ok, err := sr.ReadFieldBegin()
	if err != nil {
		return err
	}

	for ok {
		switch {
		case fh.ID == 1 && fh.Type == wire.TBool:
			v.Arg, err = sr.ReadBool()
			if err != nil {
				return err
			}
			argIsSet = true
		default:
			if err := sr.Skip(fh.Type); err != nil {
				return err
			}
		}

		if err := sr.ReadFieldEnd(); err != nil {
			return err
		}

		if fh, ok, err = sr.ReadFieldBegin(); err != nil {
			return err
		}
	}

	if err := sr.ReadStructEnd(); err != nil {
		return err
	}

	if !argIsSet {
		return errors.New("field Arg of Corge_NoContentNoException_Args is required")
	}

	return nil
}

// String returns a readable string representation of a Corge_NoContentNoException_Args
// struct.
func (v *Corge_NoContentNoException_Args) String() string {
	if v == nil {
		return "<nil>"
	}

	var fields [1]string
	i := 0
	fields[i] = fmt.Sprintf("Arg: %v", v.Arg)
	i++

	return fmt.Sprintf("Corge_NoContentNoException_Args{%v}", strings.Join(fields[:i], ", "))
}

// Equals returns true if all the fields of this Corge_NoContentNoException_Args match the
// provided Corge_NoContentNoException_Args.
//
// This function performs a deep comparison.
func (v *Corge_NoContentNoException_Args) Equals(rhs *Corge_NoContentNoException_Args) bool {
	if v == nil {
		return rhs == nil
	} else if rhs == nil {
		return false
	}
	if !(v.Arg == rhs.Arg) {
		return false
	}

	return true
}

// MarshalLogObject implements zapcore.ObjectMarshaler, enabling
// fast logging of Corge_NoContentNoException_Args.
func (v *Corge_NoContentNoException_Args) MarshalLogObject(enc zapcore.ObjectEncoder) (err error) {
	if v == nil {
		return nil
	}
	enc.AddBool("arg", v.Arg)
	return err
}

// GetArg returns the value of Arg if it is set or its
// zero value if it is unset.
func (v *Corge_NoContentNoException_Args) GetArg() (o bool) {
	if v != nil {
		o = v.Arg
	}
	return
}

// MethodName returns the name of the Thrift function as specified in
// the IDL, for which this struct represent the arguments.
//
// This will always be "noContentNoException" for this struct.
func (v *Corge_NoContentNoException_Args) MethodName() string {
	return "noContentNoException"
}

// EnvelopeType returns the kind of value inside this struct.
//
// This will always be Call for this struct.
func (v *Corge_NoContentNoException_Args) EnvelopeType() wire.EnvelopeType {
	return wire.Call
}

// Corge_NoContentNoException_Helper provides functions that aid in handling the
// parameters and return values of the Corge.noContentNoException
// function.
var Corge_NoContentNoException_Helper = struct {
	// Args accepts the parameters of noContentNoException in-order and returns
	// the arguments struct for the function.
	Args func(
		arg bool,
	) *Corge_NoContentNoException_Args

	// IsException returns true if the given error can be thrown
	// by noContentNoException.
	//
	// An error can be thrown by noContentNoException only if the
	// corresponding exception type was mentioned in the 'throws'
	// section for it in the Thrift file.
	IsException func(error) bool

	// WrapResponse returns the result struct for noContentNoException
	// given the error returned by it. The provided error may
	// be nil if noContentNoException did not fail.
	//
	// This allows mapping errors returned by noContentNoException into a
	// serializable result struct. WrapResponse returns a
	// non-nil error if the provided error cannot be thrown by
	// noContentNoException
	//
	//   err := noContentNoException(args)
	//   result, err := Corge_NoContentNoException_Helper.WrapResponse(err)
	//   if err != nil {
	//     return fmt.Errorf("unexpected error from noContentNoException: %v", err)
	//   }
	//   serialize(result)
	WrapResponse func(error) (*Corge_NoContentNoException_Result, error)

	// UnwrapResponse takes the result struct for noContentNoException
	// and returns the erorr returned by it (if any).
	//
	// The error is non-nil only if noContentNoException threw an
	// exception.
	//
	//   result := deserialize(bytes)
	//   err := Corge_NoContentNoException_Helper.UnwrapResponse(result)
	UnwrapResponse func(*Corge_NoContentNoException_Result) error
}{}

func init() {
	Corge_NoContentNoException_Helper.Args = func(
		arg bool,
	) *Corge_NoContentNoException_Args {
		return &Corge_NoContentNoException_Args{
			Arg: arg,
		}
	}

	Corge_NoContentNoException_Helper.IsException = func(err error) bool {
		switch err.(type) {
		default:
			return false
		}
	}

	Corge_NoContentNoException_Helper.WrapResponse = func(err error) (*Corge_NoContentNoException_Result, error) {
		if err == nil {
			return &Corge_NoContentNoException_Result{}, nil
		}

		return nil, err
	}
	Corge_NoContentNoException_Helper.UnwrapResponse = func(result *Corge_NoContentNoException_Result) (err error) {
		return
	}

}

// Corge_NoContentNoException_Result represents the result of a Corge.noContentNoException function call.
//
// The result of a noContentNoException execution is sent and received over the wire as this struct.
type Corge_NoContentNoException_Result struct {
}

// ToWire translates a Corge_NoContentNoException_Result struct into a Thrift-level intermediate
// representation. This intermediate representation may be serialized
// into bytes using a ThriftRW protocol implementation.
//
// An error is returned if the struct or any of its fields failed to
// validate.
//
//	x, err := v.ToWire()
//	if err != nil {
//	  return err
//	}
//
//	if err := binaryProtocol.Encode(x, writer); err != nil {
//	  return err
//	}
func (v *Corge_NoContentNoException_Result) ToWire() (wire.Value, error) {
	var (
		fields [0]wire.Field
		i      int = 0
	)

	return wire.NewValueStruct(wire.Struct{Fields: fields[:i]}), nil
}

// FromWire deserializes a Corge_NoContentNoException_Result struct from its Thrift-level
// representation. The Thrift-level representation may be obtained
// from a ThriftRW protocol implementation.
//
// An error is returned if we were unable to build a Corge_NoContentNoException_Result struct
// from the provided intermediate representation.
//
//	x, err := binaryProtocol.Decode(reader, wire.TStruct)
//	if err != nil {
//	  return nil, err
//	}
//
//	var v Corge_NoContentNoException_Result
//	if err := v.FromWire(x); err != nil {
//	  return nil, err
//	}
//	return &v, nil
func (v *Corge_NoContentNoException_Result) FromWire(w wire.Value) error {

	for _, field := range w.GetStruct().Fields {
		switch field.ID {
		}
	}

	return nil
}

// Encode serializes a Corge_NoContentNoException_Result struct directly into bytes, without going
// through an intermediary type.
//
// An error is returned if a Corge_NoContentNoException_Result struct could not be encoded.
func (v *Corge_NoContentNoException_Result) Encode(sw stream.Writer) error {
	if err := sw.WriteStructBegin(); err != nil {
		return err
	}

	return sw.WriteStructEnd()
}

// Decode deserializes a Corge_NoContentNoException_Result struct directly from its Thrift-level
// representation, without going through an intemediary type.
//
// An error is returned if a Corge_NoContentNoException_Result struct could not be generated from the wire
// representation.
func (v *Corge_NoContentNoException_Result) Decode(sr stream.Reader) error {

	if err := sr.ReadStructBegin(); err != nil {
		return err
	}

	fh, ok, err := sr.ReadFieldBegin()
	if err != nil {
		return err
	}

	for ok {
		switch {
		default:
			if err := sr.Skip(fh.Type); err != nil {
				return err
			}
		}

		if err := sr.ReadFieldEnd(); err != nil {
			return err
		}

		if fh, ok, err = sr.ReadFieldBegin(); err != nil {
			return err
		}
	}

	if err := sr.ReadStructEnd(); err != nil {
		return err
	}

	return nil
}

// String returns a readable string representation of a Corge_NoContentNoException_Result
// struct.
func (v *Corge_NoContentNoException_Result) String() string {
	if v == nil {
		return "<nil>"
	}

	var fields [0]string
	i := 0

	return fmt.Sprintf("Corge_NoContentNoException_Result{%v}", strings.Join(fields[:i], ", "))
}

// Equals returns true if all the fields of this Corge_NoContentNoException_Result match the
// provided Corge_NoContentNoException_Result.
//
// This function performs a deep comparison.
func (v *Corge_NoContentNoException_Result) Equals(rhs *Corge_NoContentNoException_Result) bool {
	if v == nil {
		return rhs == nil
	} else if rhs == nil {
		return false
	}

	return true
}

// MarshalLogObject implements zapcore.ObjectMarshaler, enabling
// fast logging of Corge_NoContentNoException_Result.
func (v *Corge_NoContentNoException_Result) MarshalLogObject(enc zapcore.ObjectEncoder) (err error) {
	if v == nil {
		return nil
	}
	return err
}

// MethodName returns the name of the Thrift function as specified in
// the IDL, for which this struct represent the result.
//
// This will always be "noContentNoException" for this struct.
func (v *Corge_NoContentNoException_Result) MethodName() string {
	return "noContentNoException"
}

// EnvelopeType returns the kind of value inside this struct.
//
// This will always be Reply for this struct.
func (v *Corge_NoContentNoException_Result) EnvelopeType() wire.EnvelopeType {
	return wire.Reply
}

// Corge_NoContentOnException_Args represents the arguments for the Corge.noContentOnException function.
//
// The arguments for noContentOnException are sent and received over the wire as this struct.
type Corge_NoContentOnException_Args struct {
	Arg bool `json:"arg,required"`
}

// ToWire translates a Corge_NoContentOnException_Args struct into a Thrift-level intermediate
// representation. This intermediate representation may be serialized
// into bytes using a ThriftRW protocol implementation.
//
// An error is returned if the struct or any of its fields failed to
// validate.
//
//	x, err := v.ToWire()
//	if err != nil {
//	  return err
//	}
//
//	if err := binaryProtocol.Encode(x, writer); err != nil {
//	  return err
//	}
func (v *Corge_NoContentOnException_Args) ToWire() (wire.Value, error) {
	var (
		fields [1]wire.Field
		i      int = 0
		w      wire.Value
		err    error
	)

	w, err = wire.NewValueBool(v.Arg), error(nil)
	if err != nil {
		return w, err
	}
	fields[i] = wire.Field{ID: 1, Value: w}
	i++

	return wire.NewValueStruct(wire.Struct{Fields: fields[:i]}), nil
}

// FromWire deserializes a Corge_NoContentOnException_Args struct from its Thrift-level
// representation. The Thrift-level representation may be obtained
// from a ThriftRW protocol implementation.
//
// An error is returned if we were unable to build a Corge_NoContentOnException_Args struct
// from the provided intermediate representation.
//
//	x, err := binaryProtocol.Decode(reader, wire.TStruct)
//	if err != nil {
//	  return nil, err
//	}
//
//	var v Corge_NoContentOnException_Args
//	if err := v.FromWire(x); err != nil {
//	  return nil, err
//	}
//	return &v, nil
func (v *Corge_NoContentOnException_Args) FromWire(w wire.Value) error {
	var err error

	argIsSet := false

	for _, field := range w.GetStruct().Fields {
		switch field.ID {
		case 1:
			if field.Value.Type() == wire.TBool {
				v.Arg, err = field.Value.GetBool(), error(nil)
				if err != nil {
					return err
				}
				argIsSet = true
			}
		}
	}

	if !argIsSet {
		return errors.New("field Arg of Corge_NoContentOnException_Args is required")
	}

	return nil
}

// Encode serializes a Corge_NoContentOnException_Args struct directly into bytes, without going
// through an intermediary type.
//
// An error is returned if a Corge_NoContentOnException_Args struct could not be encoded.
func (v *Corge_NoContentOnException_Args) Encode(sw stream.Writer) error {
	if err := sw.WriteStructBegin(); err != nil {
		return err
	}

	if err := sw.WriteFieldBegin(stream.FieldHeader{ID: 1, Type: wire.TBool}); err != nil {
		return err
	}
	if err := sw.WriteBool(v.Arg); err != nil {
		return err
	}
	if err := sw.WriteFieldEnd(); err != nil {
		return err
	}

	return sw.WriteStructEnd()
}

// Decode deserializes a Corge_NoContentOnException_Args struct directly from its Thrift-level
// representation, without going through an intemediary type.
//
// An error is returned if a Corge_NoContentOnException_Args struct could not be generated from the wire
// representation.
func (v *Corge_NoContentOnException_Args) Decode(sr stream.Reader) error {

	argIsSet := false

	if err := sr.ReadStructBegin(); err != nil {
		return err
	}

	fh, ok, err := sr.ReadFieldBegin()
	if err != nil {
		return err
	}

	for ok {
		switch {
		case fh.ID == 1 && fh.Type == wire.TBool:
			v.Arg, err = sr.ReadBool()
			if err != nil {
				return err
			}
			argIsSet = true
		default:
			if err := sr.Skip(fh.Type); err != nil {
				return err
			}
		}

		if err := sr.ReadFieldEnd(); err != nil {
			return err
		}

		if fh, ok, err = sr.ReadFieldBegin(); err != nil {
			return err
		}
	}

	if err := sr.ReadStructEnd(); err != nil {
		return err
	}

	if !argIsSet {
		return errors.New("field Arg of Corge_NoContentOnException_Args is required")
	}

	return nil
}

// String returns a readable string representation of a Corge_NoContentOnException_Args
// struct.
func (v *Corge_NoContentOnException_Args) String() string {
	if v == nil {
		return "<nil>"
	}

	var fields [1]string
	i := 0
	fields[i] = fmt.Sprintf("Arg: %v", v.Arg)
	i++

	return fmt.Sprintf("Corge_NoContentOnException_Args{%v}", strings.Join(fields[:i], ", "))
}

// Equals returns true if all the fields of this Corge_NoContentOnException_Args match the
// provided Corge_NoContentOnException_Args.
//
// This function performs a deep comparison.
func (v *Corge_NoContentOnException_Args) Equals(rhs *Corge_NoContentOnException_Args) bool {
	if v == nil {
		return rhs == nil
	} else if rhs == nil {
		return false
	}
	if !(v.Arg == rhs.Arg) {
		return false
	}

	return true
}

// MarshalLogObject implements zapcore.ObjectMarshaler, enabling
// fast logging of Corge_NoContentOnException_Args.
func (v *Corge_NoContentOnException_Args) MarshalLogObject(enc zapcore.ObjectEncoder) (err error) {
	if v == nil {
		return nil
	}
	enc.AddBool("arg", v.Arg)
	return err
}

// GetArg returns the value of Arg if it is set or its
// zero value if it is unset.
func (v *Corge_NoContentOnException_Args) GetArg() (o bool) {
	if v != nil {
		o = v.Arg
	}
	return
}

// MethodName returns the name of the Thrift function as specified in
// the IDL, for which this struct represent the arguments.
//
// This will always be "noContentOnException" for this struct.
func (v *Corge_NoContentOnException_Args) MethodName() string {
	return "noContentOnException"
}

// EnvelopeType returns the kind of value inside this struct.
//
// This will always be Call for this struct.
func (v *Corge_NoContentOnException_Args) EnvelopeType() wire.EnvelopeType {
	return wire.Call
}

// Corge_NoContentOnException_Helper provides functions that aid in handling the
// parameters and return values of the Corge.noContentOnException
// function.
var Corge_NoContentOnException_Helper = struct {
	// Args accepts the parameters of noContentOnException in-order and returns
	// the arguments struct for the function.
	Args func(
		arg bool,
	) *Corge_NoContentOnException_Args

	// IsException returns true if the given error can be thrown
	// by noContentOnException.
	//
	// An error can be thrown by noContentOnException only if the
	// corresponding exception type was mentioned in the 'throws'
	// section for it in the Thrift file.
	IsException func(error) bool

	// WrapResponse returns the result struct for noContentOnException
	// given its return value and error.
	//
	// This allows mapping values and errors returned by
	// noContentOnException into a serializable result struct.
	// WrapResponse returns a non-nil error if the provided
	// error cannot be thrown by noContentOnException
	//
	//   value, err := noContentOnException(args)
	//   result, err := Corge_NoContentOnException_Helper.WrapResponse(value, err)
	//   if err != nil {
	//     return fmt.Errorf("unexpected error from noContentOnException: %v", err)
	//   }
	//   serialize(result)
	WrapResponse func(*Foo, error) (*Corge_NoContentOnException_Result, error)

	// UnwrapResponse takes the result struct for noContentOnException
	// and returns the value or error returned by it.
	//
	// The error is non-nil only if noContentOnException threw an
	// exception.
	//
	//   result := deserialize(bytes)
	//   value, err := Corge_NoContentOnException_Helper.UnwrapResponse(result)
	UnwrapResponse func(*Corge_NoContentOnException_Result) (*Foo, error)
}{}

func init() {
	Corge_NoContentOnException_Helper.Args = func(
		arg bool,
	) *Corge_NoContentOnException_Args {
		return &Corge_NoContentOnException_Args{
			Arg: arg,
		}
	}

	Corge_NoContentOnException_Helper.IsException = func(err error) bool {
		switch err.(type) {
		case *NotModified:
			return true
		default:
			return false
		}
	}

	Corge_NoContentOnException_Helper.WrapResponse = func(success *Foo, err error) (*Corge_NoContentOnException_Result, error) {
		if err == nil {
			return &Corge_NoContentOnException_Result{Success: success}, nil
		}

		switch e := err.(type) {
		case *NotModified:
			if e == nil {
				return nil, errors.New("WrapResponse received non-nil error type with nil value for Corge_NoContentOnException_Result.NotModified")
			}
			return &Corge_NoContentOnException_Result{NotModified: e}, nil
		}

		return nil, err
	}
	Corge_NoContentOnException_Helper.UnwrapResponse = func(result *Corge_NoContentOnException_Result) (success *Foo, err error) {
		if result.NotModified != nil {
			err = result.NotModified
			return
		}

		if result.Success != nil {
			success = result.Success
			return
		}

		err = errors.New("expected a non-void result")
		return
	}

}

// Corge_NoContentOnException_Result represents the result of a Corge.noContentOnException function call.
//
// The result of a noContentOnException execution is sent and received over the wire as this struct.
//
// Success is set only if the function did not throw an exception.
type Corge_NoContentOnException_Result struct {
	// Value returned by noContentOnException after a successful execution.
	Success     *Foo         `json:"success,omitempty"`
	NotModified *NotModified `json:"notModified,omitempty"`
}

// ToWire translates a Corge_NoContentOnException_Result struct into a Thrift-level intermediate
// representation. This intermediate representation may be serialized
// into bytes using a ThriftRW protocol implementation.
//
// An error is returned if the struct or any of its fields failed to
// validate.
//
//	x, err := v.ToWire()
//	if err != nil {
//	  return err
//	}
//
//	if err := binaryProtocol.Encode(x, writer); err != nil {
//	  return err
//	}
func (v *Corge_NoContentOnException_Result) ToWire() (wire.Value, error) {
	var (
		fields [2]wire.Field
		i      int = 0
		w      wire.Value
		err    error
	)

	if v.Success != nil {
		w, err = v.Success.ToWire()
		if err != nil {
			return w, err
		}
		fields[i] = wire.Field{ID: 0, Value: w}
		i++
	}
	if v.NotModified != nil {
		w, err = v.NotModified.ToWire()
		if err != nil {
			return w, err
		}
		fields[i] = wire.Field{ID: 1, Value: w}
		i++
	}

	if i != 1 {
		return wire.Value{}, fmt.Errorf("Corge_NoContentOnException_Result should have exactly one field: got %v fields", i)
	}

	return wire.NewValueStruct(wire.Struct{Fields: fields[:i]}), nil
}

func _Foo_Read(w wire.Value) (*Foo, error) {
	var v Foo
	err := v.FromWire(w)
	return &v, err
}

// FromWire deserializes a Corge_NoContentOnException_Result struct from its Thrift-level
// representation. The Thrift-level representation may be obtained
// from a ThriftRW protocol implementation.
//
// An error is returned if we were unable to build a Corge_NoContentOnException_Result struct
// from the provided intermediate representation.
//
//	x, err := binaryProtocol.Decode(reader, wire.TStruct)
//	if err != nil {
//	  return nil, err
//	}
//
//	var v Corge_NoContentOnException_Result
//	if err := v.FromWire(x); err != nil {
//	  return nil, err
//	}
//	return &v, nil
func (v *Corge_NoContentOnException_Result) FromWire(w wire.Value) error {
	var err error

	for _, field := range w.GetStruct().Fields {
		switch field.ID {
		case 0:
			if field.Value.Type() == wire.TStruct {
				v.Success, err = _Foo_Read(field.Value)
				if err != nil {
					return err
				}

			}
		case 1:
			if field.Value.Type() == wire.TStruct {
				v.NotModified, err = _NotModified_Read(field.Value)
				if err != nil {
					return err
				}

			}
		}
	}

	count := 0
	if v.Success != nil {
		count++
	}
	if v.NotModified != nil {
		count++
	}
	if count != 1 {
		return fmt.Errorf("Corge_NoContentOnException_Result should have exactly one field: got %v fields", count)
	}

	return nil
}

// Encode serializes a Corge_NoContentOnException_Result struct directly into bytes, without going
// through an intermediary type.
//
// An error is returned if a Corge_NoContentOnException_Result struct could not be encoded.
func (v *Corge_NoContentOnException_Result) Encode(sw stream.Writer) error {
	if err := sw.WriteStructBegin(); err != nil {
		return err
	}

	if v.Success != nil {
		if err := sw.WriteFieldBegin(stream.FieldHeader{ID: 0, Type: wire.TStruct}); err != nil {
			return err
		}
		if err := v.Success.Encode(sw); err != nil {
			return err
		}
		if err := sw.WriteFieldEnd(); err != nil {
			return err
		}
	}

	if v.NotModified != nil {
		if err := sw.WriteFieldBegin(stream.FieldHeader{ID: 1, Type: wire.TStruct}); err != nil {
			return err
		}
		if err := v.NotModified.Encode(sw); err != nil {
			return err
		}
		if err := sw.WriteFieldEnd(); err != nil {
			return err
		}
	}

	count := 0
	if v.Success != nil {
		count++
	}
	if v.NotModified != nil {
		count++
	}

	if count != 1 {
		return fmt.Errorf("Corge_NoContentOnException_Result should have exactly one field: got %v fields", count)
	}

	return sw.WriteStructEnd()
}

func _Foo_Decode(sr stream.Reader) (*Foo, error) {
	var v Foo
	err := v.Decode(sr)
	return &v, err
}

// Decode deserializes a Corge_NoContentOnException_Result struct directly from its Thrift-level
// representation, without going through an intemediary type.
//
// An error is returned if a Corge_NoContentOnException_Result struct could not be generated from the wire
// representation.
func (v *Corge_NoContentOnException_Result) Decode(sr stream.Reader) error {

	if err := sr.ReadStructBegin(); err != nil {
		return err
	}

	fh, ok, err := sr.ReadFieldBegin()
	if err != nil {
		return err
	}

	for ok {
		switch {
		case fh.ID == 0 && fh.Type == wire.TStruct:
			v.Success, err = _Foo_Decode(sr)
			if err != nil {
				return err
			}

		case fh.ID == 1 && fh.Type == wire.TStruct:
			v.NotModified, err = _NotModified_Decode(sr)
			if err != nil {
				return err
			}

		default:
			if err := sr.Skip(fh.Type); err != nil {
				return err
			}
		}

		if err := sr.ReadFieldEnd(); err != nil {
			return err
		}

		if fh, ok, err = sr.ReadFieldBegin(); err != nil {
			return err
		}
	}

	if err := sr.ReadStructEnd(); err != nil {
		return err
	}

	count := 0
	if v.Success != nil {
		count++
	}
	if v.NotModified != nil {
		count++
	}
	if count != 1 {
		return fmt.Errorf("Corge_NoContentOnException_Result should have exactly one field: got %v fields", count)
	}

	return nil
}

// String returns a readable string representation of a Corge_NoContentOnException_Result
// struct.
func (v *Corge_NoContentOnException_Result) String() string {
	if v == nil {
		return "<nil>"
	}

	var fields [2]string
	i := 0
	if v.Success != nil {
		fields[i] = fmt.Sprintf("Success: %v", v.Success)
		i++
	}
	if v.NotModified != nil {
		fields[i] = fmt.Sprintf("NotModified: %v", v.NotModified)
		i++
	}

	return fmt.Sprintf("Corge_NoContentOnException_Result{%v}", strings.Join(fields[:i], ", "))
}

// Equals returns true if all the fields of this Corge_NoContentOnException_Result match the
// provided Corge_NoContentOnException_Result.
//
// This function performs a deep comparison.
func (v *Corge_NoContentOnException_Result) Equals(rhs *Corge_NoContentOnException_Result) bool {
	if v == nil {
		return rhs == nil
	} else if rhs == nil {
		return false
	}
	if !((v.Success == nil && rhs.Success == nil) || (v.Success != nil && rhs.Success != nil && v.Success.Equals(rhs.Success))) {
		return false
	}
	if !((v.NotModified == nil && rhs.NotModified == nil) || (v.NotModified != nil && rhs.NotModified != nil && v.NotModified.Equals(rhs.NotModified))) {
		return false
	}

	return true
}

// MarshalLogObject implements zapcore.ObjectMarshaler, enabling
// fast logging of Corge_NoContentOnException_Result.
func (v *Corge_NoContentOnException_Result) MarshalLogObject(enc zapcore.ObjectEncoder) (err error) {
	if v == nil {
		return nil
	}
	if v.Success != nil {
		err = multierr.Append(err, enc.AddObject("success", v.Success))
	}
	if v.NotModified != nil {
		err = multierr.Append(err, enc.AddObject("notModified", v.NotModified))
	}
	return err
}

// GetSuccess returns the value of Success if it is set or its
// zero value if it is unset.
func (v *Corge_NoContentOnException_Result) GetSuccess() (o *Foo) {
	if v != nil && v.Success != nil {
		return v.Success
	}

	return
}

// IsSetSuccess returns true if Success is not nil.
func (v *Corge_NoContentOnException_Result) IsSetSuccess() bool {
	return v != nil && v.Success != nil
}

// GetNotModified returns the value of NotModified if it is set or its
// zero value if it is unset.
func (v *Corge_NoContentOnException_Result) GetNotModified() (o *NotModified) {
	if v != nil && v.NotModified != nil {
		return v.NotModified
	}

	return
}

// IsSetNotModified returns true if NotModified is not nil.
func (v *Corge_NoContentOnException_Result) IsSetNotModified() bool {
	return v != nil && v.NotModified != nil
}

// MethodName returns the name of the Thrift function as specified in
// the IDL, for which this struct represent the result.
//
// This will always be "noContentOnException" for this struct.
func (v *Corge_NoContentOnException_Result) MethodName() string {
	return "noContentOnException"
}

// EnvelopeType returns the kind of value inside this struct.
//
// This will always be Reply for this struct.
func (v *Corge_NoContentOnException_Result) EnvelopeType() wire.EnvelopeType {
	return wire.Reply
}
