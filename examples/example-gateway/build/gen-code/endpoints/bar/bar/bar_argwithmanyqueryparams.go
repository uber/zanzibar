// Code generated by thriftrw v1.8.0. DO NOT EDIT.
// @generated

package bar

import (
	"errors"
	"fmt"
	"go.uber.org/thriftrw/wire"
	"strings"
)

// Bar_ArgWithManyQueryParams_Args represents the arguments for the Bar.argWithManyQueryParams function.
//
// The arguments for argWithManyQueryParams are sent and received over the wire as this struct.
type Bar_ArgWithManyQueryParams_Args struct {
	AStr         string   `json:"aStr,required"`
	AnOptStr     *string  `json:"anOptStr,omitempty"`
	ABool        bool     `json:"aBool,required"`
	AnOptBool    *bool    `json:"anOptBool,omitempty"`
	AInt8        int8     `json:"aInt8,required"`
	AnOptInt8    *int8    `json:"anOptInt8,omitempty"`
	AInt16       int16    `json:"aInt16,required"`
	AnOptInt16   *int16   `json:"anOptInt16,omitempty"`
	AInt32       int32    `json:"aInt32,required"`
	AnOptInt32   *int32   `json:"anOptInt32,omitempty"`
	AInt64       int64    `json:"aInt64,required"`
	AnOptInt64   *int64   `json:"anOptInt64,omitempty"`
	AFloat64     float64  `json:"aFloat64,required"`
	AnOptFloat64 *float64 `json:"anOptFloat64,omitempty"`
}

// ToWire translates a Bar_ArgWithManyQueryParams_Args struct into a Thrift-level intermediate
// representation. This intermediate representation may be serialized
// into bytes using a ThriftRW protocol implementation.
//
// An error is returned if the struct or any of its fields failed to
// validate.
//
//   x, err := v.ToWire()
//   if err != nil {
//     return err
//   }
//
//   if err := binaryProtocol.Encode(x, writer); err != nil {
//     return err
//   }
func (v *Bar_ArgWithManyQueryParams_Args) ToWire() (wire.Value, error) {
	var (
		fields [14]wire.Field
		i      int = 0
		w      wire.Value
		err    error
	)

	w, err = wire.NewValueString(v.AStr), error(nil)
	if err != nil {
		return w, err
	}
	fields[i] = wire.Field{ID: 1, Value: w}
	i++
	if v.AnOptStr != nil {
		w, err = wire.NewValueString(*(v.AnOptStr)), error(nil)
		if err != nil {
			return w, err
		}
		fields[i] = wire.Field{ID: 2, Value: w}
		i++
	}

	w, err = wire.NewValueBool(v.ABool), error(nil)
	if err != nil {
		return w, err
	}
	fields[i] = wire.Field{ID: 3, Value: w}
	i++
	if v.AnOptBool != nil {
		w, err = wire.NewValueBool(*(v.AnOptBool)), error(nil)
		if err != nil {
			return w, err
		}
		fields[i] = wire.Field{ID: 4, Value: w}
		i++
	}

	w, err = wire.NewValueI8(v.AInt8), error(nil)
	if err != nil {
		return w, err
	}
	fields[i] = wire.Field{ID: 5, Value: w}
	i++
	if v.AnOptInt8 != nil {
		w, err = wire.NewValueI8(*(v.AnOptInt8)), error(nil)
		if err != nil {
			return w, err
		}
		fields[i] = wire.Field{ID: 6, Value: w}
		i++
	}

	w, err = wire.NewValueI16(v.AInt16), error(nil)
	if err != nil {
		return w, err
	}
	fields[i] = wire.Field{ID: 7, Value: w}
	i++
	if v.AnOptInt16 != nil {
		w, err = wire.NewValueI16(*(v.AnOptInt16)), error(nil)
		if err != nil {
			return w, err
		}
		fields[i] = wire.Field{ID: 8, Value: w}
		i++
	}

	w, err = wire.NewValueI32(v.AInt32), error(nil)
	if err != nil {
		return w, err
	}
	fields[i] = wire.Field{ID: 9, Value: w}
	i++
	if v.AnOptInt32 != nil {
		w, err = wire.NewValueI32(*(v.AnOptInt32)), error(nil)
		if err != nil {
			return w, err
		}
		fields[i] = wire.Field{ID: 10, Value: w}
		i++
	}

	w, err = wire.NewValueI64(v.AInt64), error(nil)
	if err != nil {
		return w, err
	}
	fields[i] = wire.Field{ID: 11, Value: w}
	i++
	if v.AnOptInt64 != nil {
		w, err = wire.NewValueI64(*(v.AnOptInt64)), error(nil)
		if err != nil {
			return w, err
		}
		fields[i] = wire.Field{ID: 12, Value: w}
		i++
	}

	w, err = wire.NewValueDouble(v.AFloat64), error(nil)
	if err != nil {
		return w, err
	}
	fields[i] = wire.Field{ID: 13, Value: w}
	i++
	if v.AnOptFloat64 != nil {
		w, err = wire.NewValueDouble(*(v.AnOptFloat64)), error(nil)
		if err != nil {
			return w, err
		}
		fields[i] = wire.Field{ID: 14, Value: w}
		i++
	}

	return wire.NewValueStruct(wire.Struct{Fields: fields[:i]}), nil
}

// FromWire deserializes a Bar_ArgWithManyQueryParams_Args struct from its Thrift-level
// representation. The Thrift-level representation may be obtained
// from a ThriftRW protocol implementation.
//
// An error is returned if we were unable to build a Bar_ArgWithManyQueryParams_Args struct
// from the provided intermediate representation.
//
//   x, err := binaryProtocol.Decode(reader, wire.TStruct)
//   if err != nil {
//     return nil, err
//   }
//
//   var v Bar_ArgWithManyQueryParams_Args
//   if err := v.FromWire(x); err != nil {
//     return nil, err
//   }
//   return &v, nil
func (v *Bar_ArgWithManyQueryParams_Args) FromWire(w wire.Value) error {
	var err error

	aStrIsSet := false

	aBoolIsSet := false

	aInt8IsSet := false

	aInt16IsSet := false

	aInt32IsSet := false

	aInt64IsSet := false

	aFloat64IsSet := false

	for _, field := range w.GetStruct().Fields {
		switch field.ID {
		case 1:
			if field.Value.Type() == wire.TBinary {
				v.AStr, err = field.Value.GetString(), error(nil)
				if err != nil {
					return err
				}
				aStrIsSet = true
			}
		case 2:
			if field.Value.Type() == wire.TBinary {
				var x string
				x, err = field.Value.GetString(), error(nil)
				v.AnOptStr = &x
				if err != nil {
					return err
				}

			}
		case 3:
			if field.Value.Type() == wire.TBool {
				v.ABool, err = field.Value.GetBool(), error(nil)
				if err != nil {
					return err
				}
				aBoolIsSet = true
			}
		case 4:
			if field.Value.Type() == wire.TBool {
				var x bool
				x, err = field.Value.GetBool(), error(nil)
				v.AnOptBool = &x
				if err != nil {
					return err
				}

			}
		case 5:
			if field.Value.Type() == wire.TI8 {
				v.AInt8, err = field.Value.GetI8(), error(nil)
				if err != nil {
					return err
				}
				aInt8IsSet = true
			}
		case 6:
			if field.Value.Type() == wire.TI8 {
				var x int8
				x, err = field.Value.GetI8(), error(nil)
				v.AnOptInt8 = &x
				if err != nil {
					return err
				}

			}
		case 7:
			if field.Value.Type() == wire.TI16 {
				v.AInt16, err = field.Value.GetI16(), error(nil)
				if err != nil {
					return err
				}
				aInt16IsSet = true
			}
		case 8:
			if field.Value.Type() == wire.TI16 {
				var x int16
				x, err = field.Value.GetI16(), error(nil)
				v.AnOptInt16 = &x
				if err != nil {
					return err
				}

			}
		case 9:
			if field.Value.Type() == wire.TI32 {
				v.AInt32, err = field.Value.GetI32(), error(nil)
				if err != nil {
					return err
				}
				aInt32IsSet = true
			}
		case 10:
			if field.Value.Type() == wire.TI32 {
				var x int32
				x, err = field.Value.GetI32(), error(nil)
				v.AnOptInt32 = &x
				if err != nil {
					return err
				}

			}
		case 11:
			if field.Value.Type() == wire.TI64 {
				v.AInt64, err = field.Value.GetI64(), error(nil)
				if err != nil {
					return err
				}
				aInt64IsSet = true
			}
		case 12:
			if field.Value.Type() == wire.TI64 {
				var x int64
				x, err = field.Value.GetI64(), error(nil)
				v.AnOptInt64 = &x
				if err != nil {
					return err
				}

			}
		case 13:
			if field.Value.Type() == wire.TDouble {
				v.AFloat64, err = field.Value.GetDouble(), error(nil)
				if err != nil {
					return err
				}
				aFloat64IsSet = true
			}
		case 14:
			if field.Value.Type() == wire.TDouble {
				var x float64
				x, err = field.Value.GetDouble(), error(nil)
				v.AnOptFloat64 = &x
				if err != nil {
					return err
				}

			}
		}
	}

	if !aStrIsSet {
		return errors.New("field AStr of Bar_ArgWithManyQueryParams_Args is required")
	}

	if !aBoolIsSet {
		return errors.New("field ABool of Bar_ArgWithManyQueryParams_Args is required")
	}

	if !aInt8IsSet {
		return errors.New("field AInt8 of Bar_ArgWithManyQueryParams_Args is required")
	}

	if !aInt16IsSet {
		return errors.New("field AInt16 of Bar_ArgWithManyQueryParams_Args is required")
	}

	if !aInt32IsSet {
		return errors.New("field AInt32 of Bar_ArgWithManyQueryParams_Args is required")
	}

	if !aInt64IsSet {
		return errors.New("field AInt64 of Bar_ArgWithManyQueryParams_Args is required")
	}

	if !aFloat64IsSet {
		return errors.New("field AFloat64 of Bar_ArgWithManyQueryParams_Args is required")
	}

	return nil
}

// String returns a readable string representation of a Bar_ArgWithManyQueryParams_Args
// struct.
func (v *Bar_ArgWithManyQueryParams_Args) String() string {
	if v == nil {
		return "<nil>"
	}

	var fields [14]string
	i := 0
	fields[i] = fmt.Sprintf("AStr: %v", v.AStr)
	i++
	if v.AnOptStr != nil {
		fields[i] = fmt.Sprintf("AnOptStr: %v", *(v.AnOptStr))
		i++
	}
	fields[i] = fmt.Sprintf("ABool: %v", v.ABool)
	i++
	if v.AnOptBool != nil {
		fields[i] = fmt.Sprintf("AnOptBool: %v", *(v.AnOptBool))
		i++
	}
	fields[i] = fmt.Sprintf("AInt8: %v", v.AInt8)
	i++
	if v.AnOptInt8 != nil {
		fields[i] = fmt.Sprintf("AnOptInt8: %v", *(v.AnOptInt8))
		i++
	}
	fields[i] = fmt.Sprintf("AInt16: %v", v.AInt16)
	i++
	if v.AnOptInt16 != nil {
		fields[i] = fmt.Sprintf("AnOptInt16: %v", *(v.AnOptInt16))
		i++
	}
	fields[i] = fmt.Sprintf("AInt32: %v", v.AInt32)
	i++
	if v.AnOptInt32 != nil {
		fields[i] = fmt.Sprintf("AnOptInt32: %v", *(v.AnOptInt32))
		i++
	}
	fields[i] = fmt.Sprintf("AInt64: %v", v.AInt64)
	i++
	if v.AnOptInt64 != nil {
		fields[i] = fmt.Sprintf("AnOptInt64: %v", *(v.AnOptInt64))
		i++
	}
	fields[i] = fmt.Sprintf("AFloat64: %v", v.AFloat64)
	i++
	if v.AnOptFloat64 != nil {
		fields[i] = fmt.Sprintf("AnOptFloat64: %v", *(v.AnOptFloat64))
		i++
	}

	return fmt.Sprintf("Bar_ArgWithManyQueryParams_Args{%v}", strings.Join(fields[:i], ", "))
}

func _Bool_EqualsPtr(lhs, rhs *bool) bool {
	if lhs != nil && rhs != nil {

		x := *lhs
		y := *rhs
		return (x == y)
	}
	return lhs == nil && rhs == nil
}

func _Byte_EqualsPtr(lhs, rhs *int8) bool {
	if lhs != nil && rhs != nil {

		x := *lhs
		y := *rhs
		return (x == y)
	}
	return lhs == nil && rhs == nil
}

func _I16_EqualsPtr(lhs, rhs *int16) bool {
	if lhs != nil && rhs != nil {

		x := *lhs
		y := *rhs
		return (x == y)
	}
	return lhs == nil && rhs == nil
}

func _I32_EqualsPtr(lhs, rhs *int32) bool {
	if lhs != nil && rhs != nil {

		x := *lhs
		y := *rhs
		return (x == y)
	}
	return lhs == nil && rhs == nil
}

func _I64_EqualsPtr(lhs, rhs *int64) bool {
	if lhs != nil && rhs != nil {

		x := *lhs
		y := *rhs
		return (x == y)
	}
	return lhs == nil && rhs == nil
}

func _Double_EqualsPtr(lhs, rhs *float64) bool {
	if lhs != nil && rhs != nil {

		x := *lhs
		y := *rhs
		return (x == y)
	}
	return lhs == nil && rhs == nil
}

// Equals returns true if all the fields of this Bar_ArgWithManyQueryParams_Args match the
// provided Bar_ArgWithManyQueryParams_Args.
//
// This function performs a deep comparison.
func (v *Bar_ArgWithManyQueryParams_Args) Equals(rhs *Bar_ArgWithManyQueryParams_Args) bool {
	if !(v.AStr == rhs.AStr) {
		return false
	}
	if !_String_EqualsPtr(v.AnOptStr, rhs.AnOptStr) {
		return false
	}
	if !(v.ABool == rhs.ABool) {
		return false
	}
	if !_Bool_EqualsPtr(v.AnOptBool, rhs.AnOptBool) {
		return false
	}
	if !(v.AInt8 == rhs.AInt8) {
		return false
	}
	if !_Byte_EqualsPtr(v.AnOptInt8, rhs.AnOptInt8) {
		return false
	}
	if !(v.AInt16 == rhs.AInt16) {
		return false
	}
	if !_I16_EqualsPtr(v.AnOptInt16, rhs.AnOptInt16) {
		return false
	}
	if !(v.AInt32 == rhs.AInt32) {
		return false
	}
	if !_I32_EqualsPtr(v.AnOptInt32, rhs.AnOptInt32) {
		return false
	}
	if !(v.AInt64 == rhs.AInt64) {
		return false
	}
	if !_I64_EqualsPtr(v.AnOptInt64, rhs.AnOptInt64) {
		return false
	}
	if !(v.AFloat64 == rhs.AFloat64) {
		return false
	}
	if !_Double_EqualsPtr(v.AnOptFloat64, rhs.AnOptFloat64) {
		return false
	}

	return true
}

// GetAnOptStr returns the value of AnOptStr if it is set or its
// zero value if it is unset.
func (v *Bar_ArgWithManyQueryParams_Args) GetAnOptStr() (o string) {
	if v.AnOptStr != nil {
		return *v.AnOptStr
	}

	return
}

// GetAnOptBool returns the value of AnOptBool if it is set or its
// zero value if it is unset.
func (v *Bar_ArgWithManyQueryParams_Args) GetAnOptBool() (o bool) {
	if v.AnOptBool != nil {
		return *v.AnOptBool
	}

	return
}

// GetAnOptInt8 returns the value of AnOptInt8 if it is set or its
// zero value if it is unset.
func (v *Bar_ArgWithManyQueryParams_Args) GetAnOptInt8() (o int8) {
	if v.AnOptInt8 != nil {
		return *v.AnOptInt8
	}

	return
}

// GetAnOptInt16 returns the value of AnOptInt16 if it is set or its
// zero value if it is unset.
func (v *Bar_ArgWithManyQueryParams_Args) GetAnOptInt16() (o int16) {
	if v.AnOptInt16 != nil {
		return *v.AnOptInt16
	}

	return
}

// GetAnOptInt32 returns the value of AnOptInt32 if it is set or its
// zero value if it is unset.
func (v *Bar_ArgWithManyQueryParams_Args) GetAnOptInt32() (o int32) {
	if v.AnOptInt32 != nil {
		return *v.AnOptInt32
	}

	return
}

// GetAnOptInt64 returns the value of AnOptInt64 if it is set or its
// zero value if it is unset.
func (v *Bar_ArgWithManyQueryParams_Args) GetAnOptInt64() (o int64) {
	if v.AnOptInt64 != nil {
		return *v.AnOptInt64
	}

	return
}

// GetAnOptFloat64 returns the value of AnOptFloat64 if it is set or its
// zero value if it is unset.
func (v *Bar_ArgWithManyQueryParams_Args) GetAnOptFloat64() (o float64) {
	if v.AnOptFloat64 != nil {
		return *v.AnOptFloat64
	}

	return
}

// MethodName returns the name of the Thrift function as specified in
// the IDL, for which this struct represent the arguments.
//
// This will always be "argWithManyQueryParams" for this struct.
func (v *Bar_ArgWithManyQueryParams_Args) MethodName() string {
	return "argWithManyQueryParams"
}

// EnvelopeType returns the kind of value inside this struct.
//
// This will always be Call for this struct.
func (v *Bar_ArgWithManyQueryParams_Args) EnvelopeType() wire.EnvelopeType {
	return wire.Call
}

// Bar_ArgWithManyQueryParams_Helper provides functions that aid in handling the
// parameters and return values of the Bar.argWithManyQueryParams
// function.
var Bar_ArgWithManyQueryParams_Helper = struct {
	// Args accepts the parameters of argWithManyQueryParams in-order and returns
	// the arguments struct for the function.
	Args func(
		aStr string,
		anOptStr *string,
		aBool bool,
		anOptBool *bool,
		aInt8 int8,
		anOptInt8 *int8,
		aInt16 int16,
		anOptInt16 *int16,
		aInt32 int32,
		anOptInt32 *int32,
		aInt64 int64,
		anOptInt64 *int64,
		aFloat64 float64,
		anOptFloat64 *float64,
	) *Bar_ArgWithManyQueryParams_Args

	// IsException returns true if the given error can be thrown
	// by argWithManyQueryParams.
	//
	// An error can be thrown by argWithManyQueryParams only if the
	// corresponding exception type was mentioned in the 'throws'
	// section for it in the Thrift file.
	IsException func(error) bool

	// WrapResponse returns the result struct for argWithManyQueryParams
	// given its return value and error.
	//
	// This allows mapping values and errors returned by
	// argWithManyQueryParams into a serializable result struct.
	// WrapResponse returns a non-nil error if the provided
	// error cannot be thrown by argWithManyQueryParams
	//
	//   value, err := argWithManyQueryParams(args)
	//   result, err := Bar_ArgWithManyQueryParams_Helper.WrapResponse(value, err)
	//   if err != nil {
	//     return fmt.Errorf("unexpected error from argWithManyQueryParams: %v", err)
	//   }
	//   serialize(result)
	WrapResponse func(*BarResponse, error) (*Bar_ArgWithManyQueryParams_Result, error)

	// UnwrapResponse takes the result struct for argWithManyQueryParams
	// and returns the value or error returned by it.
	//
	// The error is non-nil only if argWithManyQueryParams threw an
	// exception.
	//
	//   result := deserialize(bytes)
	//   value, err := Bar_ArgWithManyQueryParams_Helper.UnwrapResponse(result)
	UnwrapResponse func(*Bar_ArgWithManyQueryParams_Result) (*BarResponse, error)
}{}

func init() {
	Bar_ArgWithManyQueryParams_Helper.Args = func(
		aStr string,
		anOptStr *string,
		aBool bool,
		anOptBool *bool,
		aInt8 int8,
		anOptInt8 *int8,
		aInt16 int16,
		anOptInt16 *int16,
		aInt32 int32,
		anOptInt32 *int32,
		aInt64 int64,
		anOptInt64 *int64,
		aFloat64 float64,
		anOptFloat64 *float64,
	) *Bar_ArgWithManyQueryParams_Args {
		return &Bar_ArgWithManyQueryParams_Args{
			AStr:         aStr,
			AnOptStr:     anOptStr,
			ABool:        aBool,
			AnOptBool:    anOptBool,
			AInt8:        aInt8,
			AnOptInt8:    anOptInt8,
			AInt16:       aInt16,
			AnOptInt16:   anOptInt16,
			AInt32:       aInt32,
			AnOptInt32:   anOptInt32,
			AInt64:       aInt64,
			AnOptInt64:   anOptInt64,
			AFloat64:     aFloat64,
			AnOptFloat64: anOptFloat64,
		}
	}

	Bar_ArgWithManyQueryParams_Helper.IsException = func(err error) bool {
		switch err.(type) {
		default:
			return false
		}
	}

	Bar_ArgWithManyQueryParams_Helper.WrapResponse = func(success *BarResponse, err error) (*Bar_ArgWithManyQueryParams_Result, error) {
		if err == nil {
			return &Bar_ArgWithManyQueryParams_Result{Success: success}, nil
		}

		return nil, err
	}
	Bar_ArgWithManyQueryParams_Helper.UnwrapResponse = func(result *Bar_ArgWithManyQueryParams_Result) (success *BarResponse, err error) {

		if result.Success != nil {
			success = result.Success
			return
		}

		err = errors.New("expected a non-void result")
		return
	}

}

// Bar_ArgWithManyQueryParams_Result represents the result of a Bar.argWithManyQueryParams function call.
//
// The result of a argWithManyQueryParams execution is sent and received over the wire as this struct.
//
// Success is set only if the function did not throw an exception.
type Bar_ArgWithManyQueryParams_Result struct {
	// Value returned by argWithManyQueryParams after a successful execution.
	Success *BarResponse `json:"success,omitempty"`
}

// ToWire translates a Bar_ArgWithManyQueryParams_Result struct into a Thrift-level intermediate
// representation. This intermediate representation may be serialized
// into bytes using a ThriftRW protocol implementation.
//
// An error is returned if the struct or any of its fields failed to
// validate.
//
//   x, err := v.ToWire()
//   if err != nil {
//     return err
//   }
//
//   if err := binaryProtocol.Encode(x, writer); err != nil {
//     return err
//   }
func (v *Bar_ArgWithManyQueryParams_Result) ToWire() (wire.Value, error) {
	var (
		fields [1]wire.Field
		i      int = 0
		w      wire.Value
		err    error
	)

	if v.Success != nil {
		w, err = v.Success.ToWire()
		if err != nil {
			return w, err
		}
		fields[i] = wire.Field{ID: 0, Value: w}
		i++
	}

	if i != 1 {
		return wire.Value{}, fmt.Errorf("Bar_ArgWithManyQueryParams_Result should have exactly one field: got %v fields", i)
	}

	return wire.NewValueStruct(wire.Struct{Fields: fields[:i]}), nil
}

// FromWire deserializes a Bar_ArgWithManyQueryParams_Result struct from its Thrift-level
// representation. The Thrift-level representation may be obtained
// from a ThriftRW protocol implementation.
//
// An error is returned if we were unable to build a Bar_ArgWithManyQueryParams_Result struct
// from the provided intermediate representation.
//
//   x, err := binaryProtocol.Decode(reader, wire.TStruct)
//   if err != nil {
//     return nil, err
//   }
//
//   var v Bar_ArgWithManyQueryParams_Result
//   if err := v.FromWire(x); err != nil {
//     return nil, err
//   }
//   return &v, nil
func (v *Bar_ArgWithManyQueryParams_Result) FromWire(w wire.Value) error {
	var err error

	for _, field := range w.GetStruct().Fields {
		switch field.ID {
		case 0:
			if field.Value.Type() == wire.TStruct {
				v.Success, err = _BarResponse_Read(field.Value)
				if err != nil {
					return err
				}

			}
		}
	}

	count := 0
	if v.Success != nil {
		count++
	}
	if count != 1 {
		return fmt.Errorf("Bar_ArgWithManyQueryParams_Result should have exactly one field: got %v fields", count)
	}

	return nil
}

// String returns a readable string representation of a Bar_ArgWithManyQueryParams_Result
// struct.
func (v *Bar_ArgWithManyQueryParams_Result) String() string {
	if v == nil {
		return "<nil>"
	}

	var fields [1]string
	i := 0
	if v.Success != nil {
		fields[i] = fmt.Sprintf("Success: %v", v.Success)
		i++
	}

	return fmt.Sprintf("Bar_ArgWithManyQueryParams_Result{%v}", strings.Join(fields[:i], ", "))
}

// Equals returns true if all the fields of this Bar_ArgWithManyQueryParams_Result match the
// provided Bar_ArgWithManyQueryParams_Result.
//
// This function performs a deep comparison.
func (v *Bar_ArgWithManyQueryParams_Result) Equals(rhs *Bar_ArgWithManyQueryParams_Result) bool {
	if !((v.Success == nil && rhs.Success == nil) || (v.Success != nil && rhs.Success != nil && v.Success.Equals(rhs.Success))) {
		return false
	}

	return true
}

// MethodName returns the name of the Thrift function as specified in
// the IDL, for which this struct represent the result.
//
// This will always be "argWithManyQueryParams" for this struct.
func (v *Bar_ArgWithManyQueryParams_Result) MethodName() string {
	return "argWithManyQueryParams"
}

// EnvelopeType returns the kind of value inside this struct.
//
// This will always be Reply for this struct.
func (v *Bar_ArgWithManyQueryParams_Result) EnvelopeType() wire.EnvelopeType {
	return wire.Reply
}
