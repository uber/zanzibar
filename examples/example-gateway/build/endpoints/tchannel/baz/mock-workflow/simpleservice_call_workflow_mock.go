// Code generated by zanzibar
// @generated

// Copyright (c) 2018 Uber Technologies, Inc.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

package mockbaztchannelworkflow

import (
	"testing"

	"github.com/golang/mock/gomock"
	"go.uber.org/zap"

	bazclientgenerated "github.com/uber/zanzibar/examples/example-gateway/build/clients/baz/mock-client"
	quuxclientgenerated "github.com/uber/zanzibar/examples/example-gateway/build/clients/quux/mock-client"
	module "github.com/uber/zanzibar/examples/example-gateway/build/endpoints/tchannel/baz/module"
	workflow "github.com/uber/zanzibar/examples/example-gateway/build/endpoints/tchannel/baz/workflow"
	fixturequuxclientstatic "github.com/uber/zanzibar/examples/example-gateway/clients/quux/fixture"
	baztchannelendpointstatic "github.com/uber/zanzibar/examples/example-gateway/endpoints/tchannel/baz"
	zanzibar "github.com/uber/zanzibar/runtime"
)

// NewSimpleServiceCallWorkflowMock creates a workflow with mock clients
func NewSimpleServiceCallWorkflowMock(t *testing.T) (workflow.SimpleServiceCallWorkflow, *MockClients) {
	ctrl := gomock.NewController(t)
	mockClients := &MockClients{
		Baz:  bazclientgenerated.NewMockClient(ctrl),
		Quux: quuxclientgenerated.New(ctrl, fixturequuxclientstatic.Fixture),
	}

	mockClientDependencies := &module.ClientDependencies{
		Baz:  mockClients.Baz,
		Quux: mockClients.Quux,
	}

	w := baztchannelendpointstatic.NewSimpleServiceCallWorkflow(
		&module.Dependencies{
			Default: &zanzibar.DefaultDependencies{
				Logger:  zap.NewNop(),
				Scope:   nil,
				Tracer:  nil,
				Config:  nil,
				Channel: nil,
			},
			Client: mockClientDependencies,
		},
	)

	return w, mockClients
}
