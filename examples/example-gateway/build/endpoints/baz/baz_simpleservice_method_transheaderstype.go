// Code generated by zanzibar
// @generated

// Copyright (c) 2018 Uber Technologies, Inc.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

package bazendpoint

import (
	"context"
	"fmt"
	"strconv"

	zanzibar "github.com/uber/zanzibar/runtime"
	"go.uber.org/zap"
	"go.uber.org/zap/zapcore"

	clientsBazBaz "github.com/uber/zanzibar/examples/example-gateway/build/gen-code/clients/baz/baz"
	endpointsBazBaz "github.com/uber/zanzibar/examples/example-gateway/build/gen-code/endpoints/baz/baz"

	module "github.com/uber/zanzibar/examples/example-gateway/build/endpoints/baz/module"
)

// SimpleServiceTransHeadersTypeHandler is the handler for "/baz/trans-header-type"
type SimpleServiceTransHeadersTypeHandler struct {
	Clients  *module.ClientDependencies
	endpoint *zanzibar.RouterEndpoint
}

// NewSimpleServiceTransHeadersTypeHandler creates a handler
func NewSimpleServiceTransHeadersTypeHandler(deps *module.Dependencies) *SimpleServiceTransHeadersTypeHandler {
	handler := &SimpleServiceTransHeadersTypeHandler{
		Clients: deps.Client,
	}
	handler.endpoint = zanzibar.NewRouterEndpoint(
		deps.Default.Logger, deps.Default.Scope,
		"baz", "transHeadersType",
		handler.HandleRequest,
	)
	return handler
}

// Register adds the http handler to the gateway's http router
func (h *SimpleServiceTransHeadersTypeHandler) Register(g *zanzibar.Gateway) error {
	g.HTTPRouter.Register(
		"POST", "/baz/trans-header-type",
		h.endpoint,
	)
	// TODO: register should return errors on route conflicts
	return nil
}

// HandleRequest handles "/baz/trans-header-type".
func (h *SimpleServiceTransHeadersTypeHandler) HandleRequest(
	ctx context.Context,
	req *zanzibar.ServerHTTPRequest,
	res *zanzibar.ServerHTTPResponse,
) {
	if !req.CheckHeaders([]string{"x-boolean", "x-int", "x-float", "x-string"}) {
		return
	}
	var requestBody endpointsBazBaz.SimpleService_TransHeadersType_Args
	if ok := req.ReadAndUnmarshalBody(&requestBody); !ok {
		return
	}

	// log endpoint request to downstream services
	zfields := []zapcore.Field{
		zap.String("endpoint", h.endpoint.EndpointName),
	}

	// TODO: potential perf issue, use zap.Object lazy serialization
	zfields = append(zfields, zap.String("body", fmt.Sprintf("%#v", requestBody)))
	req.Logger.Debug("Endpoint request to downstream", zfields...)

	workflow := SimpleServiceTransHeadersTypeEndpoint{
		Clients: h.Clients,
		Logger:  req.Logger,
		Request: req,
	}

	response, cliRespHeaders, err := workflow.Handle(ctx, req.Header, &requestBody)
	if err != nil {
		switch errValue := err.(type) {

		case *endpointsBazBaz.AuthErr:
			res.WriteJSON(
				401, cliRespHeaders, errValue,
			)
			return

		case *endpointsBazBaz.OtherAuthErr:
			res.WriteJSON(
				403, cliRespHeaders, errValue,
			)
			return

		default:
			res.SendError(500, "Unexpected server error", err)
			return
		}

	}

	res.WriteJSON(200, cliRespHeaders, response)
}

// SimpleServiceTransHeadersTypeEndpoint calls thrift client Baz.TransHeadersType
type SimpleServiceTransHeadersTypeEndpoint struct {
	Clients *module.ClientDependencies
	Logger  *zap.Logger
	Request *zanzibar.ServerHTTPRequest
}

// Handle calls thrift client.
func (w SimpleServiceTransHeadersTypeEndpoint) Handle(
	ctx context.Context,
	reqHeaders zanzibar.Header,
	r *endpointsBazBaz.SimpleService_TransHeadersType_Args,
) (*endpointsBazBaz.TransHeader, zanzibar.Header, error) {
	clientRequest := convertToTransHeadersTypeClientRequest(r)

	clientRequest = propagateHeadersTransHeadersTypeClientRequests(clientRequest, reqHeaders)

	clientHeaders := map[string]string{}

	clientRespBody, _, err := w.Clients.Baz.TransHeadersType(
		ctx, clientHeaders, clientRequest,
	)

	if err != nil {
		switch errValue := err.(type) {

		case *clientsBazBaz.AuthErr:
			serverErr := convertTransHeadersTypeAuthErr(
				errValue,
			)
			// TODO(sindelar): Consider returning partial headers

			return nil, nil, serverErr

		case *clientsBazBaz.OtherAuthErr:
			serverErr := convertTransHeadersTypeOtherAuthErr(
				errValue,
			)
			// TODO(sindelar): Consider returning partial headers

			return nil, nil, serverErr

		default:
			w.Logger.Warn("Could not make client request",
				zap.Error(errValue),
				zap.String("client", "Baz"),
			)

			// TODO(sindelar): Consider returning partial headers

			return nil, nil, err

		}
	}

	// Filter and map response headers from client to server response.

	// TODO: Add support for TChannel Headers with a switch here
	resHeaders := zanzibar.ServerHTTPHeader{}

	response := convertSimpleServiceTransHeadersTypeClientResponse(clientRespBody)
	return response, resHeaders, nil
}

func convertToTransHeadersTypeClientRequest(in *endpointsBazBaz.SimpleService_TransHeadersType_Args) *clientsBazBaz.SimpleService_TransHeadersType_Args {
	out := &clientsBazBaz.SimpleService_TransHeadersType_Args{}

	if in.Req != nil {
		out.Req = &clientsBazBaz.TransHeaderType{}
	} else {
		out.Req = nil
	}

	return out
}

func convertTransHeadersTypeAuthErr(
	clientError *clientsBazBaz.AuthErr,
) *endpointsBazBaz.AuthErr {
	// TODO: Add error fields mapping here.
	serverError := &endpointsBazBaz.AuthErr{}
	return serverError
}
func convertTransHeadersTypeOtherAuthErr(
	clientError *clientsBazBaz.OtherAuthErr,
) *endpointsBazBaz.OtherAuthErr {
	// TODO: Add error fields mapping here.
	serverError := &endpointsBazBaz.OtherAuthErr{}
	return serverError
}

func convertSimpleServiceTransHeadersTypeClientResponse(in *clientsBazBaz.TransHeaderType) *endpointsBazBaz.TransHeader {
	out := &endpointsBazBaz.TransHeader{}

	return out
}

func propagateHeadersTransHeadersTypeClientRequests(in *clientsBazBaz.SimpleService_TransHeadersType_Args, headers zanzibar.Header) *clientsBazBaz.SimpleService_TransHeadersType_Args {
	if key, ok := headers.Get("x-boolean"); ok {
		if in.Req == nil {
			in.Req = &clientsBazBaz.TransHeaderType{}
		}
		if v, err := strconv.ParseBool(key); err == nil {
			in.Req.B1 = v
		}

	}
	if key, ok := headers.Get("x-float"); ok {
		if in.Req == nil {
			in.Req = &clientsBazBaz.TransHeaderType{}
		}
		if v, err := strconv.ParseFloat(key, 64); err == nil {
			in.Req.F3 = &v
		}

	}
	if key, ok := headers.Get("x-int"); ok {
		if in.Req == nil {
			in.Req = &clientsBazBaz.TransHeaderType{}
		}
		if v, err := strconv.ParseInt(key, 10, 32); err == nil {
			val := int32(v)
			in.Req.I1 = &val
		}

	}
	if key, ok := headers.Get("x-int"); ok {
		if in.Req == nil {
			in.Req = &clientsBazBaz.TransHeaderType{}
		}
		if v, err := strconv.ParseInt(key, 10, 64); err == nil {
			in.Req.I2 = v
		}

	}
	if key, ok := headers.Get("x-string"); ok {
		if in.Req == nil {
			in.Req = &clientsBazBaz.TransHeaderType{}
		}
		in.Req.S6 = key

	}
	if key, ok := headers.Get("x-string"); ok {
		if in.Req == nil {
			in.Req = &clientsBazBaz.TransHeaderType{}
		}
		val := clientsBazBaz.UUID(key)
		in.Req.U4 = val

	}
	if key, ok := headers.Get("x-string"); ok {
		if in.Req == nil {
			in.Req = &clientsBazBaz.TransHeaderType{}
		}
		val := clientsBazBaz.UUID(key)
		in.Req.U5 = &val

	}
	return in
}
