// Code generated by zanzibar
// @generated

// Copyright (c) 2018 Uber Technologies, Inc.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

package bazendpoint

import (
	"bytes"
	"context"
	"encoding/json"
	"io/ioutil"
	"strconv"
	"testing"

	"github.com/stretchr/testify/assert"
	"github.com/uber/zanzibar/config"
	testbackend "github.com/uber/zanzibar/test/lib/test_backend"
	testGateway "github.com/uber/zanzibar/test/lib/test_gateway"
	"github.com/uber/zanzibar/test/lib/util"

	bazclient "github.com/uber/zanzibar/examples/example-gateway/build/clients/baz"
	clientsIDlClientsBazBase "github.com/uber/zanzibar/examples/example-gateway/build/gen-code/clients-idl/clients/baz/base"
)

func TestPingSuccessfulRequestOKResponse(t *testing.T) {

	confFiles := util.DefaultConfigFiles("example-gateway")
	staticConf := config.NewRuntimeConfigOrDie(confFiles, map[string]interface{}{})
	var alternateServiceDetail config.AlternateServiceDetail
	if staticConf.ContainsKey("clients.baz.alternates") {
		staticConf.MustGetStruct("clients.baz.alternates", &alternateServiceDetail)
	}
	var backends []*testbackend.TestTChannelBackend
	for serviceName := range alternateServiceDetail.ServicesDetailMap {
		if serviceName == "nomatch" {
			continue
		}
		backend, err := testbackend.CreateTChannelBackend(int32(0), serviceName)
		assert.NoError(t, err)
		err = backend.Bootstrap()
		assert.NoError(t, err)
		backends = append(backends, backend)
	}

	gateway, err := testGateway.CreateGateway(t, map[string]interface{}{
		"clients.baz.serviceName": "bazService",
	}, &testGateway.Options{
		KnownTChannelBackends: []string{"baz"},
		TestBinary:            util.DefaultMainFile("example-gateway"),
		ConfigFiles:           confFiles,
		Backends:              backends,
	})
	if !assert.NoError(t, err, "got bootstrap err") {
		return
	}
	defer gateway.Close()

	fakePing := func(
		ctx context.Context,
		reqHeaders map[string]string,
	) (*clientsIDlClientsBazBase.BazResponse, map[string]string, error) {

		var resHeaders map[string]string

		var res clientsIDlClientsBazBase.BazResponse

		clientResponse := []byte(`{"message":"pong"}`)
		err := json.Unmarshal(clientResponse, &res)
		if err != nil {
			t.Fatal("cant't unmarshal client response json to client response struct")
			return nil, resHeaders, err
		}
		return &res, resHeaders, nil
	}

	headers := map[string]string{}
	err = gateway.TChannelBackends()["baz"].Register(
		"baz", "ping", "SimpleService::ping",
		bazclient.NewSimpleServicePingHandler(fakePing),
	)
	assert.NoError(t, err)
	makeRequestAndValidatePingSuccessfulRequest(t, gateway, headers)

	isSet := true
	i := 1
	for serviceName := range alternateServiceDetail.ServicesDetailMap {
		headers := map[string]string{}

		if serviceName == "nomatch" {
			headers["x-container"] = "randomstr"
			headers["x-test-Env"] = "randomstr"
		} else {
			if isSet {
				headers["x-container"] = "sandbox"
				isSet = false
			} else {
				headers["x-test-Env"] = "test1"
			}
			err = gateway.TChannelBackends()["baz:"+strconv.Itoa(i)].Register(
				"baz", "ping", "SimpleService::ping",
				bazclient.NewSimpleServicePingHandler(fakePing),
			)
			assert.NoError(t, err)
			i++
		}

		makeRequestAndValidatePingSuccessfulRequest(t, gateway, headers)
	}

}

func makeRequestAndValidatePingSuccessfulRequest(t *testing.T, gateway testGateway.TestGateway, headers map[string]string) {

	endpointRequest := []byte(`{}`)

	res, err := gateway.MakeRequest(
		"GET",
		"/baz/ping",
		headers,
		bytes.NewReader(endpointRequest),
	)
	if !assert.NoError(t, err, "got http error") {
		return
	}

	defer func() { _ = res.Body.Close() }()
	data, err := ioutil.ReadAll(res.Body)
	if !assert.NoError(t, err, "failed to read response body") {
		return
	}

	assert.Equal(t, 200, res.StatusCode)
	assert.JSONEq(t, `{"message":"pong"}`, string(data))
}
