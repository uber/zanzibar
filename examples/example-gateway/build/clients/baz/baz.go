// Code generated by zanzibar
// @generated

// Copyright (c) 2018 Uber Technologies, Inc.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

package bazclient

import (
	"context"
	"errors"
	"net/textproto"
	"strconv"
	"strings"
	"time"

	"github.com/afex/hystrix-go/hystrix"
	"github.com/uber/tchannel-go"
	"github.com/uber/zanzibar/config"
	zanzibar "github.com/uber/zanzibar/runtime"
	"github.com/uber/zanzibar/runtime/ruleengine"

	"go.uber.org/zap"

	module "github.com/uber/zanzibar/examples/example-gateway/build/clients/baz/module"
	clientsIDlClientsBazBase "github.com/uber/zanzibar/examples/example-gateway/build/gen-code/clients-idl/clients/baz/base"
	clientsIDlClientsBazBaz "github.com/uber/zanzibar/examples/example-gateway/build/gen-code/clients-idl/clients/baz/baz"
)

// CircuitBreakerConfigKey is key value for qps level to circuit breaker parameters mapping
const CircuitBreakerConfigKey = "circuitbreaking-configurations"

// Client defines baz client interface.
type Client interface {
	EchoBinary(
		ctx context.Context,
		reqHeaders map[string]string,
		args *clientsIDlClientsBazBaz.SecondService_EchoBinary_Args,
		timeoutAndRetryCfg *zanzibar.TimeoutAndRetryOptions,
	) (context.Context, []byte, map[string]string, error)
	EchoBool(
		ctx context.Context,
		reqHeaders map[string]string,
		args *clientsIDlClientsBazBaz.SecondService_EchoBool_Args,
		timeoutAndRetryCfg *zanzibar.TimeoutAndRetryOptions,
	) (context.Context, bool, map[string]string, error)
	EchoDouble(
		ctx context.Context,
		reqHeaders map[string]string,
		args *clientsIDlClientsBazBaz.SecondService_EchoDouble_Args,
		timeoutAndRetryCfg *zanzibar.TimeoutAndRetryOptions,
	) (context.Context, float64, map[string]string, error)
	EchoEnum(
		ctx context.Context,
		reqHeaders map[string]string,
		args *clientsIDlClientsBazBaz.SecondService_EchoEnum_Args,
		timeoutAndRetryCfg *zanzibar.TimeoutAndRetryOptions,
	) (context.Context, clientsIDlClientsBazBaz.Fruit, map[string]string, error)
	EchoI16(
		ctx context.Context,
		reqHeaders map[string]string,
		args *clientsIDlClientsBazBaz.SecondService_EchoI16_Args,
		timeoutAndRetryCfg *zanzibar.TimeoutAndRetryOptions,
	) (context.Context, int16, map[string]string, error)
	EchoI32(
		ctx context.Context,
		reqHeaders map[string]string,
		args *clientsIDlClientsBazBaz.SecondService_EchoI32_Args,
		timeoutAndRetryCfg *zanzibar.TimeoutAndRetryOptions,
	) (context.Context, int32, map[string]string, error)
	EchoI64(
		ctx context.Context,
		reqHeaders map[string]string,
		args *clientsIDlClientsBazBaz.SecondService_EchoI64_Args,
		timeoutAndRetryCfg *zanzibar.TimeoutAndRetryOptions,
	) (context.Context, int64, map[string]string, error)
	EchoI8(
		ctx context.Context,
		reqHeaders map[string]string,
		args *clientsIDlClientsBazBaz.SecondService_EchoI8_Args,
		timeoutAndRetryCfg *zanzibar.TimeoutAndRetryOptions,
	) (context.Context, int8, map[string]string, error)
	EchoString(
		ctx context.Context,
		reqHeaders map[string]string,
		args *clientsIDlClientsBazBaz.SecondService_EchoString_Args,
		timeoutAndRetryCfg *zanzibar.TimeoutAndRetryOptions,
	) (context.Context, string, map[string]string, error)
	EchoStringList(
		ctx context.Context,
		reqHeaders map[string]string,
		args *clientsIDlClientsBazBaz.SecondService_EchoStringList_Args,
		timeoutAndRetryCfg *zanzibar.TimeoutAndRetryOptions,
	) (context.Context, []string, map[string]string, error)
	EchoStringMap(
		ctx context.Context,
		reqHeaders map[string]string,
		args *clientsIDlClientsBazBaz.SecondService_EchoStringMap_Args,
		timeoutAndRetryCfg *zanzibar.TimeoutAndRetryOptions,
	) (context.Context, map[string]*clientsIDlClientsBazBase.BazResponse, map[string]string, error)
	EchoStringSet(
		ctx context.Context,
		reqHeaders map[string]string,
		args *clientsIDlClientsBazBaz.SecondService_EchoStringSet_Args,
		timeoutAndRetryCfg *zanzibar.TimeoutAndRetryOptions,
	) (context.Context, map[string]struct{}, map[string]string, error)
	EchoStructList(
		ctx context.Context,
		reqHeaders map[string]string,
		args *clientsIDlClientsBazBaz.SecondService_EchoStructList_Args,
		timeoutAndRetryCfg *zanzibar.TimeoutAndRetryOptions,
	) (context.Context, []*clientsIDlClientsBazBase.BazResponse, map[string]string, error)

	EchoStructSet(
		ctx context.Context,
		reqHeaders map[string]string,
		args *clientsIDlClientsBazBaz.SecondService_EchoStructSet_Args,
		timeoutAndRetryCfg *zanzibar.TimeoutAndRetryOptions,
	) (context.Context, []*clientsIDlClientsBazBase.BazResponse, map[string]string, error)
	EchoTypedef(
		ctx context.Context,
		reqHeaders map[string]string,
		args *clientsIDlClientsBazBaz.SecondService_EchoTypedef_Args,
		timeoutAndRetryCfg *zanzibar.TimeoutAndRetryOptions,
	) (context.Context, clientsIDlClientsBazBase.UUID, map[string]string, error)

	Call(
		ctx context.Context,
		reqHeaders map[string]string,
		args *clientsIDlClientsBazBaz.SimpleService_Call_Args,
		timeoutAndRetryCfg *zanzibar.TimeoutAndRetryOptions,
	) (context.Context, map[string]string, error)
	Compare(
		ctx context.Context,
		reqHeaders map[string]string,
		args *clientsIDlClientsBazBaz.SimpleService_Compare_Args,
		timeoutAndRetryCfg *zanzibar.TimeoutAndRetryOptions,
	) (context.Context, *clientsIDlClientsBazBase.BazResponse, map[string]string, error)
	GetProfile(
		ctx context.Context,
		reqHeaders map[string]string,
		args *clientsIDlClientsBazBaz.SimpleService_GetProfile_Args,
		timeoutAndRetryCfg *zanzibar.TimeoutAndRetryOptions,
	) (context.Context, *clientsIDlClientsBazBaz.GetProfileResponse, map[string]string, error)
	HeaderSchema(
		ctx context.Context,
		reqHeaders map[string]string,
		args *clientsIDlClientsBazBaz.SimpleService_HeaderSchema_Args,
		timeoutAndRetryCfg *zanzibar.TimeoutAndRetryOptions,
	) (context.Context, *clientsIDlClientsBazBaz.HeaderSchema, map[string]string, error)
	Ping(
		ctx context.Context,
		reqHeaders map[string]string,
		timeoutAndRetryCfg *zanzibar.TimeoutAndRetryOptions,
	) (context.Context, *clientsIDlClientsBazBase.BazResponse, map[string]string, error)
	DeliberateDiffNoop(
		ctx context.Context,
		reqHeaders map[string]string,
		timeoutAndRetryCfg *zanzibar.TimeoutAndRetryOptions,
	) (context.Context, map[string]string, error)
	TestUUID(
		ctx context.Context,
		reqHeaders map[string]string,
		timeoutAndRetryCfg *zanzibar.TimeoutAndRetryOptions,
	) (context.Context, map[string]string, error)
	Trans(
		ctx context.Context,
		reqHeaders map[string]string,
		args *clientsIDlClientsBazBaz.SimpleService_Trans_Args,
		timeoutAndRetryCfg *zanzibar.TimeoutAndRetryOptions,
	) (context.Context, *clientsIDlClientsBazBase.TransStruct, map[string]string, error)
	TransHeaders(
		ctx context.Context,
		reqHeaders map[string]string,
		args *clientsIDlClientsBazBaz.SimpleService_TransHeaders_Args,
		timeoutAndRetryCfg *zanzibar.TimeoutAndRetryOptions,
	) (context.Context, *clientsIDlClientsBazBase.TransHeaders, map[string]string, error)
	TransHeadersNoReq(
		ctx context.Context,
		reqHeaders map[string]string,
		args *clientsIDlClientsBazBaz.SimpleService_TransHeadersNoReq_Args,
		timeoutAndRetryCfg *zanzibar.TimeoutAndRetryOptions,
	) (context.Context, *clientsIDlClientsBazBase.TransHeaders, map[string]string, error)
	TransHeadersType(
		ctx context.Context,
		reqHeaders map[string]string,
		args *clientsIDlClientsBazBaz.SimpleService_TransHeadersType_Args,
		timeoutAndRetryCfg *zanzibar.TimeoutAndRetryOptions,
	) (context.Context, *clientsIDlClientsBazBaz.TransHeaderType, map[string]string, error)
	URLTest(
		ctx context.Context,
		reqHeaders map[string]string,
		timeoutAndRetryCfg *zanzibar.TimeoutAndRetryOptions,
	) (context.Context, map[string]string, error)
}

// NewClient returns a new TChannel client for service baz.
func NewClient(deps *module.Dependencies) Client {
	serviceName := deps.Default.Config.MustGetString("clients.baz.serviceName")
	var routingKey string
	if deps.Default.Config.ContainsKey("clients.baz.routingKey") {
		routingKey = deps.Default.Config.MustGetString("clients.baz.routingKey")
	}
	var requestUUIDHeaderKey string
	if deps.Default.Config.ContainsKey("tchannel.clients.requestUUIDHeaderKey") {
		requestUUIDHeaderKey = deps.Default.Config.MustGetString("tchannel.clients.requestUUIDHeaderKey")
	}

	ip := deps.Default.Config.MustGetString("clients.baz.ip")
	port := deps.Default.Config.MustGetInt("clients.baz.port")
	gateway := deps.Default.Gateway
	var channel *tchannel.Channel

	// If dedicated.tchannel.client : true, each tchannel client will create a
	// dedicated connection with local sidecar, else it will use a shared connection
	if deps.Default.Config.ContainsKey("dedicated.tchannel.client") &&
		deps.Default.Config.MustGetBoolean("dedicated.tchannel.client") {
		channel = gateway.SetupClientTChannel(deps.Default.Config, serviceName)
		channel.Peers().Add(ip + ":" + strconv.Itoa(int(port)))
	} else {
		channel = gateway.ServerTChannel
		channel.GetSubChannel(serviceName, tchannel.Isolated).Peers().Add(ip + ":" + strconv.Itoa(int(port)))
	}

	/*Ex:
	{
		"clients.rider-presentation.alternates": {
			"routingConfigs": [
				{
					"headerName": "x-test-env",
					"headerValue": "*",
					"serviceName": "testservice"
				},
				{
					"headerName": "x-container",
					"headerValue": "container*",
					"serviceName": "relayer"
				}
			],
			"servicesDetail": {
				"testservice": {
					"ip": "127.0.0.1",
					"port": 5000
				},
				"relayer": {
					"ip": "127.0.0.1",
					"port": 12000
				}
			}
		}
	}*/
	var re ruleengine.RuleEngine
	var headerPatterns []string
	altChannelMap := make(map[string]*tchannel.SubChannel)
	headerPatterns, re = initializeDynamicChannel(channel, deps, headerPatterns, altChannelMap, re)

	timeoutVal := int(deps.Default.Config.MustGetInt("clients.baz.timeout"))
	timeout := time.Millisecond * time.Duration(
		timeoutVal,
	)
	timeoutPerAttempt := time.Millisecond * time.Duration(
		deps.Default.Config.MustGetInt("clients.baz.timeoutPerAttempt"),
	)

	methodNames := map[string]string{
		"SecondService::echoBinary":        "EchoBinary",
		"SecondService::echoBool":          "EchoBool",
		"SecondService::echoDouble":        "EchoDouble",
		"SecondService::echoEnum":          "EchoEnum",
		"SecondService::echoI16":           "EchoI16",
		"SecondService::echoI32":           "EchoI32",
		"SecondService::echoI64":           "EchoI64",
		"SecondService::echoI8":            "EchoI8",
		"SecondService::echoString":        "EchoString",
		"SecondService::echoStringList":    "EchoStringList",
		"SecondService::echoStringMap":     "EchoStringMap",
		"SecondService::echoStringSet":     "EchoStringSet",
		"SecondService::echoStructList":    "EchoStructList",
		"SecondService::echoStructSet":     "EchoStructSet",
		"SecondService::echoTypedef":       "EchoTypedef",
		"SimpleService::call":              "Call",
		"SimpleService::compare":           "Compare",
		"SimpleService::getProfile":        "GetProfile",
		"SimpleService::headerSchema":      "HeaderSchema",
		"SimpleService::ping":              "Ping",
		"SimpleService::sillyNoop":         "DeliberateDiffNoop",
		"SimpleService::testUuid":          "TestUUID",
		"SimpleService::trans":             "Trans",
		"SimpleService::transHeaders":      "TransHeaders",
		"SimpleService::transHeadersNoReq": "TransHeadersNoReq",
		"SimpleService::transHeadersType":  "TransHeadersType",
		"SimpleService::urlTest":           "URLTest",
	}

	//get mapping of client method and it's timeout
	//if mapping is not provided, use client's timeout for all the methods
	clientMethodTimeoutMapping := make(map[string]int64)
	if deps.Default.Config.ContainsKey("clients.baz.methodTimeoutMapping") {
		deps.Default.Config.MustGetStruct("clients.baz.methodTimeoutMapping", &clientMethodTimeoutMapping)
	} else {
		for _, methodName := range methodNames {
			clientMethodTimeoutMapping[methodName] = int64(timeoutVal)
		}
	}

	qpsLevels := map[string]string{
		"baz-Call":               "4",
		"baz-Compare":            "2",
		"baz-DeliberateDiffNoop": "3",
		"baz-EchoBinary":         "default",
		"baz-EchoBool":           "default",
		"baz-EchoDouble":         "default",
		"baz-EchoEnum":           "default",
		"baz-EchoI16":            "default",
		"baz-EchoI32":            "default",
		"baz-EchoI64":            "default",
		"baz-EchoI8":             "default",
		"baz-EchoString":         "default",
		"baz-EchoStringList":     "default",
		"baz-EchoStringMap":      "default",
		"baz-EchoStringSet":      "default",
		"baz-EchoStructList":     "default",
		"baz-EchoStructSet":      "default",
		"baz-EchoTypedef":        "default",
		"baz-GetProfile":         "2",
		"baz-HeaderSchema":       "1",
		"baz-Ping":               "1",
		"baz-TestUUID":           "default",
		"baz-Trans":              "2",
		"baz-TransHeaders":       "2",
		"baz-TransHeadersNoReq":  "2",
		"baz-TransHeadersType":   "2",
		"baz-URLTest":            "default",
	}

	// circuitBreakerDisabled sets whether circuit-breaker should be disabled
	circuitBreakerDisabled := false
	if deps.Default.Config.ContainsKey("clients.baz.circuitBreakerDisabled") {
		circuitBreakerDisabled = deps.Default.Config.MustGetBoolean("clients.baz.circuitBreakerDisabled")
	}

	if !circuitBreakerDisabled {
		for methodName, methodTimeoutVal := range clientMethodTimeoutMapping {
			circuitBreakerName := "baz" + "-" + methodName
			qpsLevel := "default"
			if level, ok := qpsLevels[circuitBreakerName]; ok {
				qpsLevel = level
			}
			configureCircuitBreaker(deps, int(methodTimeoutVal), circuitBreakerName, qpsLevel)
		}
	}

	var client *zanzibar.TChannelClient

	if deps.Default.Config.ContainsKey("tchannelclients.retryCount.feature.enabled") && deps.Default.Config.MustGetBoolean("tchannelclients.retryCount.feature.enabled") && deps.Default.Config.ContainsKey("clients.baz.retryCount") && int(deps.Default.Config.MustGetInt("clients.baz.retryCount")) > 0 {
		maxAttempts := int(deps.Default.Config.MustGetInt("clients.baz.retryCount"))
		client = zanzibar.NewTChannelClientContext(
			channel,
			deps.Default.ContextLogger,
			deps.Default.ContextMetrics,
			deps.Default.ContextExtractor,
			&zanzibar.TChannelClientOption{
				ServiceName:          serviceName,
				ClientID:             "baz",
				MethodNames:          methodNames,
				Timeout:              timeout,
				TimeoutPerAttempt:    timeoutPerAttempt,
				RoutingKey:           &routingKey,
				RuleEngine:           re,
				HeaderPatterns:       headerPatterns,
				RequestUUIDHeaderKey: requestUUIDHeaderKey,
				AltChannelMap:        altChannelMap,
				MaxAttempts:          maxAttempts,
			},
		)
	} else {
		client = zanzibar.NewTChannelClientContext(
			channel,
			deps.Default.ContextLogger,
			deps.Default.ContextMetrics,
			deps.Default.ContextExtractor,
			&zanzibar.TChannelClientOption{
				ServiceName:          serviceName,
				ClientID:             "baz",
				MethodNames:          methodNames,
				Timeout:              timeout,
				TimeoutPerAttempt:    timeoutPerAttempt,
				RoutingKey:           &routingKey,
				RuleEngine:           re,
				HeaderPatterns:       headerPatterns,
				RequestUUIDHeaderKey: requestUUIDHeaderKey,
				AltChannelMap:        altChannelMap,
			},
		)
	}

	return &bazClient{
		client:                 client,
		circuitBreakerDisabled: circuitBreakerDisabled,
		defaultDeps:            deps.Default,
	}
}

func initializeDynamicChannel(channel *tchannel.Channel, deps *module.Dependencies, headerPatterns []string, altChannelMap map[string]*tchannel.SubChannel, re ruleengine.RuleEngine) ([]string, ruleengine.RuleEngine) {
	if deps.Default.Config.ContainsKey("clients.baz.alternates") {
		var alternateServiceDetail config.AlternateServiceDetail
		deps.Default.Config.MustGetStruct("clients.baz.alternates", &alternateServiceDetail)

		ruleWrapper := ruleengine.RuleWrapper{}
		for _, routingConfig := range alternateServiceDetail.RoutingConfigs {
			ruleValue := []string{routingConfig.ServiceName}
			rd := routingConfig.RoutingDelegate
			if rd != nil {
				ruleValue = append(ruleValue, *rd)
			}
			rawRule := ruleengine.RawRule{Patterns: []string{textproto.CanonicalMIMEHeaderKey(routingConfig.HeaderName),
				strings.ToLower(routingConfig.HeaderValue)}, Value: ruleValue}
			headerPatterns = append(headerPatterns, textproto.CanonicalMIMEHeaderKey(routingConfig.HeaderName))
			ruleWrapper.Rules = append(ruleWrapper.Rules, rawRule)

			scAlt := channel.GetSubChannel(routingConfig.ServiceName, tchannel.Isolated)
			serviceRouting, ok := alternateServiceDetail.ServicesDetailMap[routingConfig.ServiceName]
			if !ok {
				panic("service routing mapping incorrect for service: " + routingConfig.ServiceName)
			}
			scAlt.Peers().Add(serviceRouting.IP + ":" + strconv.Itoa(serviceRouting.Port))
			altChannelMap[routingConfig.ServiceName] = scAlt
		}

		re = ruleengine.NewRuleEngine(ruleWrapper)
	}
	return headerPatterns, re
}

// CircuitBreakerConfig is used for storing the circuit breaker parameters for each qps level
type CircuitBreakerConfig struct {
	Parameters map[string]map[string]int
}

func configureCircuitBreaker(deps *module.Dependencies, timeoutVal int, circuitBreakerName string, qpsLevel string) {
	// sleepWindowInMilliseconds sets the amount of time, after tripping the circuit,
	// to reject requests before allowing attempts again to determine if the circuit should again be closed
	sleepWindowInMilliseconds := 5000
	// maxConcurrentRequests sets how many requests can be run at the same time, beyond which requests are rejected
	maxConcurrentRequests := 20
	// errorPercentThreshold sets the error percentage at or above which the circuit should trip open
	errorPercentThreshold := 20
	// requestVolumeThreshold sets a minimum number of requests that will trip the circuit in a rolling window of 10s
	// For example, if the value is 20, then if only 19 requests are received in the rolling window of 10 seconds
	// the circuit will not trip open even if all 19 failed.
	requestVolumeThreshold := 20
	// parses circuit breaker configurations
	if deps.Default.Config.ContainsKey(CircuitBreakerConfigKey) {
		var config CircuitBreakerConfig
		deps.Default.Config.MustGetStruct(CircuitBreakerConfigKey, &config)
		parameters := config.Parameters
		// first checks if level exists in configurations then assigns parameters
		// if "default" qps level assigns default parameters from circuit breaker configurations
		if settings, ok := parameters[qpsLevel]; ok {
			if sleep, ok := settings["sleepWindowInMilliseconds"]; ok {
				sleepWindowInMilliseconds = sleep
			}
			if max, ok := settings["maxConcurrentRequests"]; ok {
				maxConcurrentRequests = max
			}
			if errorPercent, ok := settings["errorPercentThreshold"]; ok {
				errorPercentThreshold = errorPercent
			}
			if reqVolThreshold, ok := settings["requestVolumeThreshold"]; ok {
				requestVolumeThreshold = reqVolThreshold
			}
		}
	}
	// client settings override parameters
	if deps.Default.Config.ContainsKey("clients.baz.sleepWindowInMilliseconds") {
		sleepWindowInMilliseconds = int(deps.Default.Config.MustGetInt("clients.baz.sleepWindowInMilliseconds"))
	}
	if deps.Default.Config.ContainsKey("clients.baz.maxConcurrentRequests") {
		maxConcurrentRequests = int(deps.Default.Config.MustGetInt("clients.baz.maxConcurrentRequests"))
	}
	if deps.Default.Config.ContainsKey("clients.baz.errorPercentThreshold") {
		errorPercentThreshold = int(deps.Default.Config.MustGetInt("clients.baz.errorPercentThreshold"))
	}
	if deps.Default.Config.ContainsKey("clients.baz.requestVolumeThreshold") {
		requestVolumeThreshold = int(deps.Default.Config.MustGetInt("clients.baz.requestVolumeThreshold"))
	}
	hystrix.ConfigureCommand(circuitBreakerName, hystrix.CommandConfig{
		MaxConcurrentRequests:  maxConcurrentRequests,
		ErrorPercentThreshold:  errorPercentThreshold,
		SleepWindow:            sleepWindowInMilliseconds,
		RequestVolumeThreshold: requestVolumeThreshold,
		Timeout:                timeoutVal,
	})
}

// bazClient is the TChannel client for downstream service.
type bazClient struct {
	client                 *zanzibar.TChannelClient
	circuitBreakerDisabled bool
	defaultDeps            *zanzibar.DefaultDependencies
}

// EchoBinary is a client RPC call for method "SecondService::echoBinary"
func (c *bazClient) EchoBinary(
	ctx context.Context,
	reqHeaders map[string]string,
	args *clientsIDlClientsBazBaz.SecondService_EchoBinary_Args,
	timeoutAndRetryCfg *zanzibar.TimeoutAndRetryOptions,
) (context.Context, []byte, map[string]string, error) {
	var result clientsIDlClientsBazBaz.SecondService_EchoBinary_Result
	var resp []byte

	logger := c.client.ContextLogger

	var success bool
	respHeaders := make(map[string]string)
	var err error
	if c.circuitBreakerDisabled {
		success, respHeaders, err = c.client.Call(
			ctx, "SecondService", "echoBinary", reqHeaders, args, &result, timeoutAndRetryCfg,
		)
	} else {
		// We want hystrix ckt-breaker to count errors only for system issues
		var clientErr error
		scope := c.defaultDeps.Scope.Tagged(map[string]string{
			"client":     "baz",
			"methodName": "EchoBinary",
		})
		start := time.Now()
		circuitBreakerName := "baz" + "-" + "EchoBinary"
		err = hystrix.DoC(ctx, circuitBreakerName, func(ctx context.Context) error {
			elapsed := time.Now().Sub(start)
			scope.Timer("hystrix-timer").Record(elapsed)
			success, respHeaders, clientErr = c.client.Call(
				ctx, "SecondService", "echoBinary", reqHeaders, args, &result, timeoutAndRetryCfg,
			)
			if _, isSysErr := clientErr.(tchannel.SystemError); !isSysErr {
				// Declare ok if it is not a system-error
				return nil
			}
			return clientErr
		}, nil)
		if err == nil {
			// ckt-breaker was ok, bubble up client error if set
			err = clientErr
		}
	}

	if err == nil && !success {
		switch {
		case result.Success != nil:
			ctx = logger.ErrorZ(ctx, "Internal error. Success flag is not set for EchoBinary. Overriding", zap.Error(err))
			success = true
		default:
			err = errors.New("bazClient received no result or unknown exception for EchoBinary")
		}
	}
	if err != nil {
		ctx = logger.WarnZ(ctx, "Client failure: TChannel client call returned error", zap.Error(err))
		return ctx, resp, respHeaders, err
	}

	resp, err = clientsIDlClientsBazBaz.SecondService_EchoBinary_Helper.UnwrapResponse(&result)
	if err != nil {
		ctx = logger.WarnZ(ctx, "Client failure: unable to unwrap client response", zap.Error(err))
	}
	return ctx, resp, respHeaders, err
}

// EchoBool is a client RPC call for method "SecondService::echoBool"
func (c *bazClient) EchoBool(
	ctx context.Context,
	reqHeaders map[string]string,
	args *clientsIDlClientsBazBaz.SecondService_EchoBool_Args,
	timeoutAndRetryCfg *zanzibar.TimeoutAndRetryOptions,
) (context.Context, bool, map[string]string, error) {
	var result clientsIDlClientsBazBaz.SecondService_EchoBool_Result
	var resp bool

	logger := c.client.ContextLogger

	var success bool
	respHeaders := make(map[string]string)
	var err error
	if c.circuitBreakerDisabled {
		success, respHeaders, err = c.client.Call(
			ctx, "SecondService", "echoBool", reqHeaders, args, &result, timeoutAndRetryCfg,
		)
	} else {
		// We want hystrix ckt-breaker to count errors only for system issues
		var clientErr error
		scope := c.defaultDeps.Scope.Tagged(map[string]string{
			"client":     "baz",
			"methodName": "EchoBool",
		})
		start := time.Now()
		circuitBreakerName := "baz" + "-" + "EchoBool"
		err = hystrix.DoC(ctx, circuitBreakerName, func(ctx context.Context) error {
			elapsed := time.Now().Sub(start)
			scope.Timer("hystrix-timer").Record(elapsed)
			success, respHeaders, clientErr = c.client.Call(
				ctx, "SecondService", "echoBool", reqHeaders, args, &result, timeoutAndRetryCfg,
			)
			if _, isSysErr := clientErr.(tchannel.SystemError); !isSysErr {
				// Declare ok if it is not a system-error
				return nil
			}
			return clientErr
		}, nil)
		if err == nil {
			// ckt-breaker was ok, bubble up client error if set
			err = clientErr
		}
	}

	if err == nil && !success {
		switch {
		case result.Success != nil:
			ctx = logger.ErrorZ(ctx, "Internal error. Success flag is not set for EchoBool. Overriding", zap.Error(err))
			success = true
		default:
			err = errors.New("bazClient received no result or unknown exception for EchoBool")
		}
	}
	if err != nil {
		ctx = logger.WarnZ(ctx, "Client failure: TChannel client call returned error", zap.Error(err))
		return ctx, resp, respHeaders, err
	}

	resp, err = clientsIDlClientsBazBaz.SecondService_EchoBool_Helper.UnwrapResponse(&result)
	if err != nil {
		ctx = logger.WarnZ(ctx, "Client failure: unable to unwrap client response", zap.Error(err))
	}
	return ctx, resp, respHeaders, err
}

// EchoDouble is a client RPC call for method "SecondService::echoDouble"
func (c *bazClient) EchoDouble(
	ctx context.Context,
	reqHeaders map[string]string,
	args *clientsIDlClientsBazBaz.SecondService_EchoDouble_Args,
	timeoutAndRetryCfg *zanzibar.TimeoutAndRetryOptions,
) (context.Context, float64, map[string]string, error) {
	var result clientsIDlClientsBazBaz.SecondService_EchoDouble_Result
	var resp float64

	logger := c.client.ContextLogger

	var success bool
	respHeaders := make(map[string]string)
	var err error
	if c.circuitBreakerDisabled {
		success, respHeaders, err = c.client.Call(
			ctx, "SecondService", "echoDouble", reqHeaders, args, &result, timeoutAndRetryCfg,
		)
	} else {
		// We want hystrix ckt-breaker to count errors only for system issues
		var clientErr error
		scope := c.defaultDeps.Scope.Tagged(map[string]string{
			"client":     "baz",
			"methodName": "EchoDouble",
		})
		start := time.Now()
		circuitBreakerName := "baz" + "-" + "EchoDouble"
		err = hystrix.DoC(ctx, circuitBreakerName, func(ctx context.Context) error {
			elapsed := time.Now().Sub(start)
			scope.Timer("hystrix-timer").Record(elapsed)
			success, respHeaders, clientErr = c.client.Call(
				ctx, "SecondService", "echoDouble", reqHeaders, args, &result, timeoutAndRetryCfg,
			)
			if _, isSysErr := clientErr.(tchannel.SystemError); !isSysErr {
				// Declare ok if it is not a system-error
				return nil
			}
			return clientErr
		}, nil)
		if err == nil {
			// ckt-breaker was ok, bubble up client error if set
			err = clientErr
		}
	}

	if err == nil && !success {
		switch {
		case result.Success != nil:
			ctx = logger.ErrorZ(ctx, "Internal error. Success flag is not set for EchoDouble. Overriding", zap.Error(err))
			success = true
		default:
			err = errors.New("bazClient received no result or unknown exception for EchoDouble")
		}
	}
	if err != nil {
		ctx = logger.WarnZ(ctx, "Client failure: TChannel client call returned error", zap.Error(err))
		return ctx, resp, respHeaders, err
	}

	resp, err = clientsIDlClientsBazBaz.SecondService_EchoDouble_Helper.UnwrapResponse(&result)
	if err != nil {
		ctx = logger.WarnZ(ctx, "Client failure: unable to unwrap client response", zap.Error(err))
	}
	return ctx, resp, respHeaders, err
}

// EchoEnum is a client RPC call for method "SecondService::echoEnum"
func (c *bazClient) EchoEnum(
	ctx context.Context,
	reqHeaders map[string]string,
	args *clientsIDlClientsBazBaz.SecondService_EchoEnum_Args,
	timeoutAndRetryCfg *zanzibar.TimeoutAndRetryOptions,
) (context.Context, clientsIDlClientsBazBaz.Fruit, map[string]string, error) {
	var result clientsIDlClientsBazBaz.SecondService_EchoEnum_Result
	var resp clientsIDlClientsBazBaz.Fruit

	logger := c.client.ContextLogger

	var success bool
	respHeaders := make(map[string]string)
	var err error
	if c.circuitBreakerDisabled {
		success, respHeaders, err = c.client.Call(
			ctx, "SecondService", "echoEnum", reqHeaders, args, &result, timeoutAndRetryCfg,
		)
	} else {
		// We want hystrix ckt-breaker to count errors only for system issues
		var clientErr error
		scope := c.defaultDeps.Scope.Tagged(map[string]string{
			"client":     "baz",
			"methodName": "EchoEnum",
		})
		start := time.Now()
		circuitBreakerName := "baz" + "-" + "EchoEnum"
		err = hystrix.DoC(ctx, circuitBreakerName, func(ctx context.Context) error {
			elapsed := time.Now().Sub(start)
			scope.Timer("hystrix-timer").Record(elapsed)
			success, respHeaders, clientErr = c.client.Call(
				ctx, "SecondService", "echoEnum", reqHeaders, args, &result, timeoutAndRetryCfg,
			)
			if _, isSysErr := clientErr.(tchannel.SystemError); !isSysErr {
				// Declare ok if it is not a system-error
				return nil
			}
			return clientErr
		}, nil)
		if err == nil {
			// ckt-breaker was ok, bubble up client error if set
			err = clientErr
		}
	}

	if err == nil && !success {
		switch {
		case result.Success != nil:
			ctx = logger.ErrorZ(ctx, "Internal error. Success flag is not set for EchoEnum. Overriding", zap.Error(err))
			success = true
		default:
			err = errors.New("bazClient received no result or unknown exception for EchoEnum")
		}
	}
	if err != nil {
		ctx = logger.WarnZ(ctx, "Client failure: TChannel client call returned error", zap.Error(err))
		return ctx, resp, respHeaders, err
	}

	resp, err = clientsIDlClientsBazBaz.SecondService_EchoEnum_Helper.UnwrapResponse(&result)
	if err != nil {
		ctx = logger.WarnZ(ctx, "Client failure: unable to unwrap client response", zap.Error(err))
	}
	return ctx, resp, respHeaders, err
}

// EchoI16 is a client RPC call for method "SecondService::echoI16"
func (c *bazClient) EchoI16(
	ctx context.Context,
	reqHeaders map[string]string,
	args *clientsIDlClientsBazBaz.SecondService_EchoI16_Args,
	timeoutAndRetryCfg *zanzibar.TimeoutAndRetryOptions,
) (context.Context, int16, map[string]string, error) {
	var result clientsIDlClientsBazBaz.SecondService_EchoI16_Result
	var resp int16

	logger := c.client.ContextLogger

	var success bool
	respHeaders := make(map[string]string)
	var err error
	if c.circuitBreakerDisabled {
		success, respHeaders, err = c.client.Call(
			ctx, "SecondService", "echoI16", reqHeaders, args, &result, timeoutAndRetryCfg,
		)
	} else {
		// We want hystrix ckt-breaker to count errors only for system issues
		var clientErr error
		scope := c.defaultDeps.Scope.Tagged(map[string]string{
			"client":     "baz",
			"methodName": "EchoI16",
		})
		start := time.Now()
		circuitBreakerName := "baz" + "-" + "EchoI16"
		err = hystrix.DoC(ctx, circuitBreakerName, func(ctx context.Context) error {
			elapsed := time.Now().Sub(start)
			scope.Timer("hystrix-timer").Record(elapsed)
			success, respHeaders, clientErr = c.client.Call(
				ctx, "SecondService", "echoI16", reqHeaders, args, &result, timeoutAndRetryCfg,
			)
			if _, isSysErr := clientErr.(tchannel.SystemError); !isSysErr {
				// Declare ok if it is not a system-error
				return nil
			}
			return clientErr
		}, nil)
		if err == nil {
			// ckt-breaker was ok, bubble up client error if set
			err = clientErr
		}
	}

	if err == nil && !success {
		switch {
		case result.Success != nil:
			ctx = logger.ErrorZ(ctx, "Internal error. Success flag is not set for EchoI16. Overriding", zap.Error(err))
			success = true
		default:
			err = errors.New("bazClient received no result or unknown exception for EchoI16")
		}
	}
	if err != nil {
		ctx = logger.WarnZ(ctx, "Client failure: TChannel client call returned error", zap.Error(err))
		return ctx, resp, respHeaders, err
	}

	resp, err = clientsIDlClientsBazBaz.SecondService_EchoI16_Helper.UnwrapResponse(&result)
	if err != nil {
		ctx = logger.WarnZ(ctx, "Client failure: unable to unwrap client response", zap.Error(err))
	}
	return ctx, resp, respHeaders, err
}

// EchoI32 is a client RPC call for method "SecondService::echoI32"
func (c *bazClient) EchoI32(
	ctx context.Context,
	reqHeaders map[string]string,
	args *clientsIDlClientsBazBaz.SecondService_EchoI32_Args,
	timeoutAndRetryCfg *zanzibar.TimeoutAndRetryOptions,
) (context.Context, int32, map[string]string, error) {
	var result clientsIDlClientsBazBaz.SecondService_EchoI32_Result
	var resp int32

	logger := c.client.ContextLogger

	var success bool
	respHeaders := make(map[string]string)
	var err error
	if c.circuitBreakerDisabled {
		success, respHeaders, err = c.client.Call(
			ctx, "SecondService", "echoI32", reqHeaders, args, &result, timeoutAndRetryCfg,
		)
	} else {
		// We want hystrix ckt-breaker to count errors only for system issues
		var clientErr error
		scope := c.defaultDeps.Scope.Tagged(map[string]string{
			"client":     "baz",
			"methodName": "EchoI32",
		})
		start := time.Now()
		circuitBreakerName := "baz" + "-" + "EchoI32"
		err = hystrix.DoC(ctx, circuitBreakerName, func(ctx context.Context) error {
			elapsed := time.Now().Sub(start)
			scope.Timer("hystrix-timer").Record(elapsed)
			success, respHeaders, clientErr = c.client.Call(
				ctx, "SecondService", "echoI32", reqHeaders, args, &result, timeoutAndRetryCfg,
			)
			if _, isSysErr := clientErr.(tchannel.SystemError); !isSysErr {
				// Declare ok if it is not a system-error
				return nil
			}
			return clientErr
		}, nil)
		if err == nil {
			// ckt-breaker was ok, bubble up client error if set
			err = clientErr
		}
	}

	if err == nil && !success {
		switch {
		case result.Success != nil:
			ctx = logger.ErrorZ(ctx, "Internal error. Success flag is not set for EchoI32. Overriding", zap.Error(err))
			success = true
		default:
			err = errors.New("bazClient received no result or unknown exception for EchoI32")
		}
	}
	if err != nil {
		ctx = logger.WarnZ(ctx, "Client failure: TChannel client call returned error", zap.Error(err))
		return ctx, resp, respHeaders, err
	}

	resp, err = clientsIDlClientsBazBaz.SecondService_EchoI32_Helper.UnwrapResponse(&result)
	if err != nil {
		ctx = logger.WarnZ(ctx, "Client failure: unable to unwrap client response", zap.Error(err))
	}
	return ctx, resp, respHeaders, err
}

// EchoI64 is a client RPC call for method "SecondService::echoI64"
func (c *bazClient) EchoI64(
	ctx context.Context,
	reqHeaders map[string]string,
	args *clientsIDlClientsBazBaz.SecondService_EchoI64_Args,
	timeoutAndRetryCfg *zanzibar.TimeoutAndRetryOptions,
) (context.Context, int64, map[string]string, error) {
	var result clientsIDlClientsBazBaz.SecondService_EchoI64_Result
	var resp int64

	logger := c.client.ContextLogger

	var success bool
	respHeaders := make(map[string]string)
	var err error
	if c.circuitBreakerDisabled {
		success, respHeaders, err = c.client.Call(
			ctx, "SecondService", "echoI64", reqHeaders, args, &result, timeoutAndRetryCfg,
		)
	} else {
		// We want hystrix ckt-breaker to count errors only for system issues
		var clientErr error
		scope := c.defaultDeps.Scope.Tagged(map[string]string{
			"client":     "baz",
			"methodName": "EchoI64",
		})
		start := time.Now()
		circuitBreakerName := "baz" + "-" + "EchoI64"
		err = hystrix.DoC(ctx, circuitBreakerName, func(ctx context.Context) error {
			elapsed := time.Now().Sub(start)
			scope.Timer("hystrix-timer").Record(elapsed)
			success, respHeaders, clientErr = c.client.Call(
				ctx, "SecondService", "echoI64", reqHeaders, args, &result, timeoutAndRetryCfg,
			)
			if _, isSysErr := clientErr.(tchannel.SystemError); !isSysErr {
				// Declare ok if it is not a system-error
				return nil
			}
			return clientErr
		}, nil)
		if err == nil {
			// ckt-breaker was ok, bubble up client error if set
			err = clientErr
		}
	}

	if err == nil && !success {
		switch {
		case result.Success != nil:
			ctx = logger.ErrorZ(ctx, "Internal error. Success flag is not set for EchoI64. Overriding", zap.Error(err))
			success = true
		default:
			err = errors.New("bazClient received no result or unknown exception for EchoI64")
		}
	}
	if err != nil {
		ctx = logger.WarnZ(ctx, "Client failure: TChannel client call returned error", zap.Error(err))
		return ctx, resp, respHeaders, err
	}

	resp, err = clientsIDlClientsBazBaz.SecondService_EchoI64_Helper.UnwrapResponse(&result)
	if err != nil {
		ctx = logger.WarnZ(ctx, "Client failure: unable to unwrap client response", zap.Error(err))
	}
	return ctx, resp, respHeaders, err
}

// EchoI8 is a client RPC call for method "SecondService::echoI8"
func (c *bazClient) EchoI8(
	ctx context.Context,
	reqHeaders map[string]string,
	args *clientsIDlClientsBazBaz.SecondService_EchoI8_Args,
	timeoutAndRetryCfg *zanzibar.TimeoutAndRetryOptions,
) (context.Context, int8, map[string]string, error) {
	var result clientsIDlClientsBazBaz.SecondService_EchoI8_Result
	var resp int8

	logger := c.client.ContextLogger

	var success bool
	respHeaders := make(map[string]string)
	var err error
	if c.circuitBreakerDisabled {
		success, respHeaders, err = c.client.Call(
			ctx, "SecondService", "echoI8", reqHeaders, args, &result, timeoutAndRetryCfg,
		)
	} else {
		// We want hystrix ckt-breaker to count errors only for system issues
		var clientErr error
		scope := c.defaultDeps.Scope.Tagged(map[string]string{
			"client":     "baz",
			"methodName": "EchoI8",
		})
		start := time.Now()
		circuitBreakerName := "baz" + "-" + "EchoI8"
		err = hystrix.DoC(ctx, circuitBreakerName, func(ctx context.Context) error {
			elapsed := time.Now().Sub(start)
			scope.Timer("hystrix-timer").Record(elapsed)
			success, respHeaders, clientErr = c.client.Call(
				ctx, "SecondService", "echoI8", reqHeaders, args, &result, timeoutAndRetryCfg,
			)
			if _, isSysErr := clientErr.(tchannel.SystemError); !isSysErr {
				// Declare ok if it is not a system-error
				return nil
			}
			return clientErr
		}, nil)
		if err == nil {
			// ckt-breaker was ok, bubble up client error if set
			err = clientErr
		}
	}

	if err == nil && !success {
		switch {
		case result.Success != nil:
			ctx = logger.ErrorZ(ctx, "Internal error. Success flag is not set for EchoI8. Overriding", zap.Error(err))
			success = true
		default:
			err = errors.New("bazClient received no result or unknown exception for EchoI8")
		}
	}
	if err != nil {
		ctx = logger.WarnZ(ctx, "Client failure: TChannel client call returned error", zap.Error(err))
		return ctx, resp, respHeaders, err
	}

	resp, err = clientsIDlClientsBazBaz.SecondService_EchoI8_Helper.UnwrapResponse(&result)
	if err != nil {
		ctx = logger.WarnZ(ctx, "Client failure: unable to unwrap client response", zap.Error(err))
	}
	return ctx, resp, respHeaders, err
}

// EchoString is a client RPC call for method "SecondService::echoString"
func (c *bazClient) EchoString(
	ctx context.Context,
	reqHeaders map[string]string,
	args *clientsIDlClientsBazBaz.SecondService_EchoString_Args,
	timeoutAndRetryCfg *zanzibar.TimeoutAndRetryOptions,
) (context.Context, string, map[string]string, error) {
	var result clientsIDlClientsBazBaz.SecondService_EchoString_Result
	var resp string

	logger := c.client.ContextLogger

	var success bool
	respHeaders := make(map[string]string)
	var err error
	if c.circuitBreakerDisabled {
		success, respHeaders, err = c.client.Call(
			ctx, "SecondService", "echoString", reqHeaders, args, &result, timeoutAndRetryCfg,
		)
	} else {
		// We want hystrix ckt-breaker to count errors only for system issues
		var clientErr error
		scope := c.defaultDeps.Scope.Tagged(map[string]string{
			"client":     "baz",
			"methodName": "EchoString",
		})
		start := time.Now()
		circuitBreakerName := "baz" + "-" + "EchoString"
		err = hystrix.DoC(ctx, circuitBreakerName, func(ctx context.Context) error {
			elapsed := time.Now().Sub(start)
			scope.Timer("hystrix-timer").Record(elapsed)
			success, respHeaders, clientErr = c.client.Call(
				ctx, "SecondService", "echoString", reqHeaders, args, &result, timeoutAndRetryCfg,
			)
			if _, isSysErr := clientErr.(tchannel.SystemError); !isSysErr {
				// Declare ok if it is not a system-error
				return nil
			}
			return clientErr
		}, nil)
		if err == nil {
			// ckt-breaker was ok, bubble up client error if set
			err = clientErr
		}
	}

	if err == nil && !success {
		switch {
		case result.Success != nil:
			ctx = logger.ErrorZ(ctx, "Internal error. Success flag is not set for EchoString. Overriding", zap.Error(err))
			success = true
		default:
			err = errors.New("bazClient received no result or unknown exception for EchoString")
		}
	}
	if err != nil {
		ctx = logger.WarnZ(ctx, "Client failure: TChannel client call returned error", zap.Error(err))
		return ctx, resp, respHeaders, err
	}

	resp, err = clientsIDlClientsBazBaz.SecondService_EchoString_Helper.UnwrapResponse(&result)
	if err != nil {
		ctx = logger.WarnZ(ctx, "Client failure: unable to unwrap client response", zap.Error(err))
	}
	return ctx, resp, respHeaders, err
}

// EchoStringList is a client RPC call for method "SecondService::echoStringList"
func (c *bazClient) EchoStringList(
	ctx context.Context,
	reqHeaders map[string]string,
	args *clientsIDlClientsBazBaz.SecondService_EchoStringList_Args,
	timeoutAndRetryCfg *zanzibar.TimeoutAndRetryOptions,
) (context.Context, []string, map[string]string, error) {
	var result clientsIDlClientsBazBaz.SecondService_EchoStringList_Result
	var resp []string

	logger := c.client.ContextLogger

	var success bool
	respHeaders := make(map[string]string)
	var err error
	if c.circuitBreakerDisabled {
		success, respHeaders, err = c.client.Call(
			ctx, "SecondService", "echoStringList", reqHeaders, args, &result, timeoutAndRetryCfg,
		)
	} else {
		// We want hystrix ckt-breaker to count errors only for system issues
		var clientErr error
		scope := c.defaultDeps.Scope.Tagged(map[string]string{
			"client":     "baz",
			"methodName": "EchoStringList",
		})
		start := time.Now()
		circuitBreakerName := "baz" + "-" + "EchoStringList"
		err = hystrix.DoC(ctx, circuitBreakerName, func(ctx context.Context) error {
			elapsed := time.Now().Sub(start)
			scope.Timer("hystrix-timer").Record(elapsed)
			success, respHeaders, clientErr = c.client.Call(
				ctx, "SecondService", "echoStringList", reqHeaders, args, &result, timeoutAndRetryCfg,
			)
			if _, isSysErr := clientErr.(tchannel.SystemError); !isSysErr {
				// Declare ok if it is not a system-error
				return nil
			}
			return clientErr
		}, nil)
		if err == nil {
			// ckt-breaker was ok, bubble up client error if set
			err = clientErr
		}
	}

	if err == nil && !success {
		switch {
		case result.Success != nil:
			ctx = logger.ErrorZ(ctx, "Internal error. Success flag is not set for EchoStringList. Overriding", zap.Error(err))
			success = true
		default:
			err = errors.New("bazClient received no result or unknown exception for EchoStringList")
		}
	}
	if err != nil {
		ctx = logger.WarnZ(ctx, "Client failure: TChannel client call returned error", zap.Error(err))
		return ctx, resp, respHeaders, err
	}

	resp, err = clientsIDlClientsBazBaz.SecondService_EchoStringList_Helper.UnwrapResponse(&result)
	if err != nil {
		ctx = logger.WarnZ(ctx, "Client failure: unable to unwrap client response", zap.Error(err))
	}
	return ctx, resp, respHeaders, err
}

// EchoStringMap is a client RPC call for method "SecondService::echoStringMap"
func (c *bazClient) EchoStringMap(
	ctx context.Context,
	reqHeaders map[string]string,
	args *clientsIDlClientsBazBaz.SecondService_EchoStringMap_Args,
	timeoutAndRetryCfg *zanzibar.TimeoutAndRetryOptions,
) (context.Context, map[string]*clientsIDlClientsBazBase.BazResponse, map[string]string, error) {
	var result clientsIDlClientsBazBaz.SecondService_EchoStringMap_Result
	var resp map[string]*clientsIDlClientsBazBase.BazResponse

	logger := c.client.ContextLogger

	var success bool
	respHeaders := make(map[string]string)
	var err error
	if c.circuitBreakerDisabled {
		success, respHeaders, err = c.client.Call(
			ctx, "SecondService", "echoStringMap", reqHeaders, args, &result, timeoutAndRetryCfg,
		)
	} else {
		// We want hystrix ckt-breaker to count errors only for system issues
		var clientErr error
		scope := c.defaultDeps.Scope.Tagged(map[string]string{
			"client":     "baz",
			"methodName": "EchoStringMap",
		})
		start := time.Now()
		circuitBreakerName := "baz" + "-" + "EchoStringMap"
		err = hystrix.DoC(ctx, circuitBreakerName, func(ctx context.Context) error {
			elapsed := time.Now().Sub(start)
			scope.Timer("hystrix-timer").Record(elapsed)
			success, respHeaders, clientErr = c.client.Call(
				ctx, "SecondService", "echoStringMap", reqHeaders, args, &result, timeoutAndRetryCfg,
			)
			if _, isSysErr := clientErr.(tchannel.SystemError); !isSysErr {
				// Declare ok if it is not a system-error
				return nil
			}
			return clientErr
		}, nil)
		if err == nil {
			// ckt-breaker was ok, bubble up client error if set
			err = clientErr
		}
	}

	if err == nil && !success {
		switch {
		case result.Success != nil:
			ctx = logger.ErrorZ(ctx, "Internal error. Success flag is not set for EchoStringMap. Overriding", zap.Error(err))
			success = true
		default:
			err = errors.New("bazClient received no result or unknown exception for EchoStringMap")
		}
	}
	if err != nil {
		ctx = logger.WarnZ(ctx, "Client failure: TChannel client call returned error", zap.Error(err))
		return ctx, resp, respHeaders, err
	}

	resp, err = clientsIDlClientsBazBaz.SecondService_EchoStringMap_Helper.UnwrapResponse(&result)
	if err != nil {
		ctx = logger.WarnZ(ctx, "Client failure: unable to unwrap client response", zap.Error(err))
	}
	return ctx, resp, respHeaders, err
}

// EchoStringSet is a client RPC call for method "SecondService::echoStringSet"
func (c *bazClient) EchoStringSet(
	ctx context.Context,
	reqHeaders map[string]string,
	args *clientsIDlClientsBazBaz.SecondService_EchoStringSet_Args,
	timeoutAndRetryCfg *zanzibar.TimeoutAndRetryOptions,
) (context.Context, map[string]struct{}, map[string]string, error) {
	var result clientsIDlClientsBazBaz.SecondService_EchoStringSet_Result
	var resp map[string]struct{}

	logger := c.client.ContextLogger

	var success bool
	respHeaders := make(map[string]string)
	var err error
	if c.circuitBreakerDisabled {
		success, respHeaders, err = c.client.Call(
			ctx, "SecondService", "echoStringSet", reqHeaders, args, &result, timeoutAndRetryCfg,
		)
	} else {
		// We want hystrix ckt-breaker to count errors only for system issues
		var clientErr error
		scope := c.defaultDeps.Scope.Tagged(map[string]string{
			"client":     "baz",
			"methodName": "EchoStringSet",
		})
		start := time.Now()
		circuitBreakerName := "baz" + "-" + "EchoStringSet"
		err = hystrix.DoC(ctx, circuitBreakerName, func(ctx context.Context) error {
			elapsed := time.Now().Sub(start)
			scope.Timer("hystrix-timer").Record(elapsed)
			success, respHeaders, clientErr = c.client.Call(
				ctx, "SecondService", "echoStringSet", reqHeaders, args, &result, timeoutAndRetryCfg,
			)
			if _, isSysErr := clientErr.(tchannel.SystemError); !isSysErr {
				// Declare ok if it is not a system-error
				return nil
			}
			return clientErr
		}, nil)
		if err == nil {
			// ckt-breaker was ok, bubble up client error if set
			err = clientErr
		}
	}

	if err == nil && !success {
		switch {
		case result.Success != nil:
			ctx = logger.ErrorZ(ctx, "Internal error. Success flag is not set for EchoStringSet. Overriding", zap.Error(err))
			success = true
		default:
			err = errors.New("bazClient received no result or unknown exception for EchoStringSet")
		}
	}
	if err != nil {
		ctx = logger.WarnZ(ctx, "Client failure: TChannel client call returned error", zap.Error(err))
		return ctx, resp, respHeaders, err
	}

	resp, err = clientsIDlClientsBazBaz.SecondService_EchoStringSet_Helper.UnwrapResponse(&result)
	if err != nil {
		ctx = logger.WarnZ(ctx, "Client failure: unable to unwrap client response", zap.Error(err))
	}
	return ctx, resp, respHeaders, err
}

// EchoStructList is a client RPC call for method "SecondService::echoStructList"
func (c *bazClient) EchoStructList(
	ctx context.Context,
	reqHeaders map[string]string,
	args *clientsIDlClientsBazBaz.SecondService_EchoStructList_Args,
	timeoutAndRetryCfg *zanzibar.TimeoutAndRetryOptions,
) (context.Context, []*clientsIDlClientsBazBase.BazResponse, map[string]string, error) {
	var result clientsIDlClientsBazBaz.SecondService_EchoStructList_Result
	var resp []*clientsIDlClientsBazBase.BazResponse

	logger := c.client.ContextLogger

	var success bool
	respHeaders := make(map[string]string)
	var err error
	if c.circuitBreakerDisabled {
		success, respHeaders, err = c.client.Call(
			ctx, "SecondService", "echoStructList", reqHeaders, args, &result, timeoutAndRetryCfg,
		)
	} else {
		// We want hystrix ckt-breaker to count errors only for system issues
		var clientErr error
		scope := c.defaultDeps.Scope.Tagged(map[string]string{
			"client":     "baz",
			"methodName": "EchoStructList",
		})
		start := time.Now()
		circuitBreakerName := "baz" + "-" + "EchoStructList"
		err = hystrix.DoC(ctx, circuitBreakerName, func(ctx context.Context) error {
			elapsed := time.Now().Sub(start)
			scope.Timer("hystrix-timer").Record(elapsed)
			success, respHeaders, clientErr = c.client.Call(
				ctx, "SecondService", "echoStructList", reqHeaders, args, &result, timeoutAndRetryCfg,
			)
			if _, isSysErr := clientErr.(tchannel.SystemError); !isSysErr {
				// Declare ok if it is not a system-error
				return nil
			}
			return clientErr
		}, nil)
		if err == nil {
			// ckt-breaker was ok, bubble up client error if set
			err = clientErr
		}
	}

	if err == nil && !success {
		switch {
		case result.Success != nil:
			ctx = logger.ErrorZ(ctx, "Internal error. Success flag is not set for EchoStructList. Overriding", zap.Error(err))
			success = true
		default:
			err = errors.New("bazClient received no result or unknown exception for EchoStructList")
		}
	}
	if err != nil {
		ctx = logger.WarnZ(ctx, "Client failure: TChannel client call returned error", zap.Error(err))
		return ctx, resp, respHeaders, err
	}

	resp, err = clientsIDlClientsBazBaz.SecondService_EchoStructList_Helper.UnwrapResponse(&result)
	if err != nil {
		ctx = logger.WarnZ(ctx, "Client failure: unable to unwrap client response", zap.Error(err))
	}
	return ctx, resp, respHeaders, err
}

// EchoStructSet is a client RPC call for method "SecondService::echoStructSet"
func (c *bazClient) EchoStructSet(
	ctx context.Context,
	reqHeaders map[string]string,
	args *clientsIDlClientsBazBaz.SecondService_EchoStructSet_Args,
	timeoutAndRetryCfg *zanzibar.TimeoutAndRetryOptions,
) (context.Context, []*clientsIDlClientsBazBase.BazResponse, map[string]string, error) {
	var result clientsIDlClientsBazBaz.SecondService_EchoStructSet_Result
	var resp []*clientsIDlClientsBazBase.BazResponse

	logger := c.client.ContextLogger

	var success bool
	respHeaders := make(map[string]string)
	var err error
	if c.circuitBreakerDisabled {
		success, respHeaders, err = c.client.Call(
			ctx, "SecondService", "echoStructSet", reqHeaders, args, &result, timeoutAndRetryCfg,
		)
	} else {
		// We want hystrix ckt-breaker to count errors only for system issues
		var clientErr error
		scope := c.defaultDeps.Scope.Tagged(map[string]string{
			"client":     "baz",
			"methodName": "EchoStructSet",
		})
		start := time.Now()
		circuitBreakerName := "baz" + "-" + "EchoStructSet"
		err = hystrix.DoC(ctx, circuitBreakerName, func(ctx context.Context) error {
			elapsed := time.Now().Sub(start)
			scope.Timer("hystrix-timer").Record(elapsed)
			success, respHeaders, clientErr = c.client.Call(
				ctx, "SecondService", "echoStructSet", reqHeaders, args, &result, timeoutAndRetryCfg,
			)
			if _, isSysErr := clientErr.(tchannel.SystemError); !isSysErr {
				// Declare ok if it is not a system-error
				return nil
			}
			return clientErr
		}, nil)
		if err == nil {
			// ckt-breaker was ok, bubble up client error if set
			err = clientErr
		}
	}

	if err == nil && !success {
		switch {
		case result.Success != nil:
			ctx = logger.ErrorZ(ctx, "Internal error. Success flag is not set for EchoStructSet. Overriding", zap.Error(err))
			success = true
		default:
			err = errors.New("bazClient received no result or unknown exception for EchoStructSet")
		}
	}
	if err != nil {
		ctx = logger.WarnZ(ctx, "Client failure: TChannel client call returned error", zap.Error(err))
		return ctx, resp, respHeaders, err
	}

	resp, err = clientsIDlClientsBazBaz.SecondService_EchoStructSet_Helper.UnwrapResponse(&result)
	if err != nil {
		ctx = logger.WarnZ(ctx, "Client failure: unable to unwrap client response", zap.Error(err))
	}
	return ctx, resp, respHeaders, err
}

// EchoTypedef is a client RPC call for method "SecondService::echoTypedef"
func (c *bazClient) EchoTypedef(
	ctx context.Context,
	reqHeaders map[string]string,
	args *clientsIDlClientsBazBaz.SecondService_EchoTypedef_Args,
	timeoutAndRetryCfg *zanzibar.TimeoutAndRetryOptions,
) (context.Context, clientsIDlClientsBazBase.UUID, map[string]string, error) {
	var result clientsIDlClientsBazBaz.SecondService_EchoTypedef_Result
	var resp clientsIDlClientsBazBase.UUID

	logger := c.client.ContextLogger

	var success bool
	respHeaders := make(map[string]string)
	var err error
	if c.circuitBreakerDisabled {
		success, respHeaders, err = c.client.Call(
			ctx, "SecondService", "echoTypedef", reqHeaders, args, &result, timeoutAndRetryCfg,
		)
	} else {
		// We want hystrix ckt-breaker to count errors only for system issues
		var clientErr error
		scope := c.defaultDeps.Scope.Tagged(map[string]string{
			"client":     "baz",
			"methodName": "EchoTypedef",
		})
		start := time.Now()
		circuitBreakerName := "baz" + "-" + "EchoTypedef"
		err = hystrix.DoC(ctx, circuitBreakerName, func(ctx context.Context) error {
			elapsed := time.Now().Sub(start)
			scope.Timer("hystrix-timer").Record(elapsed)
			success, respHeaders, clientErr = c.client.Call(
				ctx, "SecondService", "echoTypedef", reqHeaders, args, &result, timeoutAndRetryCfg,
			)
			if _, isSysErr := clientErr.(tchannel.SystemError); !isSysErr {
				// Declare ok if it is not a system-error
				return nil
			}
			return clientErr
		}, nil)
		if err == nil {
			// ckt-breaker was ok, bubble up client error if set
			err = clientErr
		}
	}

	if err == nil && !success {
		switch {
		case result.Success != nil:
			ctx = logger.ErrorZ(ctx, "Internal error. Success flag is not set for EchoTypedef. Overriding", zap.Error(err))
			success = true
		default:
			err = errors.New("bazClient received no result or unknown exception for EchoTypedef")
		}
	}
	if err != nil {
		ctx = logger.WarnZ(ctx, "Client failure: TChannel client call returned error", zap.Error(err))
		return ctx, resp, respHeaders, err
	}

	resp, err = clientsIDlClientsBazBaz.SecondService_EchoTypedef_Helper.UnwrapResponse(&result)
	if err != nil {
		ctx = logger.WarnZ(ctx, "Client failure: unable to unwrap client response", zap.Error(err))
	}
	return ctx, resp, respHeaders, err
}

// Call is a client RPC call for method "SimpleService::call"
func (c *bazClient) Call(
	ctx context.Context,
	reqHeaders map[string]string,
	args *clientsIDlClientsBazBaz.SimpleService_Call_Args,
	timeoutAndRetryCfg *zanzibar.TimeoutAndRetryOptions,
) (context.Context, map[string]string, error) {
	var result clientsIDlClientsBazBaz.SimpleService_Call_Result

	logger := c.client.ContextLogger

	var success bool
	respHeaders := make(map[string]string)
	var err error
	if c.circuitBreakerDisabled {
		success, respHeaders, err = c.client.Call(
			ctx, "SimpleService", "call", reqHeaders, args, &result, timeoutAndRetryCfg,
		)
	} else {
		// We want hystrix ckt-breaker to count errors only for system issues
		var clientErr error
		scope := c.defaultDeps.Scope.Tagged(map[string]string{
			"client":     "baz",
			"methodName": "Call",
		})
		start := time.Now()
		circuitBreakerName := "baz" + "-" + "Call"
		err = hystrix.DoC(ctx, circuitBreakerName, func(ctx context.Context) error {
			elapsed := time.Now().Sub(start)
			scope.Timer("hystrix-timer").Record(elapsed)
			success, respHeaders, clientErr = c.client.Call(
				ctx, "SimpleService", "call", reqHeaders, args, &result, timeoutAndRetryCfg,
			)
			if _, isSysErr := clientErr.(tchannel.SystemError); !isSysErr {
				// Declare ok if it is not a system-error
				return nil
			}
			return clientErr
		}, nil)
		if err == nil {
			// ckt-breaker was ok, bubble up client error if set
			err = clientErr
		}
	}

	if err == nil && !success {
		switch {
		case result.AuthErr != nil:
			err = result.AuthErr
		default:
			err = errors.New("bazClient received no result or unknown exception for Call")
		}
	}
	if err != nil {
		ctx = logger.WarnZ(ctx, "Client failure: TChannel client call returned error", zap.Error(err))
		return ctx, respHeaders, err
	}

	return ctx, respHeaders, err
}

// Compare is a client RPC call for method "SimpleService::compare"
func (c *bazClient) Compare(
	ctx context.Context,
	reqHeaders map[string]string,
	args *clientsIDlClientsBazBaz.SimpleService_Compare_Args,
	timeoutAndRetryCfg *zanzibar.TimeoutAndRetryOptions,
) (context.Context, *clientsIDlClientsBazBase.BazResponse, map[string]string, error) {
	var result clientsIDlClientsBazBaz.SimpleService_Compare_Result
	var resp *clientsIDlClientsBazBase.BazResponse

	logger := c.client.ContextLogger

	var success bool
	respHeaders := make(map[string]string)
	var err error
	if c.circuitBreakerDisabled {
		success, respHeaders, err = c.client.Call(
			ctx, "SimpleService", "compare", reqHeaders, args, &result, timeoutAndRetryCfg,
		)
	} else {
		// We want hystrix ckt-breaker to count errors only for system issues
		var clientErr error
		scope := c.defaultDeps.Scope.Tagged(map[string]string{
			"client":     "baz",
			"methodName": "Compare",
		})
		start := time.Now()
		circuitBreakerName := "baz" + "-" + "Compare"
		err = hystrix.DoC(ctx, circuitBreakerName, func(ctx context.Context) error {
			elapsed := time.Now().Sub(start)
			scope.Timer("hystrix-timer").Record(elapsed)
			success, respHeaders, clientErr = c.client.Call(
				ctx, "SimpleService", "compare", reqHeaders, args, &result, timeoutAndRetryCfg,
			)
			if _, isSysErr := clientErr.(tchannel.SystemError); !isSysErr {
				// Declare ok if it is not a system-error
				return nil
			}
			return clientErr
		}, nil)
		if err == nil {
			// ckt-breaker was ok, bubble up client error if set
			err = clientErr
		}
	}

	if err == nil && !success {
		switch {
		case result.AuthErr != nil:
			err = result.AuthErr
		case result.OtherAuthErr != nil:
			err = result.OtherAuthErr
		case result.Success != nil:
			ctx = logger.ErrorZ(ctx, "Internal error. Success flag is not set for Compare. Overriding", zap.Error(err))
			success = true
		default:
			err = errors.New("bazClient received no result or unknown exception for Compare")
		}
	}
	if err != nil {
		ctx = logger.WarnZ(ctx, "Client failure: TChannel client call returned error", zap.Error(err))
		return ctx, resp, respHeaders, err
	}

	resp, err = clientsIDlClientsBazBaz.SimpleService_Compare_Helper.UnwrapResponse(&result)
	if err != nil {
		ctx = logger.WarnZ(ctx, "Client failure: unable to unwrap client response", zap.Error(err))
	}
	return ctx, resp, respHeaders, err
}

// GetProfile is a client RPC call for method "SimpleService::getProfile"
func (c *bazClient) GetProfile(
	ctx context.Context,
	reqHeaders map[string]string,
	args *clientsIDlClientsBazBaz.SimpleService_GetProfile_Args,
	timeoutAndRetryCfg *zanzibar.TimeoutAndRetryOptions,
) (context.Context, *clientsIDlClientsBazBaz.GetProfileResponse, map[string]string, error) {
	var result clientsIDlClientsBazBaz.SimpleService_GetProfile_Result
	var resp *clientsIDlClientsBazBaz.GetProfileResponse

	logger := c.client.ContextLogger

	var success bool
	respHeaders := make(map[string]string)
	var err error
	if c.circuitBreakerDisabled {
		success, respHeaders, err = c.client.Call(
			ctx, "SimpleService", "getProfile", reqHeaders, args, &result, timeoutAndRetryCfg,
		)
	} else {
		// We want hystrix ckt-breaker to count errors only for system issues
		var clientErr error
		scope := c.defaultDeps.Scope.Tagged(map[string]string{
			"client":     "baz",
			"methodName": "GetProfile",
		})
		start := time.Now()
		circuitBreakerName := "baz" + "-" + "GetProfile"
		err = hystrix.DoC(ctx, circuitBreakerName, func(ctx context.Context) error {
			elapsed := time.Now().Sub(start)
			scope.Timer("hystrix-timer").Record(elapsed)
			success, respHeaders, clientErr = c.client.Call(
				ctx, "SimpleService", "getProfile", reqHeaders, args, &result, timeoutAndRetryCfg,
			)
			if _, isSysErr := clientErr.(tchannel.SystemError); !isSysErr {
				// Declare ok if it is not a system-error
				return nil
			}
			return clientErr
		}, nil)
		if err == nil {
			// ckt-breaker was ok, bubble up client error if set
			err = clientErr
		}
	}

	if err == nil && !success {
		switch {
		case result.AuthErr != nil:
			err = result.AuthErr
		case result.Success != nil:
			ctx = logger.ErrorZ(ctx, "Internal error. Success flag is not set for GetProfile. Overriding", zap.Error(err))
			success = true
		default:
			err = errors.New("bazClient received no result or unknown exception for GetProfile")
		}
	}
	if err != nil {
		ctx = logger.WarnZ(ctx, "Client failure: TChannel client call returned error", zap.Error(err))
		return ctx, resp, respHeaders, err
	}

	resp, err = clientsIDlClientsBazBaz.SimpleService_GetProfile_Helper.UnwrapResponse(&result)
	if err != nil {
		ctx = logger.WarnZ(ctx, "Client failure: unable to unwrap client response", zap.Error(err))
	}
	return ctx, resp, respHeaders, err
}

// HeaderSchema is a client RPC call for method "SimpleService::headerSchema"
func (c *bazClient) HeaderSchema(
	ctx context.Context,
	reqHeaders map[string]string,
	args *clientsIDlClientsBazBaz.SimpleService_HeaderSchema_Args,
	timeoutAndRetryCfg *zanzibar.TimeoutAndRetryOptions,
) (context.Context, *clientsIDlClientsBazBaz.HeaderSchema, map[string]string, error) {
	var result clientsIDlClientsBazBaz.SimpleService_HeaderSchema_Result
	var resp *clientsIDlClientsBazBaz.HeaderSchema

	logger := c.client.ContextLogger

	var success bool
	respHeaders := make(map[string]string)
	var err error
	if c.circuitBreakerDisabled {
		success, respHeaders, err = c.client.Call(
			ctx, "SimpleService", "headerSchema", reqHeaders, args, &result, timeoutAndRetryCfg,
		)
	} else {
		// We want hystrix ckt-breaker to count errors only for system issues
		var clientErr error
		scope := c.defaultDeps.Scope.Tagged(map[string]string{
			"client":     "baz",
			"methodName": "HeaderSchema",
		})
		start := time.Now()
		circuitBreakerName := "baz" + "-" + "HeaderSchema"
		err = hystrix.DoC(ctx, circuitBreakerName, func(ctx context.Context) error {
			elapsed := time.Now().Sub(start)
			scope.Timer("hystrix-timer").Record(elapsed)
			success, respHeaders, clientErr = c.client.Call(
				ctx, "SimpleService", "headerSchema", reqHeaders, args, &result, timeoutAndRetryCfg,
			)
			if _, isSysErr := clientErr.(tchannel.SystemError); !isSysErr {
				// Declare ok if it is not a system-error
				return nil
			}
			return clientErr
		}, nil)
		if err == nil {
			// ckt-breaker was ok, bubble up client error if set
			err = clientErr
		}
	}

	if err == nil && !success {
		switch {
		case result.AuthErr != nil:
			err = result.AuthErr
		case result.OtherAuthErr != nil:
			err = result.OtherAuthErr
		case result.Success != nil:
			ctx = logger.ErrorZ(ctx, "Internal error. Success flag is not set for HeaderSchema. Overriding", zap.Error(err))
			success = true
		default:
			err = errors.New("bazClient received no result or unknown exception for HeaderSchema")
		}
	}
	if err != nil {
		ctx = logger.WarnZ(ctx, "Client failure: TChannel client call returned error", zap.Error(err))
		return ctx, resp, respHeaders, err
	}

	resp, err = clientsIDlClientsBazBaz.SimpleService_HeaderSchema_Helper.UnwrapResponse(&result)
	if err != nil {
		ctx = logger.WarnZ(ctx, "Client failure: unable to unwrap client response", zap.Error(err))
	}
	return ctx, resp, respHeaders, err
}

// Ping is a client RPC call for method "SimpleService::ping"
func (c *bazClient) Ping(
	ctx context.Context,
	reqHeaders map[string]string,
	timeoutAndRetryCfg *zanzibar.TimeoutAndRetryOptions,
) (context.Context, *clientsIDlClientsBazBase.BazResponse, map[string]string, error) {
	var result clientsIDlClientsBazBaz.SimpleService_Ping_Result
	var resp *clientsIDlClientsBazBase.BazResponse

	logger := c.client.ContextLogger

	args := &clientsIDlClientsBazBaz.SimpleService_Ping_Args{}
	var success bool
	respHeaders := make(map[string]string)
	var err error
	if c.circuitBreakerDisabled {
		success, respHeaders, err = c.client.Call(
			ctx, "SimpleService", "ping", reqHeaders, args, &result, timeoutAndRetryCfg,
		)
	} else {
		// We want hystrix ckt-breaker to count errors only for system issues
		var clientErr error
		scope := c.defaultDeps.Scope.Tagged(map[string]string{
			"client":     "baz",
			"methodName": "Ping",
		})
		start := time.Now()
		circuitBreakerName := "baz" + "-" + "Ping"
		err = hystrix.DoC(ctx, circuitBreakerName, func(ctx context.Context) error {
			elapsed := time.Now().Sub(start)
			scope.Timer("hystrix-timer").Record(elapsed)
			success, respHeaders, clientErr = c.client.Call(
				ctx, "SimpleService", "ping", reqHeaders, args, &result, timeoutAndRetryCfg,
			)
			if _, isSysErr := clientErr.(tchannel.SystemError); !isSysErr {
				// Declare ok if it is not a system-error
				return nil
			}
			return clientErr
		}, nil)
		if err == nil {
			// ckt-breaker was ok, bubble up client error if set
			err = clientErr
		}
	}

	if err == nil && !success {
		switch {
		case result.Success != nil:
			ctx = logger.ErrorZ(ctx, "Internal error. Success flag is not set for Ping. Overriding", zap.Error(err))
			success = true
		default:
			err = errors.New("bazClient received no result or unknown exception for Ping")
		}
	}
	if err != nil {
		ctx = logger.WarnZ(ctx, "Client failure: TChannel client call returned error", zap.Error(err))
		return ctx, resp, respHeaders, err
	}

	resp, err = clientsIDlClientsBazBaz.SimpleService_Ping_Helper.UnwrapResponse(&result)
	if err != nil {
		ctx = logger.WarnZ(ctx, "Client failure: unable to unwrap client response", zap.Error(err))
	}
	return ctx, resp, respHeaders, err
}

// DeliberateDiffNoop is a client RPC call for method "SimpleService::sillyNoop"
func (c *bazClient) DeliberateDiffNoop(
	ctx context.Context,
	reqHeaders map[string]string,
	timeoutAndRetryCfg *zanzibar.TimeoutAndRetryOptions,
) (context.Context, map[string]string, error) {
	var result clientsIDlClientsBazBaz.SimpleService_SillyNoop_Result

	logger := c.client.ContextLogger

	args := &clientsIDlClientsBazBaz.SimpleService_SillyNoop_Args{}
	var success bool
	respHeaders := make(map[string]string)
	var err error
	if c.circuitBreakerDisabled {
		success, respHeaders, err = c.client.Call(
			ctx, "SimpleService", "sillyNoop", reqHeaders, args, &result, timeoutAndRetryCfg,
		)
	} else {
		// We want hystrix ckt-breaker to count errors only for system issues
		var clientErr error
		scope := c.defaultDeps.Scope.Tagged(map[string]string{
			"client":     "baz",
			"methodName": "DeliberateDiffNoop",
		})
		start := time.Now()
		circuitBreakerName := "baz" + "-" + "DeliberateDiffNoop"
		err = hystrix.DoC(ctx, circuitBreakerName, func(ctx context.Context) error {
			elapsed := time.Now().Sub(start)
			scope.Timer("hystrix-timer").Record(elapsed)
			success, respHeaders, clientErr = c.client.Call(
				ctx, "SimpleService", "sillyNoop", reqHeaders, args, &result, timeoutAndRetryCfg,
			)
			if _, isSysErr := clientErr.(tchannel.SystemError); !isSysErr {
				// Declare ok if it is not a system-error
				return nil
			}
			return clientErr
		}, nil)
		if err == nil {
			// ckt-breaker was ok, bubble up client error if set
			err = clientErr
		}
	}

	if err == nil && !success {
		switch {
		case result.AuthErr != nil:
			err = result.AuthErr
		case result.ServerErr != nil:
			err = result.ServerErr
		default:
			err = errors.New("bazClient received no result or unknown exception for SillyNoop")
		}
	}
	if err != nil {
		ctx = logger.WarnZ(ctx, "Client failure: TChannel client call returned error", zap.Error(err))
		return ctx, respHeaders, err
	}

	return ctx, respHeaders, err
}

// TestUUID is a client RPC call for method "SimpleService::testUuid"
func (c *bazClient) TestUUID(
	ctx context.Context,
	reqHeaders map[string]string,
	timeoutAndRetryCfg *zanzibar.TimeoutAndRetryOptions,
) (context.Context, map[string]string, error) {
	var result clientsIDlClientsBazBaz.SimpleService_TestUuid_Result

	logger := c.client.ContextLogger

	args := &clientsIDlClientsBazBaz.SimpleService_TestUuid_Args{}
	var success bool
	respHeaders := make(map[string]string)
	var err error
	if c.circuitBreakerDisabled {
		success, respHeaders, err = c.client.Call(
			ctx, "SimpleService", "testUuid", reqHeaders, args, &result, timeoutAndRetryCfg,
		)
	} else {
		// We want hystrix ckt-breaker to count errors only for system issues
		var clientErr error
		scope := c.defaultDeps.Scope.Tagged(map[string]string{
			"client":     "baz",
			"methodName": "TestUUID",
		})
		start := time.Now()
		circuitBreakerName := "baz" + "-" + "TestUUID"
		err = hystrix.DoC(ctx, circuitBreakerName, func(ctx context.Context) error {
			elapsed := time.Now().Sub(start)
			scope.Timer("hystrix-timer").Record(elapsed)
			success, respHeaders, clientErr = c.client.Call(
				ctx, "SimpleService", "testUuid", reqHeaders, args, &result, timeoutAndRetryCfg,
			)
			if _, isSysErr := clientErr.(tchannel.SystemError); !isSysErr {
				// Declare ok if it is not a system-error
				return nil
			}
			return clientErr
		}, nil)
		if err == nil {
			// ckt-breaker was ok, bubble up client error if set
			err = clientErr
		}
	}

	if err == nil && !success {
		switch {
		default:
			err = errors.New("bazClient received no result or unknown exception for TestUuid")
		}
	}
	if err != nil {
		ctx = logger.WarnZ(ctx, "Client failure: TChannel client call returned error", zap.Error(err))
		return ctx, respHeaders, err
	}

	return ctx, respHeaders, err
}

// Trans is a client RPC call for method "SimpleService::trans"
func (c *bazClient) Trans(
	ctx context.Context,
	reqHeaders map[string]string,
	args *clientsIDlClientsBazBaz.SimpleService_Trans_Args,
	timeoutAndRetryCfg *zanzibar.TimeoutAndRetryOptions,
) (context.Context, *clientsIDlClientsBazBase.TransStruct, map[string]string, error) {
	var result clientsIDlClientsBazBaz.SimpleService_Trans_Result
	var resp *clientsIDlClientsBazBase.TransStruct

	logger := c.client.ContextLogger

	var success bool
	respHeaders := make(map[string]string)
	var err error
	if c.circuitBreakerDisabled {
		success, respHeaders, err = c.client.Call(
			ctx, "SimpleService", "trans", reqHeaders, args, &result, timeoutAndRetryCfg,
		)
	} else {
		// We want hystrix ckt-breaker to count errors only for system issues
		var clientErr error
		scope := c.defaultDeps.Scope.Tagged(map[string]string{
			"client":     "baz",
			"methodName": "Trans",
		})
		start := time.Now()
		circuitBreakerName := "baz" + "-" + "Trans"
		err = hystrix.DoC(ctx, circuitBreakerName, func(ctx context.Context) error {
			elapsed := time.Now().Sub(start)
			scope.Timer("hystrix-timer").Record(elapsed)
			success, respHeaders, clientErr = c.client.Call(
				ctx, "SimpleService", "trans", reqHeaders, args, &result, timeoutAndRetryCfg,
			)
			if _, isSysErr := clientErr.(tchannel.SystemError); !isSysErr {
				// Declare ok if it is not a system-error
				return nil
			}
			return clientErr
		}, nil)
		if err == nil {
			// ckt-breaker was ok, bubble up client error if set
			err = clientErr
		}
	}

	if err == nil && !success {
		switch {
		case result.AuthErr != nil:
			err = result.AuthErr
		case result.OtherAuthErr != nil:
			err = result.OtherAuthErr
		case result.Success != nil:
			ctx = logger.ErrorZ(ctx, "Internal error. Success flag is not set for Trans. Overriding", zap.Error(err))
			success = true
		default:
			err = errors.New("bazClient received no result or unknown exception for Trans")
		}
	}
	if err != nil {
		ctx = logger.WarnZ(ctx, "Client failure: TChannel client call returned error", zap.Error(err))
		return ctx, resp, respHeaders, err
	}

	resp, err = clientsIDlClientsBazBaz.SimpleService_Trans_Helper.UnwrapResponse(&result)
	if err != nil {
		ctx = logger.WarnZ(ctx, "Client failure: unable to unwrap client response", zap.Error(err))
	}
	return ctx, resp, respHeaders, err
}

// TransHeaders is a client RPC call for method "SimpleService::transHeaders"
func (c *bazClient) TransHeaders(
	ctx context.Context,
	reqHeaders map[string]string,
	args *clientsIDlClientsBazBaz.SimpleService_TransHeaders_Args,
	timeoutAndRetryCfg *zanzibar.TimeoutAndRetryOptions,
) (context.Context, *clientsIDlClientsBazBase.TransHeaders, map[string]string, error) {
	var result clientsIDlClientsBazBaz.SimpleService_TransHeaders_Result
	var resp *clientsIDlClientsBazBase.TransHeaders

	logger := c.client.ContextLogger

	var success bool
	respHeaders := make(map[string]string)
	var err error
	if c.circuitBreakerDisabled {
		success, respHeaders, err = c.client.Call(
			ctx, "SimpleService", "transHeaders", reqHeaders, args, &result, timeoutAndRetryCfg,
		)
	} else {
		// We want hystrix ckt-breaker to count errors only for system issues
		var clientErr error
		scope := c.defaultDeps.Scope.Tagged(map[string]string{
			"client":     "baz",
			"methodName": "TransHeaders",
		})
		start := time.Now()
		circuitBreakerName := "baz" + "-" + "TransHeaders"
		err = hystrix.DoC(ctx, circuitBreakerName, func(ctx context.Context) error {
			elapsed := time.Now().Sub(start)
			scope.Timer("hystrix-timer").Record(elapsed)
			success, respHeaders, clientErr = c.client.Call(
				ctx, "SimpleService", "transHeaders", reqHeaders, args, &result, timeoutAndRetryCfg,
			)
			if _, isSysErr := clientErr.(tchannel.SystemError); !isSysErr {
				// Declare ok if it is not a system-error
				return nil
			}
			return clientErr
		}, nil)
		if err == nil {
			// ckt-breaker was ok, bubble up client error if set
			err = clientErr
		}
	}

	if err == nil && !success {
		switch {
		case result.AuthErr != nil:
			err = result.AuthErr
		case result.OtherAuthErr != nil:
			err = result.OtherAuthErr
		case result.Success != nil:
			ctx = logger.ErrorZ(ctx, "Internal error. Success flag is not set for TransHeaders. Overriding", zap.Error(err))
			success = true
		default:
			err = errors.New("bazClient received no result or unknown exception for TransHeaders")
		}
	}
	if err != nil {
		ctx = logger.WarnZ(ctx, "Client failure: TChannel client call returned error", zap.Error(err))
		return ctx, resp, respHeaders, err
	}

	resp, err = clientsIDlClientsBazBaz.SimpleService_TransHeaders_Helper.UnwrapResponse(&result)
	if err != nil {
		ctx = logger.WarnZ(ctx, "Client failure: unable to unwrap client response", zap.Error(err))
	}
	return ctx, resp, respHeaders, err
}

// TransHeadersNoReq is a client RPC call for method "SimpleService::transHeadersNoReq"
func (c *bazClient) TransHeadersNoReq(
	ctx context.Context,
	reqHeaders map[string]string,
	args *clientsIDlClientsBazBaz.SimpleService_TransHeadersNoReq_Args,
	timeoutAndRetryCfg *zanzibar.TimeoutAndRetryOptions,
) (context.Context, *clientsIDlClientsBazBase.TransHeaders, map[string]string, error) {
	var result clientsIDlClientsBazBaz.SimpleService_TransHeadersNoReq_Result
	var resp *clientsIDlClientsBazBase.TransHeaders

	logger := c.client.ContextLogger

	var success bool
	respHeaders := make(map[string]string)
	var err error
	if c.circuitBreakerDisabled {
		success, respHeaders, err = c.client.Call(
			ctx, "SimpleService", "transHeadersNoReq", reqHeaders, args, &result, timeoutAndRetryCfg,
		)
	} else {
		// We want hystrix ckt-breaker to count errors only for system issues
		var clientErr error
		scope := c.defaultDeps.Scope.Tagged(map[string]string{
			"client":     "baz",
			"methodName": "TransHeadersNoReq",
		})
		start := time.Now()
		circuitBreakerName := "baz" + "-" + "TransHeadersNoReq"
		err = hystrix.DoC(ctx, circuitBreakerName, func(ctx context.Context) error {
			elapsed := time.Now().Sub(start)
			scope.Timer("hystrix-timer").Record(elapsed)
			success, respHeaders, clientErr = c.client.Call(
				ctx, "SimpleService", "transHeadersNoReq", reqHeaders, args, &result, timeoutAndRetryCfg,
			)
			if _, isSysErr := clientErr.(tchannel.SystemError); !isSysErr {
				// Declare ok if it is not a system-error
				return nil
			}
			return clientErr
		}, nil)
		if err == nil {
			// ckt-breaker was ok, bubble up client error if set
			err = clientErr
		}
	}

	if err == nil && !success {
		switch {
		case result.AuthErr != nil:
			err = result.AuthErr
		case result.Success != nil:
			ctx = logger.ErrorZ(ctx, "Internal error. Success flag is not set for TransHeadersNoReq. Overriding", zap.Error(err))
			success = true
		default:
			err = errors.New("bazClient received no result or unknown exception for TransHeadersNoReq")
		}
	}
	if err != nil {
		ctx = logger.WarnZ(ctx, "Client failure: TChannel client call returned error", zap.Error(err))
		return ctx, resp, respHeaders, err
	}

	resp, err = clientsIDlClientsBazBaz.SimpleService_TransHeadersNoReq_Helper.UnwrapResponse(&result)
	if err != nil {
		ctx = logger.WarnZ(ctx, "Client failure: unable to unwrap client response", zap.Error(err))
	}
	return ctx, resp, respHeaders, err
}

// TransHeadersType is a client RPC call for method "SimpleService::transHeadersType"
func (c *bazClient) TransHeadersType(
	ctx context.Context,
	reqHeaders map[string]string,
	args *clientsIDlClientsBazBaz.SimpleService_TransHeadersType_Args,
	timeoutAndRetryCfg *zanzibar.TimeoutAndRetryOptions,
) (context.Context, *clientsIDlClientsBazBaz.TransHeaderType, map[string]string, error) {
	var result clientsIDlClientsBazBaz.SimpleService_TransHeadersType_Result
	var resp *clientsIDlClientsBazBaz.TransHeaderType

	logger := c.client.ContextLogger

	var success bool
	respHeaders := make(map[string]string)
	var err error
	if c.circuitBreakerDisabled {
		success, respHeaders, err = c.client.Call(
			ctx, "SimpleService", "transHeadersType", reqHeaders, args, &result, timeoutAndRetryCfg,
		)
	} else {
		// We want hystrix ckt-breaker to count errors only for system issues
		var clientErr error
		scope := c.defaultDeps.Scope.Tagged(map[string]string{
			"client":     "baz",
			"methodName": "TransHeadersType",
		})
		start := time.Now()
		circuitBreakerName := "baz" + "-" + "TransHeadersType"
		err = hystrix.DoC(ctx, circuitBreakerName, func(ctx context.Context) error {
			elapsed := time.Now().Sub(start)
			scope.Timer("hystrix-timer").Record(elapsed)
			success, respHeaders, clientErr = c.client.Call(
				ctx, "SimpleService", "transHeadersType", reqHeaders, args, &result, timeoutAndRetryCfg,
			)
			if _, isSysErr := clientErr.(tchannel.SystemError); !isSysErr {
				// Declare ok if it is not a system-error
				return nil
			}
			return clientErr
		}, nil)
		if err == nil {
			// ckt-breaker was ok, bubble up client error if set
			err = clientErr
		}
	}

	if err == nil && !success {
		switch {
		case result.AuthErr != nil:
			err = result.AuthErr
		case result.OtherAuthErr != nil:
			err = result.OtherAuthErr
		case result.Success != nil:
			ctx = logger.ErrorZ(ctx, "Internal error. Success flag is not set for TransHeadersType. Overriding", zap.Error(err))
			success = true
		default:
			err = errors.New("bazClient received no result or unknown exception for TransHeadersType")
		}
	}
	if err != nil {
		ctx = logger.WarnZ(ctx, "Client failure: TChannel client call returned error", zap.Error(err))
		return ctx, resp, respHeaders, err
	}

	resp, err = clientsIDlClientsBazBaz.SimpleService_TransHeadersType_Helper.UnwrapResponse(&result)
	if err != nil {
		ctx = logger.WarnZ(ctx, "Client failure: unable to unwrap client response", zap.Error(err))
	}
	return ctx, resp, respHeaders, err
}

// URLTest is a client RPC call for method "SimpleService::urlTest"
func (c *bazClient) URLTest(
	ctx context.Context,
	reqHeaders map[string]string,
	timeoutAndRetryCfg *zanzibar.TimeoutAndRetryOptions,
) (context.Context, map[string]string, error) {
	var result clientsIDlClientsBazBaz.SimpleService_UrlTest_Result

	logger := c.client.ContextLogger

	args := &clientsIDlClientsBazBaz.SimpleService_UrlTest_Args{}
	var success bool
	respHeaders := make(map[string]string)
	var err error
	if c.circuitBreakerDisabled {
		success, respHeaders, err = c.client.Call(
			ctx, "SimpleService", "urlTest", reqHeaders, args, &result, timeoutAndRetryCfg,
		)
	} else {
		// We want hystrix ckt-breaker to count errors only for system issues
		var clientErr error
		scope := c.defaultDeps.Scope.Tagged(map[string]string{
			"client":     "baz",
			"methodName": "URLTest",
		})
		start := time.Now()
		circuitBreakerName := "baz" + "-" + "URLTest"
		err = hystrix.DoC(ctx, circuitBreakerName, func(ctx context.Context) error {
			elapsed := time.Now().Sub(start)
			scope.Timer("hystrix-timer").Record(elapsed)
			success, respHeaders, clientErr = c.client.Call(
				ctx, "SimpleService", "urlTest", reqHeaders, args, &result, timeoutAndRetryCfg,
			)
			if _, isSysErr := clientErr.(tchannel.SystemError); !isSysErr {
				// Declare ok if it is not a system-error
				return nil
			}
			return clientErr
		}, nil)
		if err == nil {
			// ckt-breaker was ok, bubble up client error if set
			err = clientErr
		}
	}

	if err == nil && !success {
		switch {
		default:
			err = errors.New("bazClient received no result or unknown exception for UrlTest")
		}
	}
	if err != nil {
		ctx = logger.WarnZ(ctx, "Client failure: TChannel client call returned error", zap.Error(err))
		return ctx, respHeaders, err
	}

	return ctx, respHeaders, err
}
