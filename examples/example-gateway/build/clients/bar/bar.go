// Code generated by zanzibar
// @generated

// Copyright (c) 2018 Uber Technologies, Inc.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

package barclient

import (
	"context"
	"fmt"
	"net/url"
	"strconv"
	"time"

	"github.com/afex/hystrix-go/hystrix"

	"github.com/pkg/errors"
	zanzibar "github.com/uber/zanzibar/runtime"
	"github.com/uber/zanzibar/runtime/jsonwrapper"

	module "github.com/uber/zanzibar/examples/example-gateway/build/clients/bar/module"
	clientsBarBar "github.com/uber/zanzibar/examples/example-gateway/build/gen-code/clients/bar/bar"
	clientsFooFoo "github.com/uber/zanzibar/examples/example-gateway/build/gen-code/clients/foo/foo"
)

// Client defines bar client interface.
type Client interface {
	HTTPClient() *zanzibar.HTTPClient
	ArgNotStruct(
		ctx context.Context,
		reqHeaders map[string]string,
		args *clientsBarBar.Bar_ArgNotStruct_Args,
	) (map[string]string, error)
	ArgWithHeaders(
		ctx context.Context,
		reqHeaders map[string]string,
		args *clientsBarBar.Bar_ArgWithHeaders_Args,
	) (*clientsBarBar.BarResponse, map[string]string, error)
	ArgWithManyQueryParams(
		ctx context.Context,
		reqHeaders map[string]string,
		args *clientsBarBar.Bar_ArgWithManyQueryParams_Args,
	) (*clientsBarBar.BarResponse, map[string]string, error)
	ArgWithNearDupQueryParams(
		ctx context.Context,
		reqHeaders map[string]string,
		args *clientsBarBar.Bar_ArgWithNearDupQueryParams_Args,
	) (*clientsBarBar.BarResponse, map[string]string, error)
	ArgWithNestedQueryParams(
		ctx context.Context,
		reqHeaders map[string]string,
		args *clientsBarBar.Bar_ArgWithNestedQueryParams_Args,
	) (*clientsBarBar.BarResponse, map[string]string, error)
	ArgWithParams(
		ctx context.Context,
		reqHeaders map[string]string,
		args *clientsBarBar.Bar_ArgWithParams_Args,
	) (*clientsBarBar.BarResponse, map[string]string, error)
	ArgWithParamsAndDuplicateFields(
		ctx context.Context,
		reqHeaders map[string]string,
		args *clientsBarBar.Bar_ArgWithParamsAndDuplicateFields_Args,
	) (*clientsBarBar.BarResponse, map[string]string, error)
	ArgWithQueryHeader(
		ctx context.Context,
		reqHeaders map[string]string,
		args *clientsBarBar.Bar_ArgWithQueryHeader_Args,
	) (*clientsBarBar.BarResponse, map[string]string, error)
	ArgWithQueryParams(
		ctx context.Context,
		reqHeaders map[string]string,
		args *clientsBarBar.Bar_ArgWithQueryParams_Args,
	) (*clientsBarBar.BarResponse, map[string]string, error)
	DeleteFoo(
		ctx context.Context,
		reqHeaders map[string]string,
		args *clientsBarBar.Bar_DeleteFoo_Args,
	) (map[string]string, error)
	DeleteWithBody(
		ctx context.Context,
		reqHeaders map[string]string,
		args *clientsBarBar.Bar_DeleteWithBody_Args,
	) (map[string]string, error)
	DeleteWithQueryParams(
		ctx context.Context,
		reqHeaders map[string]string,
		args *clientsBarBar.Bar_DeleteWithQueryParams_Args,
	) (map[string]string, error)
	Hello(
		ctx context.Context,
		reqHeaders map[string]string,
	) (string, map[string]string, error)
	ListAndEnum(
		ctx context.Context,
		reqHeaders map[string]string,
		args *clientsBarBar.Bar_ListAndEnum_Args,
	) (string, map[string]string, error)
	MissingArg(
		ctx context.Context,
		reqHeaders map[string]string,
	) (*clientsBarBar.BarResponse, map[string]string, error)
	NoRequest(
		ctx context.Context,
		reqHeaders map[string]string,
	) (*clientsBarBar.BarResponse, map[string]string, error)
	Normal(
		ctx context.Context,
		reqHeaders map[string]string,
		args *clientsBarBar.Bar_Normal_Args,
	) (*clientsBarBar.BarResponse, map[string]string, error)
	NormalRecur(
		ctx context.Context,
		reqHeaders map[string]string,
		args *clientsBarBar.Bar_NormalRecur_Args,
	) (*clientsBarBar.BarResponseRecur, map[string]string, error)
	TooManyArgs(
		ctx context.Context,
		reqHeaders map[string]string,
		args *clientsBarBar.Bar_TooManyArgs_Args,
	) (*clientsBarBar.BarResponse, map[string]string, error)
	EchoBinary(
		ctx context.Context,
		reqHeaders map[string]string,
		args *clientsBarBar.Echo_EchoBinary_Args,
	) ([]byte, map[string]string, error)
	EchoBool(
		ctx context.Context,
		reqHeaders map[string]string,
		args *clientsBarBar.Echo_EchoBool_Args,
	) (bool, map[string]string, error)
	EchoDouble(
		ctx context.Context,
		reqHeaders map[string]string,
		args *clientsBarBar.Echo_EchoDouble_Args,
	) (float64, map[string]string, error)
	EchoEnum(
		ctx context.Context,
		reqHeaders map[string]string,
		args *clientsBarBar.Echo_EchoEnum_Args,
	) (clientsBarBar.Fruit, map[string]string, error)
	EchoI16(
		ctx context.Context,
		reqHeaders map[string]string,
		args *clientsBarBar.Echo_EchoI16_Args,
	) (int16, map[string]string, error)
	EchoI32(
		ctx context.Context,
		reqHeaders map[string]string,
		args *clientsBarBar.Echo_EchoI32_Args,
	) (int32, map[string]string, error)
	EchoI32Map(
		ctx context.Context,
		reqHeaders map[string]string,
		args *clientsBarBar.Echo_EchoI32Map_Args,
	) (map[int32]*clientsBarBar.BarResponse, map[string]string, error)
	EchoI64(
		ctx context.Context,
		reqHeaders map[string]string,
		args *clientsBarBar.Echo_EchoI64_Args,
	) (int64, map[string]string, error)
	EchoI8(
		ctx context.Context,
		reqHeaders map[string]string,
		args *clientsBarBar.Echo_EchoI8_Args,
	) (int8, map[string]string, error)
	EchoString(
		ctx context.Context,
		reqHeaders map[string]string,
		args *clientsBarBar.Echo_EchoString_Args,
	) (string, map[string]string, error)
	EchoStringList(
		ctx context.Context,
		reqHeaders map[string]string,
		args *clientsBarBar.Echo_EchoStringList_Args,
	) ([]string, map[string]string, error)
	EchoStringMap(
		ctx context.Context,
		reqHeaders map[string]string,
		args *clientsBarBar.Echo_EchoStringMap_Args,
	) (map[string]*clientsBarBar.BarResponse, map[string]string, error)
	EchoStringSet(
		ctx context.Context,
		reqHeaders map[string]string,
		args *clientsBarBar.Echo_EchoStringSet_Args,
	) (map[string]struct{}, map[string]string, error)
	EchoStructList(
		ctx context.Context,
		reqHeaders map[string]string,
		args *clientsBarBar.Echo_EchoStructList_Args,
	) ([]*clientsBarBar.BarResponse, map[string]string, error)

	EchoStructSet(
		ctx context.Context,
		reqHeaders map[string]string,
		args *clientsBarBar.Echo_EchoStructSet_Args,
	) ([]*clientsBarBar.BarResponse, map[string]string, error)
	EchoTypedef(
		ctx context.Context,
		reqHeaders map[string]string,
		args *clientsBarBar.Echo_EchoTypedef_Args,
	) (clientsBarBar.UUID, map[string]string, error)
}

// barClient is the http client.
type barClient struct {
	clientID               string
	httpClient             *zanzibar.HTTPClient
	jsonWrapper            jsonwrapper.JSONWrapper
	circuitBreakerDisabled bool
	requestUUIDHeaderKey   string
}

// NewClient returns a new http client.
func NewClient(deps *module.Dependencies) Client {
	ip := deps.Default.Config.MustGetString("clients.bar.ip")
	port := deps.Default.Config.MustGetInt("clients.bar.port")
	baseURL := fmt.Sprintf("http://%s:%d", ip, port)
	timeoutVal := int(deps.Default.Config.MustGetInt("clients.bar.timeout"))
	timeout := time.Millisecond * time.Duration(
		timeoutVal,
	)
	defaultHeaders := make(map[string]string)
	if deps.Default.Config.ContainsKey("http.defaultHeaders") {
		deps.Default.Config.MustGetStruct("http.defaultHeaders", &defaultHeaders)
	}
	if deps.Default.Config.ContainsKey("clients.bar.defaultHeaders") {
		deps.Default.Config.MustGetStruct("clients.bar.defaultHeaders", &defaultHeaders)
	}
	var requestUUIDHeaderKey string
	if deps.Default.Config.ContainsKey("http.clients.requestUUIDHeaderKey") {
		requestUUIDHeaderKey = deps.Default.Config.MustGetString("http.clients.requestUUIDHeaderKey")
	}

	circuitBreakerDisabled := configureCicruitBreaker(deps, timeoutVal)

	return &barClient{
		clientID: "bar",
		httpClient: zanzibar.NewHTTPClientContext(
			deps.Default.Logger, deps.Default.ContextMetrics, deps.Default.JSONWrapper,
			"bar",
			map[string]string{
				"ArgNotStruct":                    "Bar::argNotStruct",
				"ArgWithHeaders":                  "Bar::argWithHeaders",
				"ArgWithManyQueryParams":          "Bar::argWithManyQueryParams",
				"ArgWithNearDupQueryParams":       "Bar::argWithNearDupQueryParams",
				"ArgWithNestedQueryParams":        "Bar::argWithNestedQueryParams",
				"ArgWithParams":                   "Bar::argWithParams",
				"ArgWithParamsAndDuplicateFields": "Bar::argWithParamsAndDuplicateFields",
				"ArgWithQueryHeader":              "Bar::argWithQueryHeader",
				"ArgWithQueryParams":              "Bar::argWithQueryParams",
				"DeleteFoo":                       "Bar::deleteFoo",
				"DeleteWithBody":                  "Bar::deleteWithBody",
				"DeleteWithQueryParams":           "Bar::deleteWithQueryParams",
				"Hello":                           "Bar::helloWorld",
				"ListAndEnum":                     "Bar::listAndEnum",
				"MissingArg":                      "Bar::missingArg",
				"NoRequest":                       "Bar::noRequest",
				"Normal":                          "Bar::normal",
				"NormalRecur":                     "Bar::normalRecur",
				"TooManyArgs":                     "Bar::tooManyArgs",
				"EchoBinary":                      "Echo::echoBinary",
				"EchoBool":                        "Echo::echoBool",
				"EchoDouble":                      "Echo::echoDouble",
				"EchoEnum":                        "Echo::echoEnum",
				"EchoI16":                         "Echo::echoI16",
				"EchoI32":                         "Echo::echoI32",
				"EchoI32Map":                      "Echo::echoI32Map",
				"EchoI64":                         "Echo::echoI64",
				"EchoI8":                          "Echo::echoI8",
				"EchoString":                      "Echo::echoString",
				"EchoStringList":                  "Echo::echoStringList",
				"EchoStringMap":                   "Echo::echoStringMap",
				"EchoStringSet":                   "Echo::echoStringSet",
				"EchoStructList":                  "Echo::echoStructList",
				"EchoStructSet":                   "Echo::echoStructSet",
				"EchoTypedef":                     "Echo::echoTypedef",
			},
			baseURL,
			defaultHeaders,
			timeout,
		),
		circuitBreakerDisabled: circuitBreakerDisabled,
		requestUUIDHeaderKey:   requestUUIDHeaderKey,
	}
}

func configureCicruitBreaker(deps *module.Dependencies, timeoutVal int) bool {
	// circuitBreakerDisabled sets whether circuit-breaker should be disabled
	circuitBreakerDisabled := false
	if deps.Default.Config.ContainsKey("clients.bar.circuitBreakerDisabled") {
		circuitBreakerDisabled = deps.Default.Config.MustGetBoolean("clients.bar.circuitBreakerDisabled")
	}
	// sleepWindowInMilliseconds sets the amount of time, after tripping the circuit,
	// to reject requests before allowing attempts again to determine if the circuit should again be closed
	sleepWindowInMilliseconds := 5000
	if deps.Default.Config.ContainsKey("clients.bar.sleepWindowInMilliseconds") {
		sleepWindowInMilliseconds = int(deps.Default.Config.MustGetInt("clients.bar.sleepWindowInMilliseconds"))
	}
	// maxConcurrentRequests sets how many requests can be run at the same time, beyond which requests are rejected
	maxConcurrentRequests := 20
	if deps.Default.Config.ContainsKey("clients.bar.maxConcurrentRequests") {
		maxConcurrentRequests = int(deps.Default.Config.MustGetInt("clients.bar.maxConcurrentRequests"))
	}
	// errorPercentThreshold sets the error percentage at or above which the circuit should trip open
	errorPercentThreshold := 20
	if deps.Default.Config.ContainsKey("clients.bar.errorPercentThreshold") {
		errorPercentThreshold = int(deps.Default.Config.MustGetInt("clients.bar.errorPercentThreshold"))
	}
	// requestVolumeThreshold sets a minimum number of requests that will trip the circuit in a rolling window of 10s
	// For example, if the value is 20, then if only 19 requests are received in the rolling window of 10 seconds
	// the circuit will not trip open even if all 19 failed.
	requestVolumeThreshold := 20
	if deps.Default.Config.ContainsKey("clients.bar.requestVolumeThreshold") {
		requestVolumeThreshold = int(deps.Default.Config.MustGetInt("clients.bar.requestVolumeThreshold"))
	}
	if !circuitBreakerDisabled {
		hystrix.ConfigureCommand("bar", hystrix.CommandConfig{
			MaxConcurrentRequests:  maxConcurrentRequests,
			ErrorPercentThreshold:  errorPercentThreshold,
			SleepWindow:            sleepWindowInMilliseconds,
			RequestVolumeThreshold: requestVolumeThreshold,
			Timeout:                timeoutVal,
		})
	}
	return circuitBreakerDisabled
}

// HTTPClient returns the underlying HTTP client, should only be
// used for internal testing.
func (c *barClient) HTTPClient() *zanzibar.HTTPClient {
	return c.httpClient
}

// ArgNotStruct calls "/arg-not-struct-path" endpoint.
func (c *barClient) ArgNotStruct(
	ctx context.Context,
	headers map[string]string,
	r *clientsBarBar.Bar_ArgNotStruct_Args,
) (map[string]string, error) {
	reqUUID := zanzibar.RequestUUIDFromCtx(ctx)
	if reqUUID != "" {
		if headers == nil {
			headers = make(map[string]string)
		}
		headers[c.requestUUIDHeaderKey] = reqUUID
	}

	req := zanzibar.NewClientHTTPRequest(ctx, c.clientID, "ArgNotStruct", "Bar::argNotStruct", c.httpClient)

	// Generate full URL.
	fullURL := c.httpClient.BaseURL + "/arg-not-struct-path"

	err := req.WriteJSON("POST", fullURL, headers, r)
	if err != nil {
		return nil, err
	}

	var res *zanzibar.ClientHTTPResponse
	if c.circuitBreakerDisabled {
		res, err = req.Do()
	} else {
		// We want hystrix ckt-breaker to count errors only for system issues
		var clientErr error
		err = hystrix.DoC(ctx, "bar", func(ctx context.Context) error {
			res, clientErr = req.Do()
			if res != nil {
				// This is not a system error/issue. Downstream responded
				return nil
			}
			return clientErr
		}, nil)
		if err == nil {
			// ckt-breaker was ok, bubble up client error if set
			err = clientErr
		}
	}
	if err != nil {
		return nil, err
	}

	respHeaders := make(map[string]string)
	for k := range res.Header {
		respHeaders[k] = res.Header.Get(k)
	}

	res.CheckOKResponse([]int{200, 403})

	switch res.StatusCode {
	case 200:
		_, err = res.ReadAll()
		if err != nil {
			return respHeaders, err
		}

		return respHeaders, nil
	case 403:
		allOptions := []interface{}{
			&clientsBarBar.BarException{},
		}
		v, err := res.ReadAndUnmarshalBodyMultipleOptions(allOptions)
		if err != nil {
			return respHeaders, err
		}
		return respHeaders, v.(error)

	default:
		_, err = res.ReadAll()
		if err != nil {
			return respHeaders, err
		}
	}

	return respHeaders, &zanzibar.UnexpectedHTTPError{
		StatusCode: res.StatusCode,
		RawBody:    res.GetRawBody(),
	}
}

// ArgWithHeaders calls "/bar/argWithHeaders" endpoint.
func (c *barClient) ArgWithHeaders(
	ctx context.Context,
	headers map[string]string,
	r *clientsBarBar.Bar_ArgWithHeaders_Args,
) (*clientsBarBar.BarResponse, map[string]string, error) {
	reqUUID := zanzibar.RequestUUIDFromCtx(ctx)
	if reqUUID != "" {
		if headers == nil {
			headers = make(map[string]string)
		}
		headers[c.requestUUIDHeaderKey] = reqUUID
	}

	var defaultRes *clientsBarBar.BarResponse
	req := zanzibar.NewClientHTTPRequest(ctx, c.clientID, "ArgWithHeaders", "Bar::argWithHeaders", c.httpClient)

	headers["name"] = string(r.Name)
	if r.UserUUID != nil {
		headers["x-uuid"] = string(*r.UserUUID)
	}

	if r.ParamsStruct != nil {
		if r.ParamsStruct.UserID != nil {
			headers["user-id"] = string(*r.ParamsStruct.UserID)
		}
	}

	// Generate full URL.
	fullURL := c.httpClient.BaseURL + "/bar" + "/argWithHeaders"

	err := req.WriteJSON("POST", fullURL, headers, r)
	if err != nil {
		return defaultRes, nil, err
	}

	headerErr := req.CheckHeaders([]string{"x-uuid"})
	if headerErr != nil {
		return defaultRes, nil, headerErr
	}

	var res *zanzibar.ClientHTTPResponse
	if c.circuitBreakerDisabled {
		res, err = req.Do()
	} else {
		// We want hystrix ckt-breaker to count errors only for system issues
		var clientErr error
		err = hystrix.DoC(ctx, "bar", func(ctx context.Context) error {
			res, clientErr = req.Do()
			if res != nil {
				// This is not a system error/issue. Downstream responded
				return nil
			}
			return clientErr
		}, nil)
		if err == nil {
			// ckt-breaker was ok, bubble up client error if set
			err = clientErr
		}
	}
	if err != nil {
		return defaultRes, nil, err
	}

	respHeaders := make(map[string]string)
	for k := range res.Header {
		respHeaders[k] = res.Header.Get(k)
	}

	res.CheckOKResponse([]int{200})

	switch res.StatusCode {
	case 200:
		var responseBody clientsBarBar.BarResponse
		rawBody, err := res.ReadAll()
		if err != nil {
			return defaultRes, respHeaders, err
		}
		err = res.UnmarshalBody(&responseBody, rawBody)
		if err != nil {
			return defaultRes, respHeaders, err
		}
		// TODO(jakev): read response headers and put them in body

		return &responseBody, respHeaders, nil
	default:
		_, err = res.ReadAll()
		if err != nil {
			return defaultRes, respHeaders, err
		}
	}

	return defaultRes, respHeaders, &zanzibar.UnexpectedHTTPError{
		StatusCode: res.StatusCode,
		RawBody:    res.GetRawBody(),
	}
}

// ArgWithManyQueryParams calls "/bar/argWithManyQueryParams" endpoint.
func (c *barClient) ArgWithManyQueryParams(
	ctx context.Context,
	headers map[string]string,
	r *clientsBarBar.Bar_ArgWithManyQueryParams_Args,
) (*clientsBarBar.BarResponse, map[string]string, error) {
	reqUUID := zanzibar.RequestUUIDFromCtx(ctx)
	if reqUUID != "" {
		if headers == nil {
			headers = make(map[string]string)
		}
		headers[c.requestUUIDHeaderKey] = reqUUID
	}

	var defaultRes *clientsBarBar.BarResponse
	req := zanzibar.NewClientHTTPRequest(ctx, c.clientID, "ArgWithManyQueryParams", "Bar::argWithManyQueryParams", c.httpClient)

	// Generate full URL.
	fullURL := c.httpClient.BaseURL + "/bar" + "/argWithManyQueryParams"

	queryValues := &url.Values{}
	aStrQuery := r.AStr
	queryValues.Set("aStr", aStrQuery)
	if r.AnOptStr != nil {
		anOptStrQuery := *r.AnOptStr
		queryValues.Set("anOptStr", anOptStrQuery)
	}
	aBooleanQuery := strconv.FormatBool(r.ABool)
	queryValues.Set("aBoolean", aBooleanQuery)
	if r.AnOptBool != nil {
		anOptBoolQuery := strconv.FormatBool(*r.AnOptBool)
		queryValues.Set("anOptBool", anOptBoolQuery)
	}
	aInt8Query := strconv.FormatInt(int64(r.AInt8), 10)
	queryValues.Set("aInt8", aInt8Query)
	if r.AnOptInt8 != nil {
		anOptInt8Query := strconv.FormatInt(int64(*r.AnOptInt8), 10)
		queryValues.Set("anOptInt8", anOptInt8Query)
	}
	aInt16Query := strconv.FormatInt(int64(r.AInt16), 10)
	queryValues.Set("aInt16", aInt16Query)
	if r.AnOptInt16 != nil {
		anOptInt16Query := strconv.FormatInt(int64(*r.AnOptInt16), 10)
		queryValues.Set("anOptInt16", anOptInt16Query)
	}
	aInt32Query := strconv.FormatInt(int64(r.AInt32), 10)
	queryValues.Set("aInt32", aInt32Query)
	if r.AnOptInt32 != nil {
		anOptInt32Query := strconv.FormatInt(int64(*r.AnOptInt32), 10)
		queryValues.Set("anOptInt32", anOptInt32Query)
	}
	aInt64Query := strconv.FormatInt(int64(r.AInt64), 10)
	queryValues.Set("aInt64", aInt64Query)
	if r.AnOptInt64 != nil {
		anOptInt64Query := strconv.FormatInt(int64(*r.AnOptInt64), 10)
		queryValues.Set("anOptInt64", anOptInt64Query)
	}
	aFloat64Query := strconv.FormatFloat(r.AFloat64, 'G', -1, 64)
	queryValues.Set("aFloat64", aFloat64Query)
	if r.AnOptFloat64 != nil {
		anOptFloat64Query := strconv.FormatFloat(*r.AnOptFloat64, 'G', -1, 64)
		queryValues.Set("anOptFloat64", anOptFloat64Query)
	}
	aUUIDQuery := string(r.AUUID)
	queryValues.Set("aUUID", aUUIDQuery)
	if r.AnOptUUID != nil {
		anOptUUIDQuery := string(*r.AnOptUUID)
		queryValues.Set("anOptUUID", anOptUUIDQuery)
	}
	for _, value := range r.AListUUID {
		queryValues.Add("aListUUID", string(value))
	}
	if r.AnOptListUUID != nil {
		for _, value := range r.AnOptListUUID {
			queryValues.Add("anOptListUUID", string(value))
		}
	}
	for _, value := range r.AStringList {
		queryValues.Add("aStringList", value)
	}
	if r.AnOptStringList != nil {
		for _, value := range r.AnOptStringList {
			queryValues.Add("anOptStringList", value)
		}
	}
	for _, value := range r.AUUIDList {
		queryValues.Add("aUUIDList", string(value))
	}
	if r.AnOptUUIDList != nil {
		for _, value := range r.AnOptUUIDList {
			queryValues.Add("anOptUUIDList", string(value))
		}
	}
	aTsQuery := strconv.FormatInt(int64(r.ATs), 10)
	queryValues.Set("aTs", aTsQuery)
	if r.AnOptTs != nil {
		anOptTsQuery := strconv.FormatInt(int64(*r.AnOptTs), 10)
		queryValues.Set("anOptTs", anOptTsQuery)
	}
	aReqDemoQuery := (r.AReqDemo).String()
	queryValues.Set("aReqDemo", aReqDemoQuery)
	if r.AnOptFruit != nil {
		anOptFruitQuery := (*r.AnOptFruit).String()
		queryValues.Set("anOptFruit", anOptFruitQuery)
	}
	for _, value := range r.AReqFruits {
		queryValues.Add("aReqFruits", (value).String())
	}
	if r.AnOptDemos != nil {
		for _, value := range r.AnOptDemos {
			queryValues.Add("anOptDemos", (value).String())
		}
	}
	fullURL += "?" + queryValues.Encode()

	err := req.WriteJSON("GET", fullURL, headers, nil)
	if err != nil {
		return defaultRes, nil, err
	}

	var res *zanzibar.ClientHTTPResponse
	if c.circuitBreakerDisabled {
		res, err = req.Do()
	} else {
		// We want hystrix ckt-breaker to count errors only for system issues
		var clientErr error
		err = hystrix.DoC(ctx, "bar", func(ctx context.Context) error {
			res, clientErr = req.Do()
			if res != nil {
				// This is not a system error/issue. Downstream responded
				return nil
			}
			return clientErr
		}, nil)
		if err == nil {
			// ckt-breaker was ok, bubble up client error if set
			err = clientErr
		}
	}
	if err != nil {
		return defaultRes, nil, err
	}

	respHeaders := make(map[string]string)
	for k := range res.Header {
		respHeaders[k] = res.Header.Get(k)
	}

	res.CheckOKResponse([]int{200})

	switch res.StatusCode {
	case 200:
		var responseBody clientsBarBar.BarResponse
		rawBody, err := res.ReadAll()
		if err != nil {
			return defaultRes, respHeaders, err
		}
		err = res.UnmarshalBody(&responseBody, rawBody)
		if err != nil {
			return defaultRes, respHeaders, err
		}
		// TODO(jakev): read response headers and put them in body

		return &responseBody, respHeaders, nil
	default:
		_, err = res.ReadAll()
		if err != nil {
			return defaultRes, respHeaders, err
		}
	}

	return defaultRes, respHeaders, &zanzibar.UnexpectedHTTPError{
		StatusCode: res.StatusCode,
		RawBody:    res.GetRawBody(),
	}
}

// ArgWithNearDupQueryParams calls "/bar/clientArgWithNearDupQueryParams" endpoint.
func (c *barClient) ArgWithNearDupQueryParams(
	ctx context.Context,
	headers map[string]string,
	r *clientsBarBar.Bar_ArgWithNearDupQueryParams_Args,
) (*clientsBarBar.BarResponse, map[string]string, error) {
	reqUUID := zanzibar.RequestUUIDFromCtx(ctx)
	if reqUUID != "" {
		if headers == nil {
			headers = make(map[string]string)
		}
		headers[c.requestUUIDHeaderKey] = reqUUID
	}

	var defaultRes *clientsBarBar.BarResponse
	req := zanzibar.NewClientHTTPRequest(ctx, c.clientID, "ArgWithNearDupQueryParams", "Bar::argWithNearDupQueryParams", c.httpClient)

	// Generate full URL.
	fullURL := c.httpClient.BaseURL + "/bar" + "/clientArgWithNearDupQueryParams"

	queryValues := &url.Values{}
	oneQuery := r.One
	queryValues.Set("one", oneQuery)
	if r.Two != nil {
		twoQuery := strconv.FormatInt(int64(*r.Two), 10)
		queryValues.Set("two", twoQuery)
	}
	if r.Three != nil {
		oneNamEQuery := *r.Three
		queryValues.Set("One_NamE", oneNamEQuery)
	}
	if r.Four != nil {
		oneNameQuery := *r.Four
		queryValues.Set("one-Name", oneNameQuery)
	}
	fullURL += "?" + queryValues.Encode()

	err := req.WriteJSON("GET", fullURL, headers, nil)
	if err != nil {
		return defaultRes, nil, err
	}

	var res *zanzibar.ClientHTTPResponse
	if c.circuitBreakerDisabled {
		res, err = req.Do()
	} else {
		// We want hystrix ckt-breaker to count errors only for system issues
		var clientErr error
		err = hystrix.DoC(ctx, "bar", func(ctx context.Context) error {
			res, clientErr = req.Do()
			if res != nil {
				// This is not a system error/issue. Downstream responded
				return nil
			}
			return clientErr
		}, nil)
		if err == nil {
			// ckt-breaker was ok, bubble up client error if set
			err = clientErr
		}
	}
	if err != nil {
		return defaultRes, nil, err
	}

	respHeaders := make(map[string]string)
	for k := range res.Header {
		respHeaders[k] = res.Header.Get(k)
	}

	res.CheckOKResponse([]int{200})

	switch res.StatusCode {
	case 200:
		var responseBody clientsBarBar.BarResponse
		rawBody, err := res.ReadAll()
		if err != nil {
			return defaultRes, respHeaders, err
		}
		err = res.UnmarshalBody(&responseBody, rawBody)
		if err != nil {
			return defaultRes, respHeaders, err
		}
		// TODO(jakev): read response headers and put them in body

		return &responseBody, respHeaders, nil
	default:
		_, err = res.ReadAll()
		if err != nil {
			return defaultRes, respHeaders, err
		}
	}

	return defaultRes, respHeaders, &zanzibar.UnexpectedHTTPError{
		StatusCode: res.StatusCode,
		RawBody:    res.GetRawBody(),
	}
}

// ArgWithNestedQueryParams calls "/bar/argWithNestedQueryParams" endpoint.
func (c *barClient) ArgWithNestedQueryParams(
	ctx context.Context,
	headers map[string]string,
	r *clientsBarBar.Bar_ArgWithNestedQueryParams_Args,
) (*clientsBarBar.BarResponse, map[string]string, error) {
	reqUUID := zanzibar.RequestUUIDFromCtx(ctx)
	if reqUUID != "" {
		if headers == nil {
			headers = make(map[string]string)
		}
		headers[c.requestUUIDHeaderKey] = reqUUID
	}

	var defaultRes *clientsBarBar.BarResponse
	req := zanzibar.NewClientHTTPRequest(ctx, c.clientID, "ArgWithNestedQueryParams", "Bar::argWithNestedQueryParams", c.httpClient)

	// Generate full URL.
	fullURL := c.httpClient.BaseURL + "/bar" + "/argWithNestedQueryParams"

	if r.Request == nil {
		return nil, nil, errors.New(
			"The field .Request is required",
		)
	}
	queryValues := &url.Values{}
	requestNameQuery := r.Request.Name
	queryValues.Set("request.name", requestNameQuery)
	if r.Request.UserUUID != nil {
		requestUserUUIDQuery := *r.Request.UserUUID
		queryValues.Set("request.userUUID", requestUserUUIDQuery)
	}
	if r.Request.AuthUUID != nil {
		requestAuthUUIDQuery := *r.Request.AuthUUID
		queryValues.Set("request.authUUID", requestAuthUUIDQuery)
	}
	if r.Request.AuthUUID2 != nil {
		requestMyuuidQuery := *r.Request.AuthUUID2
		queryValues.Set("myuuid", requestMyuuidQuery)
	}
	for _, value := range r.Request.Foo {
		queryValues.Add("request.foo", value)
	}
	if r.Opt != nil {
		optNameQuery := r.Opt.Name
		queryValues.Set("opt.name", optNameQuery)
		if r.Opt.UserUUID != nil {
			optUserUUIDQuery := *r.Opt.UserUUID
			queryValues.Set("opt.userUUID", optUserUUIDQuery)
		}
		if r.Opt.AuthUUID != nil {
			optAuthUUIDQuery := *r.Opt.AuthUUID
			queryValues.Set("opt.authUUID", optAuthUUIDQuery)
		}
		if r.Opt.AuthUUID2 != nil {
			optAuthUUID2Query := *r.Opt.AuthUUID2
			queryValues.Set("opt.authUUID2", optAuthUUID2Query)
		}
	}
	fullURL += "?" + queryValues.Encode()

	err := req.WriteJSON("GET", fullURL, headers, nil)
	if err != nil {
		return defaultRes, nil, err
	}

	var res *zanzibar.ClientHTTPResponse
	if c.circuitBreakerDisabled {
		res, err = req.Do()
	} else {
		// We want hystrix ckt-breaker to count errors only for system issues
		var clientErr error
		err = hystrix.DoC(ctx, "bar", func(ctx context.Context) error {
			res, clientErr = req.Do()
			if res != nil {
				// This is not a system error/issue. Downstream responded
				return nil
			}
			return clientErr
		}, nil)
		if err == nil {
			// ckt-breaker was ok, bubble up client error if set
			err = clientErr
		}
	}
	if err != nil {
		return defaultRes, nil, err
	}

	respHeaders := make(map[string]string)
	for k := range res.Header {
		respHeaders[k] = res.Header.Get(k)
	}

	res.CheckOKResponse([]int{200})

	switch res.StatusCode {
	case 200:
		var responseBody clientsBarBar.BarResponse
		rawBody, err := res.ReadAll()
		if err != nil {
			return defaultRes, respHeaders, err
		}
		err = res.UnmarshalBody(&responseBody, rawBody)
		if err != nil {
			return defaultRes, respHeaders, err
		}
		// TODO(jakev): read response headers and put them in body

		return &responseBody, respHeaders, nil
	default:
		_, err = res.ReadAll()
		if err != nil {
			return defaultRes, respHeaders, err
		}
	}

	return defaultRes, respHeaders, &zanzibar.UnexpectedHTTPError{
		StatusCode: res.StatusCode,
		RawBody:    res.GetRawBody(),
	}
}

// ArgWithParams calls "/bar/argWithParams/:uuid/segment/:user-uuid" endpoint.
func (c *barClient) ArgWithParams(
	ctx context.Context,
	headers map[string]string,
	r *clientsBarBar.Bar_ArgWithParams_Args,
) (*clientsBarBar.BarResponse, map[string]string, error) {
	reqUUID := zanzibar.RequestUUIDFromCtx(ctx)
	if reqUUID != "" {
		if headers == nil {
			headers = make(map[string]string)
		}
		headers[c.requestUUIDHeaderKey] = reqUUID
	}

	var defaultRes *clientsBarBar.BarResponse
	req := zanzibar.NewClientHTTPRequest(ctx, c.clientID, "ArgWithParams", "Bar::argWithParams", c.httpClient)

	// Generate full URL.
	fullURL := c.httpClient.BaseURL + "/bar" + "/argWithParams" + "/" + string(r.UUID) + "/segment" + "/" + string(r.Params.UserUUID)

	err := req.WriteJSON("GET", fullURL, headers, nil)
	if err != nil {
		return defaultRes, nil, err
	}

	var res *zanzibar.ClientHTTPResponse
	if c.circuitBreakerDisabled {
		res, err = req.Do()
	} else {
		// We want hystrix ckt-breaker to count errors only for system issues
		var clientErr error
		err = hystrix.DoC(ctx, "bar", func(ctx context.Context) error {
			res, clientErr = req.Do()
			if res != nil {
				// This is not a system error/issue. Downstream responded
				return nil
			}
			return clientErr
		}, nil)
		if err == nil {
			// ckt-breaker was ok, bubble up client error if set
			err = clientErr
		}
	}
	if err != nil {
		return defaultRes, nil, err
	}

	respHeaders := make(map[string]string)
	for k := range res.Header {
		respHeaders[k] = res.Header.Get(k)
	}

	res.CheckOKResponse([]int{200})

	switch res.StatusCode {
	case 200:
		var responseBody clientsBarBar.BarResponse
		rawBody, err := res.ReadAll()
		if err != nil {
			return defaultRes, respHeaders, err
		}
		err = res.UnmarshalBody(&responseBody, rawBody)
		if err != nil {
			return defaultRes, respHeaders, err
		}
		// TODO(jakev): read response headers and put them in body

		return &responseBody, respHeaders, nil
	default:
		_, err = res.ReadAll()
		if err != nil {
			return defaultRes, respHeaders, err
		}
	}

	return defaultRes, respHeaders, &zanzibar.UnexpectedHTTPError{
		StatusCode: res.StatusCode,
		RawBody:    res.GetRawBody(),
	}
}

// ArgWithParamsAndDuplicateFields calls "/bar/argWithParamsAndDuplicateFields/:uuid/segment" endpoint.
func (c *barClient) ArgWithParamsAndDuplicateFields(
	ctx context.Context,
	headers map[string]string,
	r *clientsBarBar.Bar_ArgWithParamsAndDuplicateFields_Args,
) (*clientsBarBar.BarResponse, map[string]string, error) {
	reqUUID := zanzibar.RequestUUIDFromCtx(ctx)
	if reqUUID != "" {
		if headers == nil {
			headers = make(map[string]string)
		}
		headers[c.requestUUIDHeaderKey] = reqUUID
	}

	var defaultRes *clientsBarBar.BarResponse
	req := zanzibar.NewClientHTTPRequest(ctx, c.clientID, "ArgWithParamsAndDuplicateFields", "Bar::argWithParamsAndDuplicateFields", c.httpClient)

	// Generate full URL.
	fullURL := c.httpClient.BaseURL + "/bar" + "/argWithParamsAndDuplicateFields" + "/" + string(r.EntityUUID) + "/segment"

	err := req.WriteJSON("POST", fullURL, headers, r)
	if err != nil {
		return defaultRes, nil, err
	}

	var res *zanzibar.ClientHTTPResponse
	if c.circuitBreakerDisabled {
		res, err = req.Do()
	} else {
		// We want hystrix ckt-breaker to count errors only for system issues
		var clientErr error
		err = hystrix.DoC(ctx, "bar", func(ctx context.Context) error {
			res, clientErr = req.Do()
			if res != nil {
				// This is not a system error/issue. Downstream responded
				return nil
			}
			return clientErr
		}, nil)
		if err == nil {
			// ckt-breaker was ok, bubble up client error if set
			err = clientErr
		}
	}
	if err != nil {
		return defaultRes, nil, err
	}

	respHeaders := make(map[string]string)
	for k := range res.Header {
		respHeaders[k] = res.Header.Get(k)
	}

	res.CheckOKResponse([]int{200})

	switch res.StatusCode {
	case 200:
		var responseBody clientsBarBar.BarResponse
		rawBody, err := res.ReadAll()
		if err != nil {
			return defaultRes, respHeaders, err
		}
		err = res.UnmarshalBody(&responseBody, rawBody)
		if err != nil {
			return defaultRes, respHeaders, err
		}
		// TODO(jakev): read response headers and put them in body

		return &responseBody, respHeaders, nil
	default:
		_, err = res.ReadAll()
		if err != nil {
			return defaultRes, respHeaders, err
		}
	}

	return defaultRes, respHeaders, &zanzibar.UnexpectedHTTPError{
		StatusCode: res.StatusCode,
		RawBody:    res.GetRawBody(),
	}
}

// ArgWithQueryHeader calls "/bar/argWithQueryHeader" endpoint.
func (c *barClient) ArgWithQueryHeader(
	ctx context.Context,
	headers map[string]string,
	r *clientsBarBar.Bar_ArgWithQueryHeader_Args,
) (*clientsBarBar.BarResponse, map[string]string, error) {
	reqUUID := zanzibar.RequestUUIDFromCtx(ctx)
	if reqUUID != "" {
		if headers == nil {
			headers = make(map[string]string)
		}
		headers[c.requestUUIDHeaderKey] = reqUUID
	}

	var defaultRes *clientsBarBar.BarResponse
	req := zanzibar.NewClientHTTPRequest(ctx, c.clientID, "ArgWithQueryHeader", "Bar::argWithQueryHeader", c.httpClient)

	// Generate full URL.
	fullURL := c.httpClient.BaseURL + "/bar" + "/argWithQueryHeader"

	err := req.WriteJSON("POST", fullURL, headers, r)
	if err != nil {
		return defaultRes, nil, err
	}

	var res *zanzibar.ClientHTTPResponse
	if c.circuitBreakerDisabled {
		res, err = req.Do()
	} else {
		// We want hystrix ckt-breaker to count errors only for system issues
		var clientErr error
		err = hystrix.DoC(ctx, "bar", func(ctx context.Context) error {
			res, clientErr = req.Do()
			if res != nil {
				// This is not a system error/issue. Downstream responded
				return nil
			}
			return clientErr
		}, nil)
		if err == nil {
			// ckt-breaker was ok, bubble up client error if set
			err = clientErr
		}
	}
	if err != nil {
		return defaultRes, nil, err
	}

	respHeaders := make(map[string]string)
	for k := range res.Header {
		respHeaders[k] = res.Header.Get(k)
	}

	res.CheckOKResponse([]int{200})

	switch res.StatusCode {
	case 200:
		var responseBody clientsBarBar.BarResponse
		rawBody, err := res.ReadAll()
		if err != nil {
			return defaultRes, respHeaders, err
		}
		err = res.UnmarshalBody(&responseBody, rawBody)
		if err != nil {
			return defaultRes, respHeaders, err
		}
		// TODO(jakev): read response headers and put them in body

		return &responseBody, respHeaders, nil
	default:
		_, err = res.ReadAll()
		if err != nil {
			return defaultRes, respHeaders, err
		}
	}

	return defaultRes, respHeaders, &zanzibar.UnexpectedHTTPError{
		StatusCode: res.StatusCode,
		RawBody:    res.GetRawBody(),
	}
}

// ArgWithQueryParams calls "/bar/argWithQueryParams" endpoint.
func (c *barClient) ArgWithQueryParams(
	ctx context.Context,
	headers map[string]string,
	r *clientsBarBar.Bar_ArgWithQueryParams_Args,
) (*clientsBarBar.BarResponse, map[string]string, error) {
	reqUUID := zanzibar.RequestUUIDFromCtx(ctx)
	if reqUUID != "" {
		if headers == nil {
			headers = make(map[string]string)
		}
		headers[c.requestUUIDHeaderKey] = reqUUID
	}

	var defaultRes *clientsBarBar.BarResponse
	req := zanzibar.NewClientHTTPRequest(ctx, c.clientID, "ArgWithQueryParams", "Bar::argWithQueryParams", c.httpClient)

	// Generate full URL.
	fullURL := c.httpClient.BaseURL + "/bar" + "/argWithQueryParams"

	queryValues := &url.Values{}
	nameQuery := r.Name
	queryValues.Set("name", nameQuery)
	if r.UserUUID != nil {
		userUUIDQuery := *r.UserUUID
		queryValues.Set("userUUID", userUUIDQuery)
	}
	if r.Foo != nil {
		for _, value := range r.Foo {
			queryValues.Add("foo", value)
		}
	}
	for _, value := range r.Bar {
		queryValues.Add("bar", strconv.FormatInt(int64(value), 10))
	}
	fullURL += "?" + queryValues.Encode()

	err := req.WriteJSON("GET", fullURL, headers, nil)
	if err != nil {
		return defaultRes, nil, err
	}

	var res *zanzibar.ClientHTTPResponse
	if c.circuitBreakerDisabled {
		res, err = req.Do()
	} else {
		// We want hystrix ckt-breaker to count errors only for system issues
		var clientErr error
		err = hystrix.DoC(ctx, "bar", func(ctx context.Context) error {
			res, clientErr = req.Do()
			if res != nil {
				// This is not a system error/issue. Downstream responded
				return nil
			}
			return clientErr
		}, nil)
		if err == nil {
			// ckt-breaker was ok, bubble up client error if set
			err = clientErr
		}
	}
	if err != nil {
		return defaultRes, nil, err
	}

	respHeaders := make(map[string]string)
	for k := range res.Header {
		respHeaders[k] = res.Header.Get(k)
	}

	res.CheckOKResponse([]int{200})

	switch res.StatusCode {
	case 200:
		var responseBody clientsBarBar.BarResponse
		rawBody, err := res.ReadAll()
		if err != nil {
			return defaultRes, respHeaders, err
		}
		err = res.UnmarshalBody(&responseBody, rawBody)
		if err != nil {
			return defaultRes, respHeaders, err
		}
		// TODO(jakev): read response headers and put them in body

		return &responseBody, respHeaders, nil
	default:
		_, err = res.ReadAll()
		if err != nil {
			return defaultRes, respHeaders, err
		}
	}

	return defaultRes, respHeaders, &zanzibar.UnexpectedHTTPError{
		StatusCode: res.StatusCode,
		RawBody:    res.GetRawBody(),
	}
}

// DeleteFoo calls "/bar/foo" endpoint.
func (c *barClient) DeleteFoo(
	ctx context.Context,
	headers map[string]string,
	r *clientsBarBar.Bar_DeleteFoo_Args,
) (map[string]string, error) {
	reqUUID := zanzibar.RequestUUIDFromCtx(ctx)
	if reqUUID != "" {
		if headers == nil {
			headers = make(map[string]string)
		}
		headers[c.requestUUIDHeaderKey] = reqUUID
	}

	req := zanzibar.NewClientHTTPRequest(ctx, c.clientID, "DeleteFoo", "Bar::deleteFoo", c.httpClient)

	headers["x-uuid"] = string(r.UserUUID)

	// Generate full URL.
	fullURL := c.httpClient.BaseURL + "/bar" + "/foo"

	err := req.WriteJSON("DELETE", fullURL, headers, r)
	if err != nil {
		return nil, err
	}

	headerErr := req.CheckHeaders([]string{"x-uuid"})
	if headerErr != nil {
		return nil, headerErr
	}

	var res *zanzibar.ClientHTTPResponse
	if c.circuitBreakerDisabled {
		res, err = req.Do()
	} else {
		// We want hystrix ckt-breaker to count errors only for system issues
		var clientErr error
		err = hystrix.DoC(ctx, "bar", func(ctx context.Context) error {
			res, clientErr = req.Do()
			if res != nil {
				// This is not a system error/issue. Downstream responded
				return nil
			}
			return clientErr
		}, nil)
		if err == nil {
			// ckt-breaker was ok, bubble up client error if set
			err = clientErr
		}
	}
	if err != nil {
		return nil, err
	}

	respHeaders := make(map[string]string)
	for k := range res.Header {
		respHeaders[k] = res.Header.Get(k)
	}

	res.CheckOKResponse([]int{200})

	switch res.StatusCode {
	case 200:
		_, err = res.ReadAll()
		if err != nil {
			return respHeaders, err
		}
		return respHeaders, nil
	default:
		_, err = res.ReadAll()
		if err != nil {
			return respHeaders, err
		}
	}

	return respHeaders, &zanzibar.UnexpectedHTTPError{
		StatusCode: res.StatusCode,
		RawBody:    res.GetRawBody(),
	}
}

// DeleteWithBody calls "/bar/withBody" endpoint.
func (c *barClient) DeleteWithBody(
	ctx context.Context,
	headers map[string]string,
	r *clientsBarBar.Bar_DeleteWithBody_Args,
) (map[string]string, error) {
	reqUUID := zanzibar.RequestUUIDFromCtx(ctx)
	if reqUUID != "" {
		if headers == nil {
			headers = make(map[string]string)
		}
		headers[c.requestUUIDHeaderKey] = reqUUID
	}

	req := zanzibar.NewClientHTTPRequest(ctx, c.clientID, "DeleteWithBody", "Bar::deleteWithBody", c.httpClient)

	// Generate full URL.
	fullURL := c.httpClient.BaseURL + "/bar" + "/withBody"

	err := req.WriteJSON("DELETE", fullURL, headers, r)
	if err != nil {
		return nil, err
	}

	var res *zanzibar.ClientHTTPResponse
	if c.circuitBreakerDisabled {
		res, err = req.Do()
	} else {
		// We want hystrix ckt-breaker to count errors only for system issues
		var clientErr error
		err = hystrix.DoC(ctx, "bar", func(ctx context.Context) error {
			res, clientErr = req.Do()
			if res != nil {
				// This is not a system error/issue. Downstream responded
				return nil
			}
			return clientErr
		}, nil)
		if err == nil {
			// ckt-breaker was ok, bubble up client error if set
			err = clientErr
		}
	}
	if err != nil {
		return nil, err
	}

	respHeaders := make(map[string]string)
	for k := range res.Header {
		respHeaders[k] = res.Header.Get(k)
	}

	res.CheckOKResponse([]int{200})

	switch res.StatusCode {
	case 200:
		_, err = res.ReadAll()
		if err != nil {
			return respHeaders, err
		}
		return respHeaders, nil
	default:
		_, err = res.ReadAll()
		if err != nil {
			return respHeaders, err
		}
	}

	return respHeaders, &zanzibar.UnexpectedHTTPError{
		StatusCode: res.StatusCode,
		RawBody:    res.GetRawBody(),
	}
}

// DeleteWithQueryParams calls "/bar/withQueryParams" endpoint.
func (c *barClient) DeleteWithQueryParams(
	ctx context.Context,
	headers map[string]string,
	r *clientsBarBar.Bar_DeleteWithQueryParams_Args,
) (map[string]string, error) {
	reqUUID := zanzibar.RequestUUIDFromCtx(ctx)
	if reqUUID != "" {
		if headers == nil {
			headers = make(map[string]string)
		}
		headers[c.requestUUIDHeaderKey] = reqUUID
	}

	req := zanzibar.NewClientHTTPRequest(ctx, c.clientID, "DeleteWithQueryParams", "Bar::deleteWithQueryParams", c.httpClient)

	// Generate full URL.
	fullURL := c.httpClient.BaseURL + "/bar" + "/withQueryParams"

	queryValues := &url.Values{}
	filterQuery := r.Filter
	queryValues.Set("filter", filterQuery)
	if r.Count != nil {
		countQuery := strconv.FormatInt(int64(*r.Count), 10)
		queryValues.Set("count", countQuery)
	}
	fullURL += "?" + queryValues.Encode()

	err := req.WriteJSON("DELETE", fullURL, headers, r)
	if err != nil {
		return nil, err
	}

	var res *zanzibar.ClientHTTPResponse
	if c.circuitBreakerDisabled {
		res, err = req.Do()
	} else {
		// We want hystrix ckt-breaker to count errors only for system issues
		var clientErr error
		err = hystrix.DoC(ctx, "bar", func(ctx context.Context) error {
			res, clientErr = req.Do()
			if res != nil {
				// This is not a system error/issue. Downstream responded
				return nil
			}
			return clientErr
		}, nil)
		if err == nil {
			// ckt-breaker was ok, bubble up client error if set
			err = clientErr
		}
	}
	if err != nil {
		return nil, err
	}

	respHeaders := make(map[string]string)
	for k := range res.Header {
		respHeaders[k] = res.Header.Get(k)
	}

	res.CheckOKResponse([]int{200})

	switch res.StatusCode {
	case 200:
		_, err = res.ReadAll()
		if err != nil {
			return respHeaders, err
		}
		return respHeaders, nil
	default:
		_, err = res.ReadAll()
		if err != nil {
			return respHeaders, err
		}
	}

	return respHeaders, &zanzibar.UnexpectedHTTPError{
		StatusCode: res.StatusCode,
		RawBody:    res.GetRawBody(),
	}
}

// Hello calls "/bar/hello" endpoint.
func (c *barClient) Hello(
	ctx context.Context,
	headers map[string]string,
) (string, map[string]string, error) {
	reqUUID := zanzibar.RequestUUIDFromCtx(ctx)
	if reqUUID != "" {
		if headers == nil {
			headers = make(map[string]string)
		}
		headers[c.requestUUIDHeaderKey] = reqUUID
	}

	var defaultRes string
	req := zanzibar.NewClientHTTPRequest(ctx, c.clientID, "Hello", "Bar::helloWorld", c.httpClient)

	// Generate full URL.
	fullURL := c.httpClient.BaseURL + "/bar" + "/hello"

	err := req.WriteJSON("GET", fullURL, headers, nil)
	if err != nil {
		return defaultRes, nil, err
	}

	var res *zanzibar.ClientHTTPResponse
	if c.circuitBreakerDisabled {
		res, err = req.Do()
	} else {
		// We want hystrix ckt-breaker to count errors only for system issues
		var clientErr error
		err = hystrix.DoC(ctx, "bar", func(ctx context.Context) error {
			res, clientErr = req.Do()
			if res != nil {
				// This is not a system error/issue. Downstream responded
				return nil
			}
			return clientErr
		}, nil)
		if err == nil {
			// ckt-breaker was ok, bubble up client error if set
			err = clientErr
		}
	}
	if err != nil {
		return defaultRes, nil, err
	}

	respHeaders := make(map[string]string)
	for k := range res.Header {
		respHeaders[k] = res.Header.Get(k)
	}

	res.CheckOKResponse([]int{200, 403})

	switch res.StatusCode {
	case 200:
		var responseBody string
		rawBody, err := res.ReadAll()
		if err != nil {
			return defaultRes, respHeaders, err
		}
		err = res.UnmarshalBody(&responseBody, rawBody)
		if err != nil {
			return defaultRes, respHeaders, err
		}

		return responseBody, respHeaders, nil

	case 403:
		allOptions := []interface{}{
			&clientsBarBar.BarException{},
		}
		v, err := res.ReadAndUnmarshalBodyMultipleOptions(allOptions)
		if err != nil {
			return defaultRes, respHeaders, err
		}
		return defaultRes, respHeaders, v.(error)

	default:
		_, err = res.ReadAll()
		if err != nil {
			return defaultRes, respHeaders, err
		}
	}

	return defaultRes, respHeaders, &zanzibar.UnexpectedHTTPError{
		StatusCode: res.StatusCode,
		RawBody:    res.GetRawBody(),
	}
}

// ListAndEnum calls "/bar/list-and-enum" endpoint.
func (c *barClient) ListAndEnum(
	ctx context.Context,
	headers map[string]string,
	r *clientsBarBar.Bar_ListAndEnum_Args,
) (string, map[string]string, error) {
	reqUUID := zanzibar.RequestUUIDFromCtx(ctx)
	if reqUUID != "" {
		if headers == nil {
			headers = make(map[string]string)
		}
		headers[c.requestUUIDHeaderKey] = reqUUID
	}

	var defaultRes string
	req := zanzibar.NewClientHTTPRequest(ctx, c.clientID, "ListAndEnum", "Bar::listAndEnum", c.httpClient)

	// Generate full URL.
	fullURL := c.httpClient.BaseURL + "/bar" + "/list-and-enum"

	queryValues := &url.Values{}
	for _, value := range r.DemoIds {
		queryValues.Add("demoIds", value)
	}
	if r.DemoType != nil {
		demoTypeQuery := (*r.DemoType).String()
		queryValues.Set("demoType", demoTypeQuery)
	}
	if r.Demos != nil {
		for _, value := range r.Demos {
			queryValues.Add("demos", (value).String())
		}
	}
	fullURL += "?" + queryValues.Encode()

	err := req.WriteJSON("GET", fullURL, headers, nil)
	if err != nil {
		return defaultRes, nil, err
	}

	var res *zanzibar.ClientHTTPResponse
	if c.circuitBreakerDisabled {
		res, err = req.Do()
	} else {
		// We want hystrix ckt-breaker to count errors only for system issues
		var clientErr error
		err = hystrix.DoC(ctx, "bar", func(ctx context.Context) error {
			res, clientErr = req.Do()
			if res != nil {
				// This is not a system error/issue. Downstream responded
				return nil
			}
			return clientErr
		}, nil)
		if err == nil {
			// ckt-breaker was ok, bubble up client error if set
			err = clientErr
		}
	}
	if err != nil {
		return defaultRes, nil, err
	}

	respHeaders := make(map[string]string)
	for k := range res.Header {
		respHeaders[k] = res.Header.Get(k)
	}

	res.CheckOKResponse([]int{200, 403})

	switch res.StatusCode {
	case 200:
		var responseBody string
		rawBody, err := res.ReadAll()
		if err != nil {
			return defaultRes, respHeaders, err
		}
		err = res.UnmarshalBody(&responseBody, rawBody)
		if err != nil {
			return defaultRes, respHeaders, err
		}

		return responseBody, respHeaders, nil

	case 403:
		allOptions := []interface{}{
			&clientsBarBar.BarException{},
		}
		v, err := res.ReadAndUnmarshalBodyMultipleOptions(allOptions)
		if err != nil {
			return defaultRes, respHeaders, err
		}
		return defaultRes, respHeaders, v.(error)

	default:
		_, err = res.ReadAll()
		if err != nil {
			return defaultRes, respHeaders, err
		}
	}

	return defaultRes, respHeaders, &zanzibar.UnexpectedHTTPError{
		StatusCode: res.StatusCode,
		RawBody:    res.GetRawBody(),
	}
}

// MissingArg calls "/missing-arg-path" endpoint.
func (c *barClient) MissingArg(
	ctx context.Context,
	headers map[string]string,
) (*clientsBarBar.BarResponse, map[string]string, error) {
	reqUUID := zanzibar.RequestUUIDFromCtx(ctx)
	if reqUUID != "" {
		if headers == nil {
			headers = make(map[string]string)
		}
		headers[c.requestUUIDHeaderKey] = reqUUID
	}

	var defaultRes *clientsBarBar.BarResponse
	req := zanzibar.NewClientHTTPRequest(ctx, c.clientID, "MissingArg", "Bar::missingArg", c.httpClient)

	// Generate full URL.
	fullURL := c.httpClient.BaseURL + "/missing-arg-path"

	err := req.WriteJSON("GET", fullURL, headers, nil)
	if err != nil {
		return defaultRes, nil, err
	}

	var res *zanzibar.ClientHTTPResponse
	if c.circuitBreakerDisabled {
		res, err = req.Do()
	} else {
		// We want hystrix ckt-breaker to count errors only for system issues
		var clientErr error
		err = hystrix.DoC(ctx, "bar", func(ctx context.Context) error {
			res, clientErr = req.Do()
			if res != nil {
				// This is not a system error/issue. Downstream responded
				return nil
			}
			return clientErr
		}, nil)
		if err == nil {
			// ckt-breaker was ok, bubble up client error if set
			err = clientErr
		}
	}
	if err != nil {
		return defaultRes, nil, err
	}

	respHeaders := make(map[string]string)
	for k := range res.Header {
		respHeaders[k] = res.Header.Get(k)
	}

	res.CheckOKResponse([]int{200, 403})

	switch res.StatusCode {
	case 200:
		var responseBody clientsBarBar.BarResponse
		rawBody, err := res.ReadAll()
		if err != nil {
			return defaultRes, respHeaders, err
		}
		err = res.UnmarshalBody(&responseBody, rawBody)
		if err != nil {
			return defaultRes, respHeaders, err
		}
		// TODO(jakev): read response headers and put them in body

		return &responseBody, respHeaders, nil

	case 403:
		allOptions := []interface{}{
			&clientsBarBar.BarException{},
		}
		v, err := res.ReadAndUnmarshalBodyMultipleOptions(allOptions)
		if err != nil {
			return defaultRes, respHeaders, err
		}
		return defaultRes, respHeaders, v.(error)

	default:
		_, err = res.ReadAll()
		if err != nil {
			return defaultRes, respHeaders, err
		}
	}

	return defaultRes, respHeaders, &zanzibar.UnexpectedHTTPError{
		StatusCode: res.StatusCode,
		RawBody:    res.GetRawBody(),
	}
}

// NoRequest calls "/no-request-path" endpoint.
func (c *barClient) NoRequest(
	ctx context.Context,
	headers map[string]string,
) (*clientsBarBar.BarResponse, map[string]string, error) {
	reqUUID := zanzibar.RequestUUIDFromCtx(ctx)
	if reqUUID != "" {
		if headers == nil {
			headers = make(map[string]string)
		}
		headers[c.requestUUIDHeaderKey] = reqUUID
	}

	var defaultRes *clientsBarBar.BarResponse
	req := zanzibar.NewClientHTTPRequest(ctx, c.clientID, "NoRequest", "Bar::noRequest", c.httpClient)

	// Generate full URL.
	fullURL := c.httpClient.BaseURL + "/no-request-path"

	err := req.WriteJSON("GET", fullURL, headers, nil)
	if err != nil {
		return defaultRes, nil, err
	}

	var res *zanzibar.ClientHTTPResponse
	if c.circuitBreakerDisabled {
		res, err = req.Do()
	} else {
		// We want hystrix ckt-breaker to count errors only for system issues
		var clientErr error
		err = hystrix.DoC(ctx, "bar", func(ctx context.Context) error {
			res, clientErr = req.Do()
			if res != nil {
				// This is not a system error/issue. Downstream responded
				return nil
			}
			return clientErr
		}, nil)
		if err == nil {
			// ckt-breaker was ok, bubble up client error if set
			err = clientErr
		}
	}
	if err != nil {
		return defaultRes, nil, err
	}

	respHeaders := make(map[string]string)
	for k := range res.Header {
		respHeaders[k] = res.Header.Get(k)
	}

	res.CheckOKResponse([]int{200, 403})

	switch res.StatusCode {
	case 200:
		var responseBody clientsBarBar.BarResponse
		rawBody, err := res.ReadAll()
		if err != nil {
			return defaultRes, respHeaders, err
		}
		err = res.UnmarshalBody(&responseBody, rawBody)
		if err != nil {
			return defaultRes, respHeaders, err
		}
		// TODO(jakev): read response headers and put them in body

		return &responseBody, respHeaders, nil

	case 403:
		allOptions := []interface{}{
			&clientsBarBar.BarException{},
		}
		v, err := res.ReadAndUnmarshalBodyMultipleOptions(allOptions)
		if err != nil {
			return defaultRes, respHeaders, err
		}
		return defaultRes, respHeaders, v.(error)

	default:
		_, err = res.ReadAll()
		if err != nil {
			return defaultRes, respHeaders, err
		}
	}

	return defaultRes, respHeaders, &zanzibar.UnexpectedHTTPError{
		StatusCode: res.StatusCode,
		RawBody:    res.GetRawBody(),
	}
}

// Normal calls "/bar-path" endpoint.
func (c *barClient) Normal(
	ctx context.Context,
	headers map[string]string,
	r *clientsBarBar.Bar_Normal_Args,
) (*clientsBarBar.BarResponse, map[string]string, error) {
	reqUUID := zanzibar.RequestUUIDFromCtx(ctx)
	if reqUUID != "" {
		if headers == nil {
			headers = make(map[string]string)
		}
		headers[c.requestUUIDHeaderKey] = reqUUID
	}

	var defaultRes *clientsBarBar.BarResponse
	req := zanzibar.NewClientHTTPRequest(ctx, c.clientID, "Normal", "Bar::normal", c.httpClient)

	// Generate full URL.
	fullURL := c.httpClient.BaseURL + "/bar-path"

	err := req.WriteJSON("POST", fullURL, headers, r)
	if err != nil {
		return defaultRes, nil, err
	}

	var res *zanzibar.ClientHTTPResponse
	if c.circuitBreakerDisabled {
		res, err = req.Do()
	} else {
		// We want hystrix ckt-breaker to count errors only for system issues
		var clientErr error
		err = hystrix.DoC(ctx, "bar", func(ctx context.Context) error {
			res, clientErr = req.Do()
			if res != nil {
				// This is not a system error/issue. Downstream responded
				return nil
			}
			return clientErr
		}, nil)
		if err == nil {
			// ckt-breaker was ok, bubble up client error if set
			err = clientErr
		}
	}
	if err != nil {
		return defaultRes, nil, err
	}

	respHeaders := make(map[string]string)
	for k := range res.Header {
		respHeaders[k] = res.Header.Get(k)
	}

	res.CheckOKResponse([]int{200, 403})

	switch res.StatusCode {
	case 200:
		var responseBody clientsBarBar.BarResponse
		rawBody, err := res.ReadAll()
		if err != nil {
			return defaultRes, respHeaders, err
		}
		err = res.UnmarshalBody(&responseBody, rawBody)
		if err != nil {
			return defaultRes, respHeaders, err
		}
		// TODO(jakev): read response headers and put them in body

		return &responseBody, respHeaders, nil

	case 403:
		allOptions := []interface{}{
			&clientsBarBar.BarException{},
		}
		v, err := res.ReadAndUnmarshalBodyMultipleOptions(allOptions)
		if err != nil {
			return defaultRes, respHeaders, err
		}
		return defaultRes, respHeaders, v.(error)

	default:
		_, err = res.ReadAll()
		if err != nil {
			return defaultRes, respHeaders, err
		}
	}

	return defaultRes, respHeaders, &zanzibar.UnexpectedHTTPError{
		StatusCode: res.StatusCode,
		RawBody:    res.GetRawBody(),
	}
}

// NormalRecur calls "/bar/recur" endpoint.
func (c *barClient) NormalRecur(
	ctx context.Context,
	headers map[string]string,
	r *clientsBarBar.Bar_NormalRecur_Args,
) (*clientsBarBar.BarResponseRecur, map[string]string, error) {
	reqUUID := zanzibar.RequestUUIDFromCtx(ctx)
	if reqUUID != "" {
		if headers == nil {
			headers = make(map[string]string)
		}
		headers[c.requestUUIDHeaderKey] = reqUUID
	}

	var defaultRes *clientsBarBar.BarResponseRecur
	req := zanzibar.NewClientHTTPRequest(ctx, c.clientID, "NormalRecur", "Bar::normalRecur", c.httpClient)

	// Generate full URL.
	fullURL := c.httpClient.BaseURL + "/bar" + "/recur"

	err := req.WriteJSON("POST", fullURL, headers, r)
	if err != nil {
		return defaultRes, nil, err
	}

	var res *zanzibar.ClientHTTPResponse
	if c.circuitBreakerDisabled {
		res, err = req.Do()
	} else {
		// We want hystrix ckt-breaker to count errors only for system issues
		var clientErr error
		err = hystrix.DoC(ctx, "bar", func(ctx context.Context) error {
			res, clientErr = req.Do()
			if res != nil {
				// This is not a system error/issue. Downstream responded
				return nil
			}
			return clientErr
		}, nil)
		if err == nil {
			// ckt-breaker was ok, bubble up client error if set
			err = clientErr
		}
	}
	if err != nil {
		return defaultRes, nil, err
	}

	respHeaders := make(map[string]string)
	for k := range res.Header {
		respHeaders[k] = res.Header.Get(k)
	}

	res.CheckOKResponse([]int{200, 403})

	switch res.StatusCode {
	case 200:
		var responseBody clientsBarBar.BarResponseRecur
		rawBody, err := res.ReadAll()
		if err != nil {
			return defaultRes, respHeaders, err
		}
		err = res.UnmarshalBody(&responseBody, rawBody)
		if err != nil {
			return defaultRes, respHeaders, err
		}

		return &responseBody, respHeaders, nil

	case 403:
		allOptions := []interface{}{
			&clientsBarBar.BarException{},
		}
		v, err := res.ReadAndUnmarshalBodyMultipleOptions(allOptions)
		if err != nil {
			return defaultRes, respHeaders, err
		}
		return defaultRes, respHeaders, v.(error)

	default:
		_, err = res.ReadAll()
		if err != nil {
			return defaultRes, respHeaders, err
		}
	}

	return defaultRes, respHeaders, &zanzibar.UnexpectedHTTPError{
		StatusCode: res.StatusCode,
		RawBody:    res.GetRawBody(),
	}
}

// TooManyArgs calls "/too-many-args-path" endpoint.
func (c *barClient) TooManyArgs(
	ctx context.Context,
	headers map[string]string,
	r *clientsBarBar.Bar_TooManyArgs_Args,
) (*clientsBarBar.BarResponse, map[string]string, error) {
	reqUUID := zanzibar.RequestUUIDFromCtx(ctx)
	if reqUUID != "" {
		if headers == nil {
			headers = make(map[string]string)
		}
		headers[c.requestUUIDHeaderKey] = reqUUID
	}

	var defaultRes *clientsBarBar.BarResponse
	req := zanzibar.NewClientHTTPRequest(ctx, c.clientID, "TooManyArgs", "Bar::tooManyArgs", c.httpClient)

	// Generate full URL.
	fullURL := c.httpClient.BaseURL + "/too-many-args-path"

	err := req.WriteJSON("POST", fullURL, headers, r)
	if err != nil {
		return defaultRes, nil, err
	}

	var res *zanzibar.ClientHTTPResponse
	if c.circuitBreakerDisabled {
		res, err = req.Do()
	} else {
		// We want hystrix ckt-breaker to count errors only for system issues
		var clientErr error
		err = hystrix.DoC(ctx, "bar", func(ctx context.Context) error {
			res, clientErr = req.Do()
			if res != nil {
				// This is not a system error/issue. Downstream responded
				return nil
			}
			return clientErr
		}, nil)
		if err == nil {
			// ckt-breaker was ok, bubble up client error if set
			err = clientErr
		}
	}
	if err != nil {
		return defaultRes, nil, err
	}

	respHeaders := make(map[string]string)
	for k := range res.Header {
		respHeaders[k] = res.Header.Get(k)
	}

	res.CheckOKResponse([]int{200, 403, 418})

	switch res.StatusCode {
	case 200:
		var responseBody clientsBarBar.BarResponse
		rawBody, err := res.ReadAll()
		if err != nil {
			return defaultRes, respHeaders, err
		}
		err = res.UnmarshalBody(&responseBody, rawBody)
		if err != nil {
			return defaultRes, respHeaders, err
		}
		// TODO(jakev): read response headers and put them in body

		return &responseBody, respHeaders, nil

	case 403:
		allOptions := []interface{}{
			&clientsBarBar.BarException{},
		}
		v, err := res.ReadAndUnmarshalBodyMultipleOptions(allOptions)
		if err != nil {
			return defaultRes, respHeaders, err
		}
		return defaultRes, respHeaders, v.(error)
	case 418:
		allOptions := []interface{}{
			&clientsFooFoo.FooException{},
		}
		v, err := res.ReadAndUnmarshalBodyMultipleOptions(allOptions)
		if err != nil {
			return defaultRes, respHeaders, err
		}
		return defaultRes, respHeaders, v.(error)

	default:
		_, err = res.ReadAll()
		if err != nil {
			return defaultRes, respHeaders, err
		}
	}

	return defaultRes, respHeaders, &zanzibar.UnexpectedHTTPError{
		StatusCode: res.StatusCode,
		RawBody:    res.GetRawBody(),
	}
}

// EchoBinary calls "/echo/binary" endpoint.
func (c *barClient) EchoBinary(
	ctx context.Context,
	headers map[string]string,
	r *clientsBarBar.Echo_EchoBinary_Args,
) ([]byte, map[string]string, error) {
	reqUUID := zanzibar.RequestUUIDFromCtx(ctx)
	if reqUUID != "" {
		if headers == nil {
			headers = make(map[string]string)
		}
		headers[c.requestUUIDHeaderKey] = reqUUID
	}

	var defaultRes []byte
	req := zanzibar.NewClientHTTPRequest(ctx, c.clientID, "EchoBinary", "Echo::echoBinary", c.httpClient)

	// Generate full URL.
	fullURL := c.httpClient.BaseURL + "/echo" + "/binary"

	err := req.WriteJSON("POST", fullURL, headers, r)
	if err != nil {
		return defaultRes, nil, err
	}

	headerErr := req.CheckHeaders([]string{"x-uuid"})
	if headerErr != nil {
		return defaultRes, nil, headerErr
	}

	var res *zanzibar.ClientHTTPResponse
	if c.circuitBreakerDisabled {
		res, err = req.Do()
	} else {
		// We want hystrix ckt-breaker to count errors only for system issues
		var clientErr error
		err = hystrix.DoC(ctx, "bar", func(ctx context.Context) error {
			res, clientErr = req.Do()
			if res != nil {
				// This is not a system error/issue. Downstream responded
				return nil
			}
			return clientErr
		}, nil)
		if err == nil {
			// ckt-breaker was ok, bubble up client error if set
			err = clientErr
		}
	}
	if err != nil {
		return defaultRes, nil, err
	}

	respHeaders := make(map[string]string)
	for k := range res.Header {
		respHeaders[k] = res.Header.Get(k)
	}

	res.CheckOKResponse([]int{200})

	switch res.StatusCode {
	case 200:
		responseBody, err := res.ReadAll()
		if err != nil {
			return defaultRes, respHeaders, err
		}
		return responseBody, respHeaders, nil
	default:
		_, err = res.ReadAll()
		if err != nil {
			return defaultRes, respHeaders, err
		}
	}

	return defaultRes, respHeaders, &zanzibar.UnexpectedHTTPError{
		StatusCode: res.StatusCode,
		RawBody:    res.GetRawBody(),
	}
}

// EchoBool calls "/echo/bool" endpoint.
func (c *barClient) EchoBool(
	ctx context.Context,
	headers map[string]string,
	r *clientsBarBar.Echo_EchoBool_Args,
) (bool, map[string]string, error) {
	reqUUID := zanzibar.RequestUUIDFromCtx(ctx)
	if reqUUID != "" {
		if headers == nil {
			headers = make(map[string]string)
		}
		headers[c.requestUUIDHeaderKey] = reqUUID
	}

	var defaultRes bool
	req := zanzibar.NewClientHTTPRequest(ctx, c.clientID, "EchoBool", "Echo::echoBool", c.httpClient)

	// Generate full URL.
	fullURL := c.httpClient.BaseURL + "/echo" + "/bool"

	err := req.WriteJSON("POST", fullURL, headers, r)
	if err != nil {
		return defaultRes, nil, err
	}

	headerErr := req.CheckHeaders([]string{"x-uuid"})
	if headerErr != nil {
		return defaultRes, nil, headerErr
	}

	var res *zanzibar.ClientHTTPResponse
	if c.circuitBreakerDisabled {
		res, err = req.Do()
	} else {
		// We want hystrix ckt-breaker to count errors only for system issues
		var clientErr error
		err = hystrix.DoC(ctx, "bar", func(ctx context.Context) error {
			res, clientErr = req.Do()
			if res != nil {
				// This is not a system error/issue. Downstream responded
				return nil
			}
			return clientErr
		}, nil)
		if err == nil {
			// ckt-breaker was ok, bubble up client error if set
			err = clientErr
		}
	}
	if err != nil {
		return defaultRes, nil, err
	}

	respHeaders := make(map[string]string)
	for k := range res.Header {
		respHeaders[k] = res.Header.Get(k)
	}

	res.CheckOKResponse([]int{200})

	switch res.StatusCode {
	case 200:
		var responseBody bool
		rawBody, err := res.ReadAll()
		if err != nil {
			return defaultRes, respHeaders, err
		}
		err = res.UnmarshalBody(&responseBody, rawBody)
		if err != nil {
			return defaultRes, respHeaders, err
		}

		return responseBody, respHeaders, nil
	default:
		_, err = res.ReadAll()
		if err != nil {
			return defaultRes, respHeaders, err
		}
	}

	return defaultRes, respHeaders, &zanzibar.UnexpectedHTTPError{
		StatusCode: res.StatusCode,
		RawBody:    res.GetRawBody(),
	}
}

// EchoDouble calls "/echo/double" endpoint.
func (c *barClient) EchoDouble(
	ctx context.Context,
	headers map[string]string,
	r *clientsBarBar.Echo_EchoDouble_Args,
) (float64, map[string]string, error) {
	reqUUID := zanzibar.RequestUUIDFromCtx(ctx)
	if reqUUID != "" {
		if headers == nil {
			headers = make(map[string]string)
		}
		headers[c.requestUUIDHeaderKey] = reqUUID
	}

	var defaultRes float64
	req := zanzibar.NewClientHTTPRequest(ctx, c.clientID, "EchoDouble", "Echo::echoDouble", c.httpClient)

	// Generate full URL.
	fullURL := c.httpClient.BaseURL + "/echo" + "/double"

	err := req.WriteJSON("POST", fullURL, headers, r)
	if err != nil {
		return defaultRes, nil, err
	}

	headerErr := req.CheckHeaders([]string{"x-uuid"})
	if headerErr != nil {
		return defaultRes, nil, headerErr
	}

	var res *zanzibar.ClientHTTPResponse
	if c.circuitBreakerDisabled {
		res, err = req.Do()
	} else {
		// We want hystrix ckt-breaker to count errors only for system issues
		var clientErr error
		err = hystrix.DoC(ctx, "bar", func(ctx context.Context) error {
			res, clientErr = req.Do()
			if res != nil {
				// This is not a system error/issue. Downstream responded
				return nil
			}
			return clientErr
		}, nil)
		if err == nil {
			// ckt-breaker was ok, bubble up client error if set
			err = clientErr
		}
	}
	if err != nil {
		return defaultRes, nil, err
	}

	respHeaders := make(map[string]string)
	for k := range res.Header {
		respHeaders[k] = res.Header.Get(k)
	}

	res.CheckOKResponse([]int{200})

	switch res.StatusCode {
	case 200:
		var responseBody float64
		rawBody, err := res.ReadAll()
		if err != nil {
			return defaultRes, respHeaders, err
		}
		err = res.UnmarshalBody(&responseBody, rawBody)
		if err != nil {
			return defaultRes, respHeaders, err
		}

		return responseBody, respHeaders, nil
	default:
		_, err = res.ReadAll()
		if err != nil {
			return defaultRes, respHeaders, err
		}
	}

	return defaultRes, respHeaders, &zanzibar.UnexpectedHTTPError{
		StatusCode: res.StatusCode,
		RawBody:    res.GetRawBody(),
	}
}

// EchoEnum calls "/echo/enum" endpoint.
func (c *barClient) EchoEnum(
	ctx context.Context,
	headers map[string]string,
	r *clientsBarBar.Echo_EchoEnum_Args,
) (clientsBarBar.Fruit, map[string]string, error) {
	reqUUID := zanzibar.RequestUUIDFromCtx(ctx)
	if reqUUID != "" {
		if headers == nil {
			headers = make(map[string]string)
		}
		headers[c.requestUUIDHeaderKey] = reqUUID
	}

	var defaultRes clientsBarBar.Fruit
	req := zanzibar.NewClientHTTPRequest(ctx, c.clientID, "EchoEnum", "Echo::echoEnum", c.httpClient)

	// Generate full URL.
	fullURL := c.httpClient.BaseURL + "/echo" + "/enum"

	err := req.WriteJSON("POST", fullURL, headers, r)
	if err != nil {
		return defaultRes, nil, err
	}

	headerErr := req.CheckHeaders([]string{"x-uuid"})
	if headerErr != nil {
		return defaultRes, nil, headerErr
	}

	var res *zanzibar.ClientHTTPResponse
	if c.circuitBreakerDisabled {
		res, err = req.Do()
	} else {
		// We want hystrix ckt-breaker to count errors only for system issues
		var clientErr error
		err = hystrix.DoC(ctx, "bar", func(ctx context.Context) error {
			res, clientErr = req.Do()
			if res != nil {
				// This is not a system error/issue. Downstream responded
				return nil
			}
			return clientErr
		}, nil)
		if err == nil {
			// ckt-breaker was ok, bubble up client error if set
			err = clientErr
		}
	}
	if err != nil {
		return defaultRes, nil, err
	}

	respHeaders := make(map[string]string)
	for k := range res.Header {
		respHeaders[k] = res.Header.Get(k)
	}

	res.CheckOKResponse([]int{200})

	switch res.StatusCode {
	case 200:
		var responseBody clientsBarBar.Fruit
		rawBody, err := res.ReadAll()
		if err != nil {
			return defaultRes, respHeaders, err
		}
		err = res.UnmarshalBody(&responseBody, rawBody)
		if err != nil {
			return defaultRes, respHeaders, err
		}

		return responseBody, respHeaders, nil
	default:
		_, err = res.ReadAll()
		if err != nil {
			return defaultRes, respHeaders, err
		}
	}

	return defaultRes, respHeaders, &zanzibar.UnexpectedHTTPError{
		StatusCode: res.StatusCode,
		RawBody:    res.GetRawBody(),
	}
}

// EchoI16 calls "/echo/i16" endpoint.
func (c *barClient) EchoI16(
	ctx context.Context,
	headers map[string]string,
	r *clientsBarBar.Echo_EchoI16_Args,
) (int16, map[string]string, error) {
	reqUUID := zanzibar.RequestUUIDFromCtx(ctx)
	if reqUUID != "" {
		if headers == nil {
			headers = make(map[string]string)
		}
		headers[c.requestUUIDHeaderKey] = reqUUID
	}

	var defaultRes int16
	req := zanzibar.NewClientHTTPRequest(ctx, c.clientID, "EchoI16", "Echo::echoI16", c.httpClient)

	// Generate full URL.
	fullURL := c.httpClient.BaseURL + "/echo" + "/i16"

	err := req.WriteJSON("POST", fullURL, headers, r)
	if err != nil {
		return defaultRes, nil, err
	}

	headerErr := req.CheckHeaders([]string{"x-uuid"})
	if headerErr != nil {
		return defaultRes, nil, headerErr
	}

	var res *zanzibar.ClientHTTPResponse
	if c.circuitBreakerDisabled {
		res, err = req.Do()
	} else {
		// We want hystrix ckt-breaker to count errors only for system issues
		var clientErr error
		err = hystrix.DoC(ctx, "bar", func(ctx context.Context) error {
			res, clientErr = req.Do()
			if res != nil {
				// This is not a system error/issue. Downstream responded
				return nil
			}
			return clientErr
		}, nil)
		if err == nil {
			// ckt-breaker was ok, bubble up client error if set
			err = clientErr
		}
	}
	if err != nil {
		return defaultRes, nil, err
	}

	respHeaders := make(map[string]string)
	for k := range res.Header {
		respHeaders[k] = res.Header.Get(k)
	}

	res.CheckOKResponse([]int{200})

	switch res.StatusCode {
	case 200:
		var responseBody int16
		rawBody, err := res.ReadAll()
		if err != nil {
			return defaultRes, respHeaders, err
		}
		err = res.UnmarshalBody(&responseBody, rawBody)
		if err != nil {
			return defaultRes, respHeaders, err
		}

		return responseBody, respHeaders, nil
	default:
		_, err = res.ReadAll()
		if err != nil {
			return defaultRes, respHeaders, err
		}
	}

	return defaultRes, respHeaders, &zanzibar.UnexpectedHTTPError{
		StatusCode: res.StatusCode,
		RawBody:    res.GetRawBody(),
	}
}

// EchoI32 calls "/echo/i32" endpoint.
func (c *barClient) EchoI32(
	ctx context.Context,
	headers map[string]string,
	r *clientsBarBar.Echo_EchoI32_Args,
) (int32, map[string]string, error) {
	reqUUID := zanzibar.RequestUUIDFromCtx(ctx)
	if reqUUID != "" {
		if headers == nil {
			headers = make(map[string]string)
		}
		headers[c.requestUUIDHeaderKey] = reqUUID
	}

	var defaultRes int32
	req := zanzibar.NewClientHTTPRequest(ctx, c.clientID, "EchoI32", "Echo::echoI32", c.httpClient)

	// Generate full URL.
	fullURL := c.httpClient.BaseURL + "/echo" + "/i32"

	err := req.WriteJSON("POST", fullURL, headers, r)
	if err != nil {
		return defaultRes, nil, err
	}

	headerErr := req.CheckHeaders([]string{"x-uuid"})
	if headerErr != nil {
		return defaultRes, nil, headerErr
	}

	var res *zanzibar.ClientHTTPResponse
	if c.circuitBreakerDisabled {
		res, err = req.Do()
	} else {
		// We want hystrix ckt-breaker to count errors only for system issues
		var clientErr error
		err = hystrix.DoC(ctx, "bar", func(ctx context.Context) error {
			res, clientErr = req.Do()
			if res != nil {
				// This is not a system error/issue. Downstream responded
				return nil
			}
			return clientErr
		}, nil)
		if err == nil {
			// ckt-breaker was ok, bubble up client error if set
			err = clientErr
		}
	}
	if err != nil {
		return defaultRes, nil, err
	}

	respHeaders := make(map[string]string)
	for k := range res.Header {
		respHeaders[k] = res.Header.Get(k)
	}

	res.CheckOKResponse([]int{200})

	switch res.StatusCode {
	case 200:
		var responseBody int32
		rawBody, err := res.ReadAll()
		if err != nil {
			return defaultRes, respHeaders, err
		}
		err = res.UnmarshalBody(&responseBody, rawBody)
		if err != nil {
			return defaultRes, respHeaders, err
		}

		return responseBody, respHeaders, nil
	default:
		_, err = res.ReadAll()
		if err != nil {
			return defaultRes, respHeaders, err
		}
	}

	return defaultRes, respHeaders, &zanzibar.UnexpectedHTTPError{
		StatusCode: res.StatusCode,
		RawBody:    res.GetRawBody(),
	}
}

// EchoI32Map calls "/echo/i32-map" endpoint.
func (c *barClient) EchoI32Map(
	ctx context.Context,
	headers map[string]string,
	r *clientsBarBar.Echo_EchoI32Map_Args,
) (map[int32]*clientsBarBar.BarResponse, map[string]string, error) {
	reqUUID := zanzibar.RequestUUIDFromCtx(ctx)
	if reqUUID != "" {
		if headers == nil {
			headers = make(map[string]string)
		}
		headers[c.requestUUIDHeaderKey] = reqUUID
	}

	var defaultRes map[int32]*clientsBarBar.BarResponse
	req := zanzibar.NewClientHTTPRequest(ctx, c.clientID, "EchoI32Map", "Echo::echoI32Map", c.httpClient)

	// Generate full URL.
	fullURL := c.httpClient.BaseURL + "/echo" + "/i32-map"

	err := req.WriteJSON("POST", fullURL, headers, r)
	if err != nil {
		return defaultRes, nil, err
	}

	headerErr := req.CheckHeaders([]string{"x-uuid"})
	if headerErr != nil {
		return defaultRes, nil, headerErr
	}

	var res *zanzibar.ClientHTTPResponse
	if c.circuitBreakerDisabled {
		res, err = req.Do()
	} else {
		// We want hystrix ckt-breaker to count errors only for system issues
		var clientErr error
		err = hystrix.DoC(ctx, "bar", func(ctx context.Context) error {
			res, clientErr = req.Do()
			if res != nil {
				// This is not a system error/issue. Downstream responded
				return nil
			}
			return clientErr
		}, nil)
		if err == nil {
			// ckt-breaker was ok, bubble up client error if set
			err = clientErr
		}
	}
	if err != nil {
		return defaultRes, nil, err
	}

	respHeaders := make(map[string]string)
	for k := range res.Header {
		respHeaders[k] = res.Header.Get(k)
	}

	res.CheckOKResponse([]int{200})

	switch res.StatusCode {
	case 200:
		var responseBody map[int32]*clientsBarBar.BarResponse
		rawBody, err := res.ReadAll()
		if err != nil {
			return defaultRes, respHeaders, err
		}
		err = res.UnmarshalBody(&responseBody, rawBody)
		if err != nil {
			return defaultRes, respHeaders, err
		}

		return responseBody, respHeaders, nil
	default:
		_, err = res.ReadAll()
		if err != nil {
			return defaultRes, respHeaders, err
		}
	}

	return defaultRes, respHeaders, &zanzibar.UnexpectedHTTPError{
		StatusCode: res.StatusCode,
		RawBody:    res.GetRawBody(),
	}
}

// EchoI64 calls "/echo/i64" endpoint.
func (c *barClient) EchoI64(
	ctx context.Context,
	headers map[string]string,
	r *clientsBarBar.Echo_EchoI64_Args,
) (int64, map[string]string, error) {
	reqUUID := zanzibar.RequestUUIDFromCtx(ctx)
	if reqUUID != "" {
		if headers == nil {
			headers = make(map[string]string)
		}
		headers[c.requestUUIDHeaderKey] = reqUUID
	}

	var defaultRes int64
	req := zanzibar.NewClientHTTPRequest(ctx, c.clientID, "EchoI64", "Echo::echoI64", c.httpClient)

	// Generate full URL.
	fullURL := c.httpClient.BaseURL + "/echo" + "/i64"

	err := req.WriteJSON("POST", fullURL, headers, r)
	if err != nil {
		return defaultRes, nil, err
	}

	headerErr := req.CheckHeaders([]string{"x-uuid"})
	if headerErr != nil {
		return defaultRes, nil, headerErr
	}

	var res *zanzibar.ClientHTTPResponse
	if c.circuitBreakerDisabled {
		res, err = req.Do()
	} else {
		// We want hystrix ckt-breaker to count errors only for system issues
		var clientErr error
		err = hystrix.DoC(ctx, "bar", func(ctx context.Context) error {
			res, clientErr = req.Do()
			if res != nil {
				// This is not a system error/issue. Downstream responded
				return nil
			}
			return clientErr
		}, nil)
		if err == nil {
			// ckt-breaker was ok, bubble up client error if set
			err = clientErr
		}
	}
	if err != nil {
		return defaultRes, nil, err
	}

	respHeaders := make(map[string]string)
	for k := range res.Header {
		respHeaders[k] = res.Header.Get(k)
	}

	res.CheckOKResponse([]int{200})

	switch res.StatusCode {
	case 200:
		var responseBody int64
		rawBody, err := res.ReadAll()
		if err != nil {
			return defaultRes, respHeaders, err
		}
		err = res.UnmarshalBody(&responseBody, rawBody)
		if err != nil {
			return defaultRes, respHeaders, err
		}

		return responseBody, respHeaders, nil
	default:
		_, err = res.ReadAll()
		if err != nil {
			return defaultRes, respHeaders, err
		}
	}

	return defaultRes, respHeaders, &zanzibar.UnexpectedHTTPError{
		StatusCode: res.StatusCode,
		RawBody:    res.GetRawBody(),
	}
}

// EchoI8 calls "/echo/i8" endpoint.
func (c *barClient) EchoI8(
	ctx context.Context,
	headers map[string]string,
	r *clientsBarBar.Echo_EchoI8_Args,
) (int8, map[string]string, error) {
	reqUUID := zanzibar.RequestUUIDFromCtx(ctx)
	if reqUUID != "" {
		if headers == nil {
			headers = make(map[string]string)
		}
		headers[c.requestUUIDHeaderKey] = reqUUID
	}

	var defaultRes int8
	req := zanzibar.NewClientHTTPRequest(ctx, c.clientID, "EchoI8", "Echo::echoI8", c.httpClient)

	// Generate full URL.
	fullURL := c.httpClient.BaseURL + "/echo" + "/i8"

	err := req.WriteJSON("POST", fullURL, headers, r)
	if err != nil {
		return defaultRes, nil, err
	}

	headerErr := req.CheckHeaders([]string{"x-uuid"})
	if headerErr != nil {
		return defaultRes, nil, headerErr
	}

	var res *zanzibar.ClientHTTPResponse
	if c.circuitBreakerDisabled {
		res, err = req.Do()
	} else {
		// We want hystrix ckt-breaker to count errors only for system issues
		var clientErr error
		err = hystrix.DoC(ctx, "bar", func(ctx context.Context) error {
			res, clientErr = req.Do()
			if res != nil {
				// This is not a system error/issue. Downstream responded
				return nil
			}
			return clientErr
		}, nil)
		if err == nil {
			// ckt-breaker was ok, bubble up client error if set
			err = clientErr
		}
	}
	if err != nil {
		return defaultRes, nil, err
	}

	respHeaders := make(map[string]string)
	for k := range res.Header {
		respHeaders[k] = res.Header.Get(k)
	}

	res.CheckOKResponse([]int{200})

	switch res.StatusCode {
	case 200:
		var responseBody int8
		rawBody, err := res.ReadAll()
		if err != nil {
			return defaultRes, respHeaders, err
		}
		err = res.UnmarshalBody(&responseBody, rawBody)
		if err != nil {
			return defaultRes, respHeaders, err
		}

		return responseBody, respHeaders, nil
	default:
		_, err = res.ReadAll()
		if err != nil {
			return defaultRes, respHeaders, err
		}
	}

	return defaultRes, respHeaders, &zanzibar.UnexpectedHTTPError{
		StatusCode: res.StatusCode,
		RawBody:    res.GetRawBody(),
	}
}

// EchoString calls "/echo/string" endpoint.
func (c *barClient) EchoString(
	ctx context.Context,
	headers map[string]string,
	r *clientsBarBar.Echo_EchoString_Args,
) (string, map[string]string, error) {
	reqUUID := zanzibar.RequestUUIDFromCtx(ctx)
	if reqUUID != "" {
		if headers == nil {
			headers = make(map[string]string)
		}
		headers[c.requestUUIDHeaderKey] = reqUUID
	}

	var defaultRes string
	req := zanzibar.NewClientHTTPRequest(ctx, c.clientID, "EchoString", "Echo::echoString", c.httpClient)

	// Generate full URL.
	fullURL := c.httpClient.BaseURL + "/echo" + "/string"

	err := req.WriteJSON("POST", fullURL, headers, r)
	if err != nil {
		return defaultRes, nil, err
	}

	headerErr := req.CheckHeaders([]string{"x-uuid"})
	if headerErr != nil {
		return defaultRes, nil, headerErr
	}

	var res *zanzibar.ClientHTTPResponse
	if c.circuitBreakerDisabled {
		res, err = req.Do()
	} else {
		// We want hystrix ckt-breaker to count errors only for system issues
		var clientErr error
		err = hystrix.DoC(ctx, "bar", func(ctx context.Context) error {
			res, clientErr = req.Do()
			if res != nil {
				// This is not a system error/issue. Downstream responded
				return nil
			}
			return clientErr
		}, nil)
		if err == nil {
			// ckt-breaker was ok, bubble up client error if set
			err = clientErr
		}
	}
	if err != nil {
		return defaultRes, nil, err
	}

	respHeaders := make(map[string]string)
	for k := range res.Header {
		respHeaders[k] = res.Header.Get(k)
	}

	res.CheckOKResponse([]int{200})

	switch res.StatusCode {
	case 200:
		var responseBody string
		rawBody, err := res.ReadAll()
		if err != nil {
			return defaultRes, respHeaders, err
		}
		err = res.UnmarshalBody(&responseBody, rawBody)
		if err != nil {
			return defaultRes, respHeaders, err
		}

		return responseBody, respHeaders, nil
	default:
		_, err = res.ReadAll()
		if err != nil {
			return defaultRes, respHeaders, err
		}
	}

	return defaultRes, respHeaders, &zanzibar.UnexpectedHTTPError{
		StatusCode: res.StatusCode,
		RawBody:    res.GetRawBody(),
	}
}

// EchoStringList calls "/echo/string-list" endpoint.
func (c *barClient) EchoStringList(
	ctx context.Context,
	headers map[string]string,
	r *clientsBarBar.Echo_EchoStringList_Args,
) ([]string, map[string]string, error) {
	reqUUID := zanzibar.RequestUUIDFromCtx(ctx)
	if reqUUID != "" {
		if headers == nil {
			headers = make(map[string]string)
		}
		headers[c.requestUUIDHeaderKey] = reqUUID
	}

	var defaultRes []string
	req := zanzibar.NewClientHTTPRequest(ctx, c.clientID, "EchoStringList", "Echo::echoStringList", c.httpClient)

	// Generate full URL.
	fullURL := c.httpClient.BaseURL + "/echo" + "/string-list"

	err := req.WriteJSON("POST", fullURL, headers, r)
	if err != nil {
		return defaultRes, nil, err
	}

	headerErr := req.CheckHeaders([]string{"x-uuid"})
	if headerErr != nil {
		return defaultRes, nil, headerErr
	}

	var res *zanzibar.ClientHTTPResponse
	if c.circuitBreakerDisabled {
		res, err = req.Do()
	} else {
		// We want hystrix ckt-breaker to count errors only for system issues
		var clientErr error
		err = hystrix.DoC(ctx, "bar", func(ctx context.Context) error {
			res, clientErr = req.Do()
			if res != nil {
				// This is not a system error/issue. Downstream responded
				return nil
			}
			return clientErr
		}, nil)
		if err == nil {
			// ckt-breaker was ok, bubble up client error if set
			err = clientErr
		}
	}
	if err != nil {
		return defaultRes, nil, err
	}

	respHeaders := make(map[string]string)
	for k := range res.Header {
		respHeaders[k] = res.Header.Get(k)
	}

	res.CheckOKResponse([]int{200})

	switch res.StatusCode {
	case 200:
		var responseBody []string
		rawBody, err := res.ReadAll()
		if err != nil {
			return defaultRes, respHeaders, err
		}
		err = res.UnmarshalBody(&responseBody, rawBody)
		if err != nil {
			return defaultRes, respHeaders, err
		}

		return responseBody, respHeaders, nil
	default:
		_, err = res.ReadAll()
		if err != nil {
			return defaultRes, respHeaders, err
		}
	}

	return defaultRes, respHeaders, &zanzibar.UnexpectedHTTPError{
		StatusCode: res.StatusCode,
		RawBody:    res.GetRawBody(),
	}
}

// EchoStringMap calls "/echo/string-map" endpoint.
func (c *barClient) EchoStringMap(
	ctx context.Context,
	headers map[string]string,
	r *clientsBarBar.Echo_EchoStringMap_Args,
) (map[string]*clientsBarBar.BarResponse, map[string]string, error) {
	reqUUID := zanzibar.RequestUUIDFromCtx(ctx)
	if reqUUID != "" {
		if headers == nil {
			headers = make(map[string]string)
		}
		headers[c.requestUUIDHeaderKey] = reqUUID
	}

	var defaultRes map[string]*clientsBarBar.BarResponse
	req := zanzibar.NewClientHTTPRequest(ctx, c.clientID, "EchoStringMap", "Echo::echoStringMap", c.httpClient)

	// Generate full URL.
	fullURL := c.httpClient.BaseURL + "/echo" + "/string-map"

	err := req.WriteJSON("POST", fullURL, headers, r)
	if err != nil {
		return defaultRes, nil, err
	}

	headerErr := req.CheckHeaders([]string{"x-uuid"})
	if headerErr != nil {
		return defaultRes, nil, headerErr
	}

	var res *zanzibar.ClientHTTPResponse
	if c.circuitBreakerDisabled {
		res, err = req.Do()
	} else {
		// We want hystrix ckt-breaker to count errors only for system issues
		var clientErr error
		err = hystrix.DoC(ctx, "bar", func(ctx context.Context) error {
			res, clientErr = req.Do()
			if res != nil {
				// This is not a system error/issue. Downstream responded
				return nil
			}
			return clientErr
		}, nil)
		if err == nil {
			// ckt-breaker was ok, bubble up client error if set
			err = clientErr
		}
	}
	if err != nil {
		return defaultRes, nil, err
	}

	respHeaders := make(map[string]string)
	for k := range res.Header {
		respHeaders[k] = res.Header.Get(k)
	}

	res.CheckOKResponse([]int{200})

	switch res.StatusCode {
	case 200:
		var responseBody map[string]*clientsBarBar.BarResponse
		rawBody, err := res.ReadAll()
		if err != nil {
			return defaultRes, respHeaders, err
		}
		err = res.UnmarshalBody(&responseBody, rawBody)
		if err != nil {
			return defaultRes, respHeaders, err
		}

		return responseBody, respHeaders, nil
	default:
		_, err = res.ReadAll()
		if err != nil {
			return defaultRes, respHeaders, err
		}
	}

	return defaultRes, respHeaders, &zanzibar.UnexpectedHTTPError{
		StatusCode: res.StatusCode,
		RawBody:    res.GetRawBody(),
	}
}

// EchoStringSet calls "/echo/string-set" endpoint.
func (c *barClient) EchoStringSet(
	ctx context.Context,
	headers map[string]string,
	r *clientsBarBar.Echo_EchoStringSet_Args,
) (map[string]struct{}, map[string]string, error) {
	reqUUID := zanzibar.RequestUUIDFromCtx(ctx)
	if reqUUID != "" {
		if headers == nil {
			headers = make(map[string]string)
		}
		headers[c.requestUUIDHeaderKey] = reqUUID
	}

	var defaultRes map[string]struct{}
	req := zanzibar.NewClientHTTPRequest(ctx, c.clientID, "EchoStringSet", "Echo::echoStringSet", c.httpClient)

	// Generate full URL.
	fullURL := c.httpClient.BaseURL + "/echo" + "/string-set"

	err := req.WriteJSON("POST", fullURL, headers, r)
	if err != nil {
		return defaultRes, nil, err
	}

	headerErr := req.CheckHeaders([]string{"x-uuid"})
	if headerErr != nil {
		return defaultRes, nil, headerErr
	}

	var res *zanzibar.ClientHTTPResponse
	if c.circuitBreakerDisabled {
		res, err = req.Do()
	} else {
		// We want hystrix ckt-breaker to count errors only for system issues
		var clientErr error
		err = hystrix.DoC(ctx, "bar", func(ctx context.Context) error {
			res, clientErr = req.Do()
			if res != nil {
				// This is not a system error/issue. Downstream responded
				return nil
			}
			return clientErr
		}, nil)
		if err == nil {
			// ckt-breaker was ok, bubble up client error if set
			err = clientErr
		}
	}
	if err != nil {
		return defaultRes, nil, err
	}

	respHeaders := make(map[string]string)
	for k := range res.Header {
		respHeaders[k] = res.Header.Get(k)
	}

	res.CheckOKResponse([]int{200})

	switch res.StatusCode {
	case 200:
		var responseBody map[string]struct{}
		rawBody, err := res.ReadAll()
		if err != nil {
			return defaultRes, respHeaders, err
		}
		err = res.UnmarshalBody(&responseBody, rawBody)
		if err != nil {
			return defaultRes, respHeaders, err
		}

		return responseBody, respHeaders, nil
	default:
		_, err = res.ReadAll()
		if err != nil {
			return defaultRes, respHeaders, err
		}
	}

	return defaultRes, respHeaders, &zanzibar.UnexpectedHTTPError{
		StatusCode: res.StatusCode,
		RawBody:    res.GetRawBody(),
	}
}

// EchoStructList calls "/echo/struct-list" endpoint.
func (c *barClient) EchoStructList(
	ctx context.Context,
	headers map[string]string,
	r *clientsBarBar.Echo_EchoStructList_Args,
) ([]*clientsBarBar.BarResponse, map[string]string, error) {
	reqUUID := zanzibar.RequestUUIDFromCtx(ctx)
	if reqUUID != "" {
		if headers == nil {
			headers = make(map[string]string)
		}
		headers[c.requestUUIDHeaderKey] = reqUUID
	}

	var defaultRes []*clientsBarBar.BarResponse
	req := zanzibar.NewClientHTTPRequest(ctx, c.clientID, "EchoStructList", "Echo::echoStructList", c.httpClient)

	// Generate full URL.
	fullURL := c.httpClient.BaseURL + "/echo" + "/struct-list"

	err := req.WriteJSON("POST", fullURL, headers, r)
	if err != nil {
		return defaultRes, nil, err
	}

	headerErr := req.CheckHeaders([]string{"x-uuid"})
	if headerErr != nil {
		return defaultRes, nil, headerErr
	}

	var res *zanzibar.ClientHTTPResponse
	if c.circuitBreakerDisabled {
		res, err = req.Do()
	} else {
		// We want hystrix ckt-breaker to count errors only for system issues
		var clientErr error
		err = hystrix.DoC(ctx, "bar", func(ctx context.Context) error {
			res, clientErr = req.Do()
			if res != nil {
				// This is not a system error/issue. Downstream responded
				return nil
			}
			return clientErr
		}, nil)
		if err == nil {
			// ckt-breaker was ok, bubble up client error if set
			err = clientErr
		}
	}
	if err != nil {
		return defaultRes, nil, err
	}

	respHeaders := make(map[string]string)
	for k := range res.Header {
		respHeaders[k] = res.Header.Get(k)
	}

	res.CheckOKResponse([]int{200})

	switch res.StatusCode {
	case 200:
		var responseBody []*clientsBarBar.BarResponse
		rawBody, err := res.ReadAll()
		if err != nil {
			return defaultRes, respHeaders, err
		}
		err = res.UnmarshalBody(&responseBody, rawBody)
		if err != nil {
			return defaultRes, respHeaders, err
		}

		return responseBody, respHeaders, nil
	default:
		_, err = res.ReadAll()
		if err != nil {
			return defaultRes, respHeaders, err
		}
	}

	return defaultRes, respHeaders, &zanzibar.UnexpectedHTTPError{
		StatusCode: res.StatusCode,
		RawBody:    res.GetRawBody(),
	}
}

// EchoStructSet calls "/echo/struct-set" endpoint.
func (c *barClient) EchoStructSet(
	ctx context.Context,
	headers map[string]string,
	r *clientsBarBar.Echo_EchoStructSet_Args,
) ([]*clientsBarBar.BarResponse, map[string]string, error) {
	reqUUID := zanzibar.RequestUUIDFromCtx(ctx)
	if reqUUID != "" {
		if headers == nil {
			headers = make(map[string]string)
		}
		headers[c.requestUUIDHeaderKey] = reqUUID
	}

	var defaultRes []*clientsBarBar.BarResponse
	req := zanzibar.NewClientHTTPRequest(ctx, c.clientID, "EchoStructSet", "Echo::echoStructSet", c.httpClient)

	// Generate full URL.
	fullURL := c.httpClient.BaseURL + "/echo" + "/struct-set"

	err := req.WriteJSON("POST", fullURL, headers, r)
	if err != nil {
		return defaultRes, nil, err
	}

	headerErr := req.CheckHeaders([]string{"x-uuid"})
	if headerErr != nil {
		return defaultRes, nil, headerErr
	}

	var res *zanzibar.ClientHTTPResponse
	if c.circuitBreakerDisabled {
		res, err = req.Do()
	} else {
		// We want hystrix ckt-breaker to count errors only for system issues
		var clientErr error
		err = hystrix.DoC(ctx, "bar", func(ctx context.Context) error {
			res, clientErr = req.Do()
			if res != nil {
				// This is not a system error/issue. Downstream responded
				return nil
			}
			return clientErr
		}, nil)
		if err == nil {
			// ckt-breaker was ok, bubble up client error if set
			err = clientErr
		}
	}
	if err != nil {
		return defaultRes, nil, err
	}

	respHeaders := make(map[string]string)
	for k := range res.Header {
		respHeaders[k] = res.Header.Get(k)
	}

	res.CheckOKResponse([]int{200})

	switch res.StatusCode {
	case 200:
		var responseBody []*clientsBarBar.BarResponse
		rawBody, err := res.ReadAll()
		if err != nil {
			return defaultRes, respHeaders, err
		}
		err = res.UnmarshalBody(&responseBody, rawBody)
		if err != nil {
			return defaultRes, respHeaders, err
		}

		return responseBody, respHeaders, nil
	default:
		_, err = res.ReadAll()
		if err != nil {
			return defaultRes, respHeaders, err
		}
	}

	return defaultRes, respHeaders, &zanzibar.UnexpectedHTTPError{
		StatusCode: res.StatusCode,
		RawBody:    res.GetRawBody(),
	}
}

// EchoTypedef calls "/echo/typedef" endpoint.
func (c *barClient) EchoTypedef(
	ctx context.Context,
	headers map[string]string,
	r *clientsBarBar.Echo_EchoTypedef_Args,
) (clientsBarBar.UUID, map[string]string, error) {
	reqUUID := zanzibar.RequestUUIDFromCtx(ctx)
	if reqUUID != "" {
		if headers == nil {
			headers = make(map[string]string)
		}
		headers[c.requestUUIDHeaderKey] = reqUUID
	}

	var defaultRes clientsBarBar.UUID
	req := zanzibar.NewClientHTTPRequest(ctx, c.clientID, "EchoTypedef", "Echo::echoTypedef", c.httpClient)

	// Generate full URL.
	fullURL := c.httpClient.BaseURL + "/echo" + "/typedef"

	err := req.WriteJSON("POST", fullURL, headers, r)
	if err != nil {
		return defaultRes, nil, err
	}

	headerErr := req.CheckHeaders([]string{"x-uuid"})
	if headerErr != nil {
		return defaultRes, nil, headerErr
	}

	var res *zanzibar.ClientHTTPResponse
	if c.circuitBreakerDisabled {
		res, err = req.Do()
	} else {
		// We want hystrix ckt-breaker to count errors only for system issues
		var clientErr error
		err = hystrix.DoC(ctx, "bar", func(ctx context.Context) error {
			res, clientErr = req.Do()
			if res != nil {
				// This is not a system error/issue. Downstream responded
				return nil
			}
			return clientErr
		}, nil)
		if err == nil {
			// ckt-breaker was ok, bubble up client error if set
			err = clientErr
		}
	}
	if err != nil {
		return defaultRes, nil, err
	}

	respHeaders := make(map[string]string)
	for k := range res.Header {
		respHeaders[k] = res.Header.Get(k)
	}

	res.CheckOKResponse([]int{200})

	switch res.StatusCode {
	case 200:
		var responseBody clientsBarBar.UUID
		rawBody, err := res.ReadAll()
		if err != nil {
			return defaultRes, respHeaders, err
		}
		err = res.UnmarshalBody(&responseBody, rawBody)
		if err != nil {
			return defaultRes, respHeaders, err
		}

		return responseBody, respHeaders, nil
	default:
		_, err = res.ReadAll()
		if err != nil {
			return defaultRes, respHeaders, err
		}
	}

	return defaultRes, respHeaders, &zanzibar.UnexpectedHTTPError{
		StatusCode: res.StatusCode,
		RawBody:    res.GetRawBody(),
	}
}
